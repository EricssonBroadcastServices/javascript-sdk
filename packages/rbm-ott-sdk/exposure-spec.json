{
  "openapi": "3.0.1",
  "info": {
    "title": "Exposure API Reference",
    "description": "![RedBee](https://redbee.ctl.cdn.ebsd.ericsson.net/imagescaler002/redbee/redbeetv/configimages/d04bb721-fb45-4f9e-9216-9c3a219ef322.png?format=webp&h=50)\n\n### Red Bee Media Pulse Exposure API \n\n#### Authentication\n\nMany endpoints require an `Authorization` header:\n\n`Authorization: Bearer <sessionToken> `\n\nIn the **Swagger UI**,  use the **green Authorize** function below to set the session token.\n\nThe `<sessionToken>` is acquired using one of the Login or Session creation endpoints in the [Authentication](#/Authentication) resource section.\n\nIn some endpoints an API-key is required in the `EMP-Auth` header.\n\n`EMP-Auth: Basic <keyId:keySecret>` \n\n`<keyId:keySecret>` is to be Base64Encoded\n\nAPI keys can be created using the customer portal: [https://redbee.live/portal](https://redbee.live/portal).\n\nOlder API keys can also be used in the same way as previous.\n\n#### Data formats\n\nRequest and response bodies are always JSON encoded.\n\nIn request and response bodies, dates and times are ISO 8601 encoded, e.g. `2022-02-22T22:22:22+00:00`, while in query parameters epoch millis are used.\n\n#### Customer and Business Unit\n\nMost endpoints requires `customer` and `businessUnit` in the path. You can instantiate this documentation for a specific customer and businessUnit using this8 URL:\n\n[https://exposure.api.redbee.live/docs/customer/{customer}/businessunit/{businessUnit}/](https://exposure.api.redbee.live/docs/customer/{customer}/businessunit/{businessUnit}/)\n\n#### Eventsink\n\nThe endpoints to report Player analytics events are found here: [https://eventsink.api.redbee.live/docs](https://eventsink.api.redbee.live/docs).\n\n#### Other documentation   \n\nGeneral information of the service can be found at [https://redbee.live/docs/](https://redbee.live/docs/).\n\nDeprecated but still available APIs can be found [here](https://apidocs.emp.ebsd.ericsson.net/). It may overlap to some extent with this swagger."
  },
  "servers": [
    {
      "url": "https://exposure.api.redbee.live",
      "description": "Production"
    }
  ],
  "paths": {
    "/docs/api-docs/{api}": {
      "get": {
        "tags": [
          "open api"
        ],
        "summary": "Get API definition",
        "description": "[OpenApi 3](https://www.openapis.org/) specification of this API",
        "operationId": "getApiDocs",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "description": "Select API",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "exposure",
                "management"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/{fileId}/origin/{host}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Gets a JSON configuration file.",
        "description": "Uses the host parameter to figure out the business unit.",
        "operationId": "getConfigFileCustomDomainInPath",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The file to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "path",
            "description": "The host that will be mapped to a business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFile"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/carouselgroup": {
      "get": {
        "tags": [
          "carousel"
        ],
        "summary": "Gets all groups that have been created for this business unit.",
        "operationId": "getCarouselGroups",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/carouselgroup/{groupId}": {
      "get": {
        "tags": [
          "carousel"
        ],
        "summary": "Gets carousels.",
        "description": "A carousel is a filter on the assets. A group can be anything that is grouping the carousels,\n such as the \"index page\" etc.",
        "operationId": "getCarouselsForGroup",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page. This controls the number of items in each\n                              carousel, all carousels are always returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published. Default = false, of compatibility reasons",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiCarousel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/carouselgroup/{groupId}/carousel/{carouselId}": {
      "get": {
        "tags": [
          "carousel"
        ],
        "summary": "Gets a specific carousel by id.",
        "operationId": "getCarousel",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carouselId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published. Default = false, of compatibility reasons",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiCarousel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/config": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Lists existing configuration files.",
        "operationId": "getConfigFiles",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFilesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/config/{fileName}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Gets a JSON configuration file.",
        "operationId": "getConfigFile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "The file to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Referer",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFile"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Lists assets.",
        "description": "<p>\n Main endpoint for listing/searching for assets. Make sure that calls to this endpoint are called with a limited\n set of parameter permutations to allow responses to be served from a cache.",
        "operationId": "getAssets",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\",\n                              needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "assetType",
            "in": "query",
            "description": "The asset type to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "MOVIE",
                "TV_SHOW",
                "EPISODE",
                "CLIP",
                "TV_CHANNEL",
                "AD",
                "LIVE_EVENT",
                "COLLECTION",
                "PODCAST",
                "PODCAST_EPISODE",
                "EVENT",
                "OTHER"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sort parameter in the format of first,-second.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to filter by. In the elasticsearch query string query format,\n                              I.E: \"tags.genres:action AND localized.en-us.title:armageddon\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIds",
            "in": "query",
            "description": "The asset ids to filter by.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page. Note that pageNumber * pageSize cannot exceed\n                              10000 or an error will occur.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number. Note that pageNumber * pageSize cannot exceed 10000 or an error\n                              will occur.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "playableWithinHours",
            "in": "query",
            "description": "Only return assets that are playable (has a publication.from) earlier than from\n                              now+X hours and are published at the moment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "If we should only return assets that are not geo blocking in this country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "description": "If we should only return assets that are allowed to play on this device",
            "schema": {
              "type": "string",
              "enum": [
                "WEB",
                "MOBILE",
                "TABLET",
                "APPLE_TV",
                "SMART_TV",
                "CONSOLE",
                "STB"
              ]
            }
          },
          {
            "name": "deviceQuery",
            "in": "query",
            "description": "The optional query to filter by in fields nested under publications.devices. In the\n                              elasticsearch query string query format,\n                              I.E: \"publications.devices.rights.threeGBlocked:false AND\n                              publications.devices.os:IOS\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publicationQuery",
            "in": "query",
            "description": "The optional query to filter by in fields nested under publications except\n                              publications.devices. In the elasticsearch query string query format,\n                              I.E: \"publications.rights.wifiBlocked:true\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "description": "If we should only return assets that have publications on any of these products",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "missingFieldsFilter",
            "in": "query",
            "description": "Will only return assets that has an empty value in the field specified in this field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeTvShow",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "programsOnChannelIds",
            "in": "query",
            "description": "Only return assets that if they have programs, only have programs on provided channel ids. Comma separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetList"
                }
              }
            }
          },
          "400": {
            "description": "INVALID_QUERY. If the free text query is not a valid elasticsearch query string query.<br>Result window is too large. If the pageSize times the pageNumber is greater than 10000.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets an asset by asset id.",
        "operationId": "getAsset",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\",\n                        needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "description": "Set to true to include episodes for the asset in the response. Only applicable if the\n                        asset is a tv show. Setting this to true will cause seasons to be includeSeasons true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSeasons",
            "in": "query",
            "description": "Set to true to include seasons for the asset in the response. Only applicable if the\n                        asset is a tv show.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Filter results on if the asset (or episodes) are published in the country specified by this parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_ASSET. If the asset cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/collectionentries": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets the entries of a collection.",
        "operationId": "getCollectionEntries",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the collection. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort entries by the sort order parameter on the collection reference. Sort parameter is the\n                       tiebreaker.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order. Used as tiebreaker if naturalSortOrder is specified.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetList"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_SEASON. If the season is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/next": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets the next episode relative to an episode.",
        "operationId": "getNextEpisode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the current episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\",\n                       needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "NO_EPISODE_FOUND. If the provided episode does not exist,\n or if there is no next episode available.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/previous": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets the previous episode relative to an episode.",
        "operationId": "getPreviousEpisode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the current episode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "NO_EPISODE_FOUND. If the provided episode does not exist or if there is no previous episode\n available.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/season": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets seasons for an asset.",
        "operationId": "getSeasonsForTvShow",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\",\n                       needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeasonList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/season/{season}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets a specific season.",
        "operationId": "getSeason",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the tv show. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "season",
            "in": "path",
            "description": "An integer season number.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\",\n                       needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeason"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_SEASON. If the season is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/season/{season}/episode": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets episodes for a season.",
        "operationId": "getEpisodes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the tv show. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "season",
            "in": "path",
            "description": "An integer season number.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\",\n                       needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetList"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_SEASON. If the season is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/thumbnail": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get a thumbnail for an asset.",
        "description": "The thumbnail will be generated from the video belonging to the asset and based on\n provided time.\n This endpoint will always return a 307 redirect to another url where the thumbnail is actually available.",
        "operationId": "getAssetThumbnail",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to use when creating the thumbnail. It can have two different formats. It can be\n                     a wall clock time like '2021-02-02T10:53:35.400Z'. This assumes that the\n                     asset has a wall clock time. It can also be a duration, like PT30M20S, and\n                     then it will be used as an actual time in th video.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "w",
            "in": "query",
            "description": "An optional width.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "description": "An optional height",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "INVALID_TIME_DURATION. The provided time is not a valid duration.<br>INVALID_TIME_WALL_CLOCK. The provided time is not a valid wall clock time.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_ASSET. If the asset cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{collectionId}/collectionentries/{referenceEntryId}/next": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets the next entry of a collection.",
        "operationId": "getNextCollectionEntry",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "The id of the collection.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceEntryId",
            "in": "path",
            "description": "The id of reference collection entry.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "NO_ENTRY_FOUND. If the provided episode does not exist,\n or if there is no next episode available.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{collectionId}/collectionentries/{referenceEntryId}/previous": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Gets the previous entry of a collection.",
        "operationId": "getPreviousCollectionEntry",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "in": "path",
            "description": "The id of the collection.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceEntryId",
            "in": "path",
            "description": "The id of reference collection entry.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "NO_ENTRY_FOUND. If the provided episode does not exist,\n or if there is no next episode available.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/autocomplete/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Does prefix autocomplete for a query.",
        "operationId": "autocomplete",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to autocomplete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locale to autocomplete in.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/epg/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Searches the epg for a query.",
        "operationId": "searchEpg",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The millis to get from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The millis to get to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locale to search in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sort parameter in the format of first,-second. Defaults to sorting by\n                       relevance.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEpgSearchHits"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Searches for a query.",
        "operationId": "search",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locale to search in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The comma separates list of types to search in.",
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sort parameter in the format of first,-second. Defaults to sorting by\n                              relevance.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/suggestions/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Gets spelling suggestions for a key.",
        "operationId": "getSuggestions",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to autocomplete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locale to autocomplete in.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/season": {
      "get": {
        "tags": [
          "season"
        ],
        "summary": "Lists seasons",
        "operationId": "getSeasons",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\", needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "description": "Set to true to include episodes for the seasons in the response.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "seasonIds",
            "in": "query",
            "description": "The season ids to filter by.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sort parameter in the format of first,-second.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2.\n                              Currently This only applies to the episodes if includeEpisodes=true. If\n                              includeEpisodes = false, then this has no effect.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeasonList"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_SEASON. If the season is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/season/{seasonId}": {
      "get": {
        "tags": [
          "season"
        ],
        "summary": "Gets a specific season by id.",
        "operationId": "getSeasonById",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "description": "The id of the season. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "DEPRECATED 2019-12-10. The authorization header in the format \"Bearer sessionToken\", needed if including user data.",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "description": "Set to true to include episodes for the season in the response.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeason"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_SEASON. If the season is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/document": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Gets document.",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "query",
            "description": "Which document to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "end_user_consent",
                "end_user_cookie_policy",
                "end_user_privacy_policy",
                "end_user_terms_and_conditions",
                "custom_document",
                "END_USER_CONSENT",
                "END_USER_COOKIE_POLICY",
                "END_USER_PRIVACY_POLICY",
                "END_USER_TERMS_AND_CONDITIONS",
                "CUSTOM_DOCUMENT"
              ]
            }
          },
          {
            "name": "customDocumentName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferredLanguage",
            "in": "query",
            "description": "ISO 639-1 language code. If not stated or not supported fall back to other languages will be performed.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiHtmlDocument"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          },
          "422": {
            "description": "BAD_DOCUMENT_ID. Unrecognized documentId.<br>UNKNOWN_LANGUAGE. Unrecognized documentId.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/export/asset": {
      "get": {
        "tags": [
          "xport"
        ],
        "summary": "Get all assets.",
        "description": "This request is privileged and thus needs server to server authentication.",
        "operationId": "exportAssets",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "description": "The asset type to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "MOVIE",
                "TV_SHOW",
                "EPISODE",
                "CLIP",
                "TV_CHANNEL",
                "AD",
                "LIVE_EVENT",
                "COLLECTION",
                "PODCAST",
                "PODCAST_EPISODE",
                "EVENT",
                "OTHER"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Created time (epoch millis) to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "The pre-shared API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetListBulk"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/location": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Get location.",
        "description": "Get location information based on caller IP-address.",
        "operationId": "get",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          },
          {
            "name": "Referer",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Gets key value pair of preferences for a user.",
        "operationId": "getPreferences",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserPreferenceResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "preferences"
        ],
        "summary": "Set key value pair of preferences for a user.",
        "operationId": "setPreferences",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Json body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSetUserPreferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "403": {
            "description": "TOO_MANY_PREFERENCES. If the body exceed the configured max number of preferences.<br>TOO_LONG_PREFERENCES. If any item in the body is longer than the max configured length.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/asset": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Gets an asset list for a user.",
        "operationId": "getAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of assets to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAssetListItemResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/asset/{assetId}": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Gets an item from the asset list.",
        "operationId": "getFromAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetListItemResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "preferences"
        ],
        "summary": "Adds an item to the asset list.",
        "operationId": "addToAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAssetListItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "403": {
            "description": "TOO_MANY_PREFERENCES. If the body exceed the configured max number of preferences.<br>TOO_LONG_PREFERENCES. If any item in the body is longer than the max configured length.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.<br>UNKNOWN_ASSET. If the asset is not found.",
            "content": {}
          },
          "409": {
            "description": "LIMIT_REACHED. If the maximum number of items in the list have been reached.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "preferences"
        ],
        "summary": "Deletes an item from the asset list.",
        "operationId": "deleteFromAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/tag": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Gets a list for a user.",
        "operationId": "getList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPreferencesListResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/tag/{id}": {
      "post": {
        "tags": [
          "preferences"
        ],
        "summary": "Adds an item to a list.",
        "operationId": "addToList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The list item id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAssetListItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "403": {
            "description": "TOO_MANY_PREFERENCES. If the body exceed the configured max number of preferences.<br>TOO_LONG_PREFERENCES. If any item in the body is longer than the max configured length.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          },
          "409": {
            "description": "LIMIT_REACHED. If the maximum number of items in the list have been reached.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "preferences"
        ],
        "summary": "Deletes an item from a list.",
        "operationId": "deleteFromList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/tag": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Lists all tags.",
        "operationId": "listTags",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "description": "The scheme of the tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sort parameter in the format of first,-second.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTagList"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/tag/{tagId}": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Gets a tag by id.",
        "operationId": "getTagById",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "The id of the tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTagType"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_TAG. If a tag with the id cannot be found.<br>UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/tag/asset": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Lists all unique tags of a given scheme that are referenced by at least one asset.",
        "operationId": "getUniqueTagsFromAssets",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to filter by. In the elasticsearch query string query format,\n                              I.E: \"tags.genres:action AND localized.en-us.title:armageddon\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "description": "The asset type to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "MOVIE",
                "TV_SHOW",
                "EPISODE",
                "CLIP",
                "TV_CHANNEL",
                "LIVE_EVENT",
                "AD",
                "COLLECTION",
                "PODCAST",
                "PODCAST_EPISODE",
                "EVENT",
                "OTHER"
              ]
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "If we should only return assets that are not geo blocking in this country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceQuery",
            "in": "query",
            "description": "The optional query to filter by in fields nested under publications.devices. In the\n                              elasticsearch query string query format,\n                              I.E: \"publications.devices.rights.threeGBlocked:false AND\n                              publications.devices.os:IOS\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publicationQuery",
            "in": "query",
            "description": "The optional query to filter by in fields nested under publications except\n                              publications.devices. In the elasticsearch query string query format,\n                              I.E: \"publications.rights.wifiBlocked:true\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "description": "If we should only return assets that have publications on any of these products",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTagList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/time": {
      "get": {
        "tags": [
          "time"
        ],
        "summary": "Get time.",
        "description": "Gets the current server UTC time.",
        "operationId": "time_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeResponse"
                }
              }
            }
          },
          "4xx": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "The the business unit cannot be found.": {
                    "description": "The the business unit cannot be found.",
                    "valueSetFlag": false,
                    "value": "{\n  \"httpCode\" : 404,\n  \"message\" : \"UNKNOWN_BUSINESS_UNIT\",\n  \"extendedMessage\" : null\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/userplayhistory/continue/tvshow/{tvshowid}": {
      "get": {
        "tags": [
          "userplayhistory"
        ],
        "summary": "EXPERIMENTAL\n Get the episode in progress",
        "operationId": "getContinueWatchingTvShow",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tvshowid",
            "in": "path",
            "description": "The tvShowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchedTvShowResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_ASSET. If the asset with id tvShowId cannot be found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/userplayhistory/lastviewed/asset/{assetId}": {
      "delete": {
        "tags": [
          "userplayhistory"
        ],
        "summary": "Deletes an asset from the last viewed asset list.",
        "operationId": "deleteFromLastViewedAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/userplayhistory/lastviewedoffset": {
      "get": {
        "tags": [
          "userplayhistory"
        ],
        "summary": "Gets last viewed offset for assets for a user.",
        "operationId": "getLastViewedOffsetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIds",
            "in": "query",
            "description": "The asset ids to filter by.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Return all bookmarks for the account and not only the ones for current user.\n                       Default value false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page. Default value is 200.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number. Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiLastViewedOffsetList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/config": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Lists existing configuration files on customer level.",
        "operationId": "getConfigFilesCu",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFilesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/config/{fileName}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Gets a JSON configuration file stored on customer level.",
        "operationId": "getConfigCuFile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "The file to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version of the file to get.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Referer",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFile"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/channel/onnow": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get active channel statuses.",
        "description": "<p>\n Status of a channel includes whether it is available (in the case of virtual channels) and the currently playing assets. This endpoint only considers active virtual channels.",
        "operationId": "getActiveChannels",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minutesForward",
            "in": "query",
            "description": "Include future assets that start sooner than this many minutes ahead. Default value 0 returns only the currently playing asset of each channel",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of channels per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number. Currently only supports one page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sortingLocale",
            "in": "query",
            "description": "Sort by the sorting title property of the given locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiActiveChannels"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/channel/onnow/{channelId}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets channel status.",
        "description": "<p>\n Status of a channel includes whether it is available (in the case of virtual channels) and the currently playing assets.",
        "operationId": "getChannelStatus",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minutesForward",
            "in": "query",
            "description": "Include future assets that start sooner than this many minutes ahead. Default value 0 returns only the currently playing asset of each channel",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelStatus"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>CHANNEL_STATUS_NOT_FOUND. Channel is personalized or the channel type could not be found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/rating/all": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Give all asset ratings given by currently logged in user.",
        "operationId": "getAllUserContentRatingsForUser",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGetAllUserContentRatingsForUserResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/rating/asset/{assetId}": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Get rating of an asset given by the currently logged in user.",
        "operationId": "getUserContentRating",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGetUserContentRatingResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "put": {
        "tags": [
          "rating"
        ],
        "summary": "Create/Update a rating for an asset given by currently logged in user.",
        "operationId": "putUserContentRating",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The user rating for the asset; the body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPutUserContentRatingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          },
          "422": {
            "description": "RATING_BELOW_ZERO. If the supplied rating is below 0.0.<br>RATING_ABOVE_ONE. If the supplied rating is above 1.0.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "apiPutUserContentRatingRequest",
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "rating"
        ],
        "summary": "Delete an asset rating given by currently logged in user.",
        "operationId": "deleteUserContentRating",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/rating/asset/{assetId}/all": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Get all ratings for an asset.",
        "operationId": "getAllUserContentRatingsForAsset",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGetAllUserContentRatingsForAssetResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/recommend/continue": {
      "get": {
        "tags": [
          "recommender"
        ],
        "summary": "Get list of assets to continue watching",
        "operationId": "getContinueWatching",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiContinueUph2Assets"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/recommend/user": {
      "get": {
        "tags": [
          "recommender"
        ],
        "summary": "Get recommendations for a user.",
        "operationId": "getRecommendationsForUser",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRecommendedAssets"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/recommend/watchNext/{assetId}": {
      "get": {
        "tags": [
          "recommender"
        ],
        "summary": "Watch next.",
        "description": "Gets a list of assets to watch next in for example a playlist\n Not depending on user. Can be used for not logged in.",
        "operationId": "getRecommendationsForAsset",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The assetId that you have just played.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRecommendedWatchNext"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/systemConfig": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get system configuration for bu.",
        "description": "paymentType.\n accountConfirmationRequired, if true, the user need to confirm the self service created user with token from mail/sms.\n allowAccessWithoutLogin, if true, the user may get limited access without being logged in.\n currencies, valid currencies.\n displayLocales, valid locales.\n informationCollectionConsentDate, date which teh user should hav give consent after.\n environment, PRESTAGE or PRODUCTION",
        "operationId": "getSystemConfig",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Origin",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSystemConfig"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/adobePrimetimeLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login using a Adobe Primetime media token.",
        "description": "<p>",
        "operationId": "loginPrimetime",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPrimetimeAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "DEVICE_LIMIT_EXCEEDED. If the account has exceeded the number of allowed devices.<br>SESSION_LIMIT_EXCEEDED. If the account has exceeded the number of allowed sessions.<br>UNKNOWN_DEVICE_ID. If the device body is not included and the device id is not found.<br>INVALID_JSON. If JSON received is not valid JSON.<br>THIRD_PARTY_ERROR. If third party login generate error message, for detail error code see\n field extendedMessage.",
            "content": {}
          },
          "403": {
            "description": "INFORMATION_COLLECTION_CONSENT_MISSING. The user is required to give consent to collect<br>NOT_CONFIGURED. The OU is not configured to use Primetime.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          },
          "429": {
            "description": "TEMPORARILY_LOCKED. Login is blocked for the account or IP-address for a while due to too\n many failed login attempts",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "authRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/anonymous": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Creates an anonymous session.",
        "operationId": "anonymousSessionV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAnonymousSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAnonymousSessionResponse"
                }
              }
            }
          },
          "401": {
            "description": "INVALID_SESSION_TOKEN. If the session token is invalid",
            "content": {}
          },
          "403": {
            "description": "FORBIDDEN. If the business unit is not configured to support anonymous sessions.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "loginRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/externalusersession": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Creates a session for an external user - a user known only by the caller.",
        "description": "This request is privileged and thus needs server to server\n authentication.",
        "operationId": "externalUserSession",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "The pre-shared API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiExternalUserSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCreateSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "DEVICE_LIMIT_EXCEEDED. If the account has exceeded the number of allowed devices.<br>UNKNOWN_DEVICE_ID. If the device body is not included and the device id is not found.<br>INVALID_JSON. If JSON received is not valid JSON.",
            "content": {}
          },
          "403": {
            "description": "FORBIDDEN. The calling server is not authenticated using for instance api key.<br>NOT_CONFIGURED. The OU is not configured to use the v2 API",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "JSON_DOES_NOT_FOLLOW_CONTRACT. If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "sessionRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/firebaseLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login using a Firebase access token.",
        "description": "<p>",
        "operationId": "loginFirebase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFirebaseAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "DEVICE_LIMIT_EXCEEDED. If the account has exceeded the number of allowed devices.<br>SESSION_LIMIT_EXCEEDED. If the account has exceeded the number of allowed sessions.<br>UNKNOWN_DEVICE_ID. If the device body is not included and the device id is not found.<br>INVALID_JSON. If JSON received is not valid JSON.<br>THIRD_PARTY_ERROR. If third party login generate error message, for detail error code see\n field extendedMessage.",
            "content": {}
          },
          "403": {
            "description": "INFORMATION_COLLECTION_CONSENT_MISSING. The user is required to give consent to collect<br>NOT_CONFIGURED. The OU is not configured to use the v2 API e.g EE2<br>USERNAME_ALREADY_IN_USE. The email address is used by another account",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          },
          "429": {
            "description": "TEMPORARILY_LOCKED. Login is blocked for the account or IP-address for a while due to too\n many failed login attempts",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "authRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/gigyaLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login using a Gigya JWT.",
        "description": "<p>",
        "operationId": "loginGigya",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGigyaAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "DEVICE_LIMIT_EXCEEDED. If the account has exceeded the number of allowed devices.<br>SESSION_LIMIT_EXCEEDED. If the account has exceeded the number of allowed sessions.<br>UNKNOWN_DEVICE_ID. If the device body is not included and the device id is not found.<br>INVALID_JSON. If JSON received is not valid JSON.<br>THIRD_PARTY_ERROR. If third party login generate error message, for detail error code see\n field extendedMessage.",
            "content": {}
          },
          "403": {
            "description": "INFORMATION_COLLECTION_CONSENT_MISSING. The user is required to give consent to collect<br>NOT_CONFIGURED. The OU is not configured to use Gigya.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "authRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/login": {
      "delete": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromAllDevice",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If Bearer is missing in authorization header.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oauth/auth": {
      "get": {
        "tags": [
          "authentication"
        ],
        "operationId": "getOauthAuth",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oauth/redir": {
      "get": {
        "tags": [
          "authentication"
        ],
        "operationId": "getOauthRedir",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oauthLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "operationId": "loginOauth",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiOauthAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "authRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oidcLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "EXPERIMENTAL Performs a login using an OpenIdConnect JWT.",
        "description": "<p>",
        "operationId": "loginOpenIdConnect",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiOidcAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "DEVICE_LIMIT_EXCEEDED. If the account has exceeded the number of allowed devices.<br>SESSION_LIMIT_EXCEEDED. If the account has exceeded the number of allowed sessions.<br>UNKNOWN_DEVICE_ID. If the device body is not included and the device id is not found.<br>INVALID_JSON. If JSON received is not valid JSON.<br>THIRD_PARTY_ERROR. If third party login generate error message, for detail error code see\n field extendedMessage.",
            "content": {}
          },
          "403": {
            "description": "INFORMATION_COLLECTION_CONSENT_MISSING. The user is required to give consent to collect<br>NOT_CONFIGURED. The OU is not configured to use OpenIdConnect.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "authRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/session": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Validate session.",
        "description": "Checks if the session is still valid. If the session is marked \"overTheDeviceLimit\" ths session is valid\n but may only be used to list and delete devices. By deleting another device the \"overTheDeviceLimit\" will be cleared.",
        "operationId": "validateSessionToken",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSessionResponse"
                }
              }
            }
          },
          "401": {
            "description": "INVALID_SESSION_TOKEN. If the session token is invalid",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Creates a session for a API-Key user.",
        "description": "This request is privileged and thus needs server to server\n authentication.",
        "operationId": "sessionV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "The pre-shared API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiApiKeyUserSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCreateSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "DEVICE_LIMIT_EXCEEDED. If the account has exceeded the number of allowed devices.<br>UNKNOWN_DEVICE_ID. If the device body is not included and the device id is not found.<br>INVALID_JSON. If JSON received is not valid JSON.",
            "content": {}
          },
          "403": {
            "description": "FORBIDDEN. The calling server is not authenticated using for instance api key.<br>NOT_CONFIGURED. The OU is not configured to use the v2 API",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "JSON_DOES_NOT_FOLLOW_CONTRACT. If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "sessionRequest"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/session/delete": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Deletes all sessions created by a user.",
        "description": "If the user is the account's owner, then all the sessions of the account will be deleted.\n\n If a deleted session was created with 'userSession' : true,\n then the history of that session will not be revealed in any forthcoming sessions with this username.\n\n This request is privileged and thus needs server to server authentication.",
        "operationId": "deleteSessionsV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "The pre-shared API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeleteUsersSessionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "INVALID_JSON. If JSON received is not valid JSON.",
            "content": {}
          },
          "403": {
            "description": "FORBIDDEN. The calling server is not authenticated using for instance api key.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "JSON_DOES_NOT_FOLLOW_CONTRACT. If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/config/{fileName}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "EXPERIMENTAL Gets a JSON customer specific json file.",
        "description": "It will return a file stored on business unit level.\n\n The response is a JSON object or array as stored.",
        "operationId": "getConfigFileV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "The file to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "404": {
            "description": "FILE_NOT_FOUND. If the file is not found.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/content/search/query": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "EXPERIMENTAL - List assets - same query params as search",
        "operationId": "searchV2NoQuery",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The comma separates list of asset types to filter on.",
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tag ids to filter on.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "durationLower",
            "in": "query",
            "description": "Filter for material duration. Lower limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "durationUpper",
            "in": "query",
            "description": "Filter for material duration. Upper limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtitles",
            "in": "query",
            "description": "Subtitle filter. Comma separated list of languages.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "Filter on parental rating (format of COUNTRY:RATING,COUNTRY:RATING2)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Filter on allowed in country.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyDownloadable",
            "in": "query",
            "description": "Only return assets that has downloadBlocked set to false in a publication.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/content/search/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "EXPERIMENTAL - Free text query in selected fields in assets.",
        "operationId": "searchV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locales to search in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The comma separates list of asset types to filter on.",
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tag ids to filter on.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "durationLower",
            "in": "query",
            "description": "Filter for material duration. Lower limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "durationUpper",
            "in": "query",
            "description": "Filter for material duration. Upper limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtitles",
            "in": "query",
            "description": "Subtitle filter. Comma separated list of languages.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemes",
            "in": "query",
            "description": "The schemes of tags to search. If no schemes, tags will not be searched.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "Filter on parental rating (format of COUNTRY:RATING,COUNTRY:RATING2)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Filter on allowed in country.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyDownloadable",
            "in": "query",
            "description": "Only return assets that has downloadBlocked set to false in a publication.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/device": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "List devices.",
        "description": "Can be called even when the current session is \"overTheDeviceLimit\", if so, use this call to let the user select\n which device to delete.",
        "operationId": "getDevicesForAccountV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDevicesResponseV2"
                }
              }
            }
          },
          "401": {
            "description": "INVALID_SESSION_TOKEN. If the session token is invalid",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/device/{deviceId}": {
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "Delete device.",
        "description": "If the session from which this call is made is marked as \"overTheDeviceLimit\"\n this marking will be cleared, which can be checked by validating the session.",
        "operationId": "deleteDeviceForAccountV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "INVALID_SESSION_TOKEN. If the session token is invalid",
            "content": {}
          },
          "403": {
            "description": "DELETE_SELF_NOT_ALLOWED. The device of this session may not be deleted.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/download": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "<p>\n Perform a download operation that will give the client media locators and license information.",
        "operationId": "download",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking download info.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDownloadResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "403": {
            "description": "MAX_DOWNLOAD_COUNT_LIMIT_REACHED. Max number of downloads for this asset reached.<br>FORBIDDEN. Operation is not allowed.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is no found.<br>UNKNOWN_ASSET. If the asset is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadcompleted": {
      "post": {
        "tags": [
          "downloads"
        ],
        "summary": "Register a completed download of an asset.",
        "operationId": "downloadCompleted",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBookkeeperAsset"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadinfo": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "<p>\n Checks if the user is entitled to download the asset.",
        "description": "It will also return information about different download alternatives.",
        "operationId": "downloadInfo",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking download info.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDownloadInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "403": {
            "description": "MAX_DOWNLOAD_COUNT_LIMIT_REACHED. Max number of downloads for this asset reached.<br>FORBIDDEN. Operation is not allowed.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is no found.<br>UNKNOWN_ASSET. If the asset is not found.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadrenewed": {
      "post": {
        "tags": [
          "downloads"
        ],
        "summary": "Register license renewed for a downloaded asset.",
        "description": "This will count as a new download.",
        "operationId": "downloadRenewed",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBookkeeperAsset"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloads": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get information for all downloads for an asset done by an account.",
        "operationId": "getDownloadsForAsset",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBookkeeperAsset"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "downloads"
        ],
        "summary": "Unregister all downloads for an asset done by an account.",
        "operationId": "deleteDownloadsForAsset",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadverified": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Verify a download.",
        "description": "Verifies that an asset is still valid for offline play and get when publication ends.",
        "operationId": "downloadVerified",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiVerifiedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/downloads": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get information about all downloads done by an account.",
        "operationId": "getDownloadsForAccount",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBookkeeperAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "downloads"
        ],
        "summary": "Unregister all downloads done by an account.",
        "operationId": "deleteDownloadsForAccount",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to\n                      server authentication, this has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/event/date/{date}": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Get events.",
        "operationId": "getEventsV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The businessUnit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date for which to base the event query. (Format: yyyy-mm-dd).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back from the date parameter for events to include in the query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward from the date parameter for events to include in the query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "hideEnded",
            "in": "query",
            "description": "Hide events that have ended at the time of this request reaching the backend.\n                          I.e. The from time of the query is set to \"now\".\n                          Note: Recently ended events might show up in results for up to the cache time after their end.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "Publication filters applied on publications tagged with service.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Only include events that are allowed in provided country.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "description": "Only include events that has the provided products.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEventList"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/label/filter": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get current accounts labelFilter.",
        "description": "This can be used in special applications to e.g. get appropriate product offerings.",
        "operationId": "getAccountLabels",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLabelFilter"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/paymentmethods": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get stored payment methods",
        "operationId": "getStoredPaymentMethods",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethods"
                }
              }
            }
          },
          "403": {
            "description": "FEATURE_NOT_ENABLED_FOR_BUSINESS_UNIT the business unit is not integrated with a payment provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethods"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Add payment method",
        "operationId": "addPaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPaymentMethodResponse"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION the business unit's CRM is not supported with this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPaymentMethodResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/paymentmethods/{paymentMethodId}": {
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Update payment method",
        "operationId": "updatePaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "The id of the stored payment method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdatePaymentMethodRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethod"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION the business unit's CRM is not supported with this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethod"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete payment method",
        "operationId": "deleteStoredPaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "The id of the stored payment method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "403": {
            "description": "FEATURE_NOT_ENABLED_FOR_BUSINESS_UNIT the business unit is not integrated with a payment provider"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/paymentmethods/preferred": {
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Update the preferred payment method",
        "operationId": "updatePreferredPaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdatePrederredPaymentMethodRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonAccount"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION the business unit's CRM is not supported with this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/account/purchases": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all purchases for account including transactions",
        "operationId": "getAccountPurchases",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiStorePurchaseTransaction"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/account/transactions": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all transactions for account",
        "operationId": "getAccountTransactions",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductOfferingTransactions"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/account/transactions/productoffering": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all transactions for account paired with product offerings",
        "operationId": "getAccountTransactionsWithProductOffering",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductOfferingTransactionsProductOfferingPairList"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productoffering/country/{countryCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings available in the specified country, also includes global product offerings.",
        "operationId": "getOfferings",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "description": "The country code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSelectAssetProducts",
            "in": "query",
            "description": "Filter on product offerings that requires assetId upon purchase",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStoreProductOfferings"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productoffering/label/{labelFilterId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings available for this account's labels.",
        "description": "This endpoint is to be only used if labels are used, which will be far from normal.",
        "operationId": "getOfferingsByLabels",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labelFilterId",
            "in": "path",
            "description": "The labelFilterId received with the Label Resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStoreProductOfferings"
                }
              }
            }
          },
          "404": {
            "description": "LABEL_FILTER_NOT_FOUND The provided labelFilterId was not found",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productofferings/country/{countryCode}/voucher/{voucherCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get country product offerings available for the specific voucher code",
        "description": "The end point will not reduce the offerings if they have unique products, for example:\nProduct offering 1 - Products: Animated Movies, Country: SE\nProduct offering 2 - Products: Sci-Fi Movies, Country: Global\n\nProduct offering 1 & 2 and will be returned.",
        "operationId": "getCountryOfferingsByVoucher",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "description": "The country code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStorePromotionProductOfferings"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productofferings/voucher/{voucherCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings available for the specific voucher code. EXPERIMENTAL",
        "operationId": "getOfferingsByVoucher",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStorePromotionProductOfferings"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get currently active purchases of the user's account",
        "operationId": "getAccountPurchases2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeOfferingDetails",
            "in": "query",
            "description": "Include offering details in response",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductOfferingPurchases"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/{productOfferingId}": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Purchase a productOffering",
        "operationId": "purchaseProductOffering",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productOfferingId",
            "in": "path",
            "description": "The product offering to purchase",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "TO_MANY_DEVICES Session is over device limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/{purchaseId}/verify": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Verify a purchase of a productOffering",
        "description": "Verify a purchase of a productOffering if a \"AUTHORIZED/REJECTED\"-status is not given directly. E.g. a redirect flow, where the purchaser has to authenticate to the card issuer. Also, used to send additional data from the shopper if that's required.",
        "operationId": "verifyPayment",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchased id to verify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "TO_MANY_DEVICES Session is over device limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/assets": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all active asset purchases for account.",
        "operationId": "getAccountAssetPurchases",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAsset"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/initialize": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Returns valid payment types and price after any discount",
        "description": "EXPERIMENTAL Called to before initiating a new payment. Returns valid payment types and price after any discount. * Note: The behaviour and the result can change during the time.",
        "operationId": "initialize",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiInitialisePayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInitializePaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "TO_MANY_DEVICES Session is over device limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInitializePaymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/subscriptions/{purchaseId}": {
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Cancel a subscription purchase, no more renewals will be done.",
        "operationId": "cancelPurchaseSubscription",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchased subscription to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/system/config": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Configuration.",
        "description": "Gets the system confiuration for specified country.",
        "operationId": "getSystemConfigV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "countryCode",
            "required": true,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSystemConfig"
                }
              }
            }
          },
          "4xx": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown country code": {
                    "description": "Unknown country code",
                    "valueSetFlag": false,
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"UNKNOWN_COUNTRY_CODE\",\n  \"extendedMessage\" : null\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/activation/confirm/{code}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Confirms an activation code.",
        "description": "The code can then be consumed to yield a valid session.\n This is intended for devices like AppleTV and SmartTVs in which entering credentials is cumbersome.\n This end point requires the \"EH\" subscriber management feature.",
        "operationId": "confirmActivationCodeV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Activation code to confirm, 6 characters drawn from set 123456789ABCDEF as received from create end-point.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION",
            "content": {}
          },
          "404": {
            "description": "NOT_FOUND. The code is not found or has expired.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/details": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user details.",
        "operationId": "userDetailsGetV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION",
            "content": {}
          },
          "404": {
            "description": "NOT_SUPPORTED_FOR_FEDERATED_USER, The user details area not stored here",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user details.",
        "operationId": "userDetailsUpdateV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserDetailsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_SUPPORTED_FOR_FEDERATED_USER, The user details area not stored here",
            "content": {}
          },
          "422": {
            "description": "BAD_PASSWORD. The new password is non-compliant to policy",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/password/reset/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Request reset user's password.",
        "description": ".Will send a token out of band, which can be used to set a new password.",
        "operationId": "resetPasswordV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "Username of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/profile": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user profiles.",
        "operationId": "getProfiles",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserProfiles"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a user profile.",
        "operationId": "addProfile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserProfileCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserProfiles"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_OWNER. Only the owner may create profiles.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/profile/{userId}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user profile.",
        "operationId": "userProfileUpdate",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id of profile to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserDetailsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_SUPPORTED_FOR_FEDERATED_USER, The user details area not stored here<br>NOT_OWNER. Only the owner may update profiles.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user profile.",
        "description": "It's not allowed to delete the profile used in the current session.",
        "operationId": "deleteUserProfile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id of profile to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>DELETE_CURRENT_PROFILE_NOT_ALLOWED<br>NOT_OWNER. Only the owner may delete profiles.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/profile/{userId}/select": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Select a user profile.",
        "description": "The current session token will be replaced.",
        "operationId": "selectUserProfile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id of profile to select",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/signup/confirm/{token}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Confirms a created user.",
        "description": "Used if account was created with password.\n If the body is present with a devivceID in the deviceRegistration, the user will be logged in.",
        "operationId": "confirmUserWithTokenV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "Token received out of band, e.g by mail",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiConfirmAccountData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfirmAccountResponse"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION",
            "content": {}
          },
          "404": {
            "description": "NOT_FOUND. If the token is not found or is expired.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/userActivation/activationCode": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Creates an activation code.",
        "description": "The code is to be confirmed in a valid session. After this it can be consumed.\n This is intended for devices like AppleTV and SmartTVs in which entering credentials is cumbersome.\n This end point requires the \"EH\" subscriber management feature.",
        "operationId": "createActivationCodeV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiActivationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/userActivation/consume": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Consumes an activation code and returns a valid session.",
        "description": "The code must have been confirmed in a valid session.\n This is intended for devices like AppleTV and SmartTVs in which entering credentials is cumbersome.\n This end point requires the \"EH\" subscriber management feature.",
        "operationId": "consumeActivationCodeV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiActivationRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/entitlement/{assetId}/entitle": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "Do an entitlement check.",
        "description": "<p>\n Check if the user is/will be allowed to play using current configuration.",
        "operationId": "entitleV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset to play.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "Payment provider.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to server authentication, this\n                        has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEntitleResponseV2"
                }
              }
            }
          },
          "400": {
            "description": "INVALID_JSON. If JSON received is not valid JSON.",
            "content": {}
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "403": {
            "description": "FORBIDDEN. If this business unit has been configured to require server to server\n authentication, but it is not valid.<br>NOT_AVAILABLE. The asset is not available (playable) even if the asset itself is known.<br>BLOCKED. All play requests for the asset is currently blocked. (for instance blacked out or\n catchup blocked)<br>GEO_BLOCKED. Play is not allowed in selected region.<br>CONCURRENT_STREAMS_LIMIT_REACHED. Play is not allowed due to concurrent streams limitation.<br>NOT_PUBLISHED. The asset is not published.<br>NOT_ENTITLED. The user does not have access to play the asset.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_ASSET. If the asset is not found.",
            "content": {}
          },
          "422": {
            "description": "JSON_DOES_NOT_FOLLOW_CONTRACT. If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          },
          "500": {
            "description": "INTERNAL_TIMEOUT.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/entitlement/{assetId}/play": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "Do a play call.",
        "description": "<p>\n If the entitlement checks pass it will return the information needed to initialize the player.",
        "operationId": "playV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset to play.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to server\n                                 authentication, this\n                                 has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Adobe-Primetime-MediaToken",
            "in": "header",
            "description": "Adobe primetime short-lived media token. Used for verification against adobe\n                                 prime\n                                 time.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "persistent",
            "in": "query",
            "description": "To be used if we for one business unit can deliver both persistent and\n                                 non-persistent\n                                 licenses.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "timeShift",
            "in": "query",
            "description": "Very special, we can deliver a time shift for smooth. DO NOT USE unless you are\n                                 told so.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "live",
            "in": "query",
            "description": "Use this if you really want to play live and does not care about the epg even if\n                                 one exist.\n                                 DO NOT USE unless you are told so.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxResolution",
            "in": "query",
            "description": "Use this to filter out higher bitrates. Note that this requires backend\n                                 configuration for\n                                 your organization.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audioOnly",
            "in": "query",
            "description": "Use this with value true if you only want to include audio tracks in the\n                                 response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "maxFrameRate",
            "in": "query",
            "description": "Use this if you want to include only video tracks with a max frame rate.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Use this to provide a start time when playing a channel. Should be used when\n                                 there is no\n                                 epg available.\n                                 Format: ISO_DATE_TIME example 2021-01-31T00:00:00Z\n                                 Experimental, do not use unless told so.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "Use this to provide an end time when playing a channel. Should be used when there\n                                 is no epg\n                                 available.\n                                 Format: ISO_DATE_TIME example 2021-01-31T00:00:00Z\n                                 Experimental, do not use unless told so.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "User agent. Used for SSAI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Origin",
            "in": "header",
            "description": "Origin. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time in number of seconds in the playback manifest.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End time in number of seconds in the playback manifest.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Provide GPS based geo-location for location based ad targeting (optional) e.g.\n                                 latitude=33.543682. Used for SSAI.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Provide GPS based geo-location for location based ad targeting (optional) e.g.\n                                 longitude=-86.779633. Used for SSAI.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "mute",
            "in": "query",
            "description": "Indicate whether player is muted or not. Used for SSAI.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "consent",
            "in": "query",
            "description": "A consent string passed from various Consent Management Platforms (CMP’s). Used\n                                 for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceMake",
            "in": "query",
            "description": "Manufacturer of device such as Apple or Samsung. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ifa",
            "in": "query",
            "description": "User device ID. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gdprOptin",
            "in": "query",
            "description": "A flag for European Union traffic consenting to advertising. Used for SSAI.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "User id. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Screen Resolution (width). Used for SSAI.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Screen Resolution (height). Used for SSAI.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "appBundle",
            "in": "query",
            "description": "App bundle. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appName",
            "in": "query",
            "description": "App name. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appStoreUrl",
            "in": "query",
            "description": "App store URL. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageUrl",
            "in": "query",
            "description": "Page Url. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Channel Partner. Domain where player is embedded. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autoplay",
            "in": "query",
            "description": "Auto play. Used for SSAI.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "description": "Device type. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceModel",
            "in": "query",
            "description": "Device model. Used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccpaConsent",
            "in": "query",
            "description": "A flag for US consent for advertising. Used for SSAI.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "supportedFormats",
            "in": "query",
            "description": "A comma-separated priority list for supported formats for playback, first value\n                                 has highest priority. Supported values are hls, dash, mss, mp3, aac. First value\n                                 will\n                                 always be used for SSAI.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supportedDrms",
            "in": "query",
            "description": "A comma-separated list for supported DRM providers for playback.\n                                 Supported values are widevine, fairplay, playready.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limitAdTracking",
            "in": "query",
            "description": "True if the user opted-out of ad tracking. Used for SSAI.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "materialProfile",
            "in": "query",
            "description": "Provide material profile if you want to play a version used for a specific purpose. You need to know what profile to use.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdSID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdZID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom",
            "in": "query",
            "description": "A comma-seperated list for sending additional custom non-SDK supported SSAI paramaters. Used for SSAI.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPlayResponseV2"
                }
              }
            }
          },
          "400": {
            "description": "INVALID_JSON. If JSON received is not valid JSON.<br>INVALID_START_TIME. Invalid startTime.<br>INVALID_END_TIME. Invalid endTime.<br>END_TIME_WITHOUT_START_TIME_IS_NOT_ALLOWED. Only endTime without startTime is not allowed.<br>START_TIME_MUST_BE_BEFORE_END_TIME. StartTime must be before endTime.<br>START_TIME_OLD. StartTime is not accepted. It is too old.<br>START_TIME_OLD_WHEN_NO_END_TIME. StartTime is not accepted. It is too old when no endTime is\n provided.<br>START_TIME_IN_THE_FUTURE. StartTime cannot be in the future.<br>START_END_TIME_DURATION_TO_LONG. The duration between startTime and endTime is to\n long.",
            "content": {}
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.<br>INVALID_ADOBE_AUTH. The provided adobe play token is not valid.",
            "content": {}
          },
          "403": {
            "description": "FORBIDDEN. If this business unit has been configured to require server to server\n authentication, but it is not valid.<br>NOT_AVAILABLE. The asset is not available (playable) even if the asset itself is known.<br>BLOCKED. All play requests for the asset is currently blocked. (for instance blacked out or\n catchup blocked)<br>GEO_BLOCKED. Play is not allowed in selected region.<br>CONCURRENT_STREAMS_LIMIT_REACHED. Play is not allowed due to concurrent streams limitation.<br>NOT_PUBLISHED. The asset is not published.<br>NOT_ENTITLED. The user does not have access to play the asset.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_ASSET. If the asset is not found.",
            "content": {}
          },
          "422": {
            "description": "JSON_DOES_NOT_FOLLOW_CONTRACT. If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          },
          "500": {
            "description": "INTERNAL_TIMEOUT.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/entitlement/accountproduct": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "EXPERIMENTAL.",
        "description": "Should at the moment only be used in white label apps on the web.\n <p>\n Needs to be formalized and approved before used by any other client than MOTT white label app for the web.\n Returns two lists. All available products for the organization unit will be in any of them.\n The account can be null. This means that only products allowed for anonymous will be returned in entitled list.\n <p>\n - entitled. Contains all the products the account has access to.\n - notEntitled. Contains all the products the account has not access to.",
        "operationId": "accountProducts",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The authorization header in the format \"Bearer sessionToken\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to server authentication, this\n                      has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/entitlement/availabilitykey": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "Returns all the availability keys for a given account",
        "operationId": "availabilityKeys",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The authorization header in the format \"Bearer sessionToken\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "If this business unit has been configured to require server to server authentication, this\n                      has to be the api key.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Forwarded-For",
            "in": "header",
            "description": "Provides the end user IP if there is a proxy in between.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityKeys"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for a specific channel.",
        "description": "<p>\n Programs sorted ascending on startTime by default.\n <p>",
        "operationId": "getEpgForChannelV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel to get EPG for. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "ref"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "description": "The sort order.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelEPGResponse"
                }
              }
            }
          },
          "422": {
            "description": "DATE_REQUESTED_OUTSIDE_VALID_WINDOW. If the date requested is outside the valid EPG window.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/program/{programId}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets a specific program for a channel by id.",
        "operationId": "getProgramV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "in": "path",
            "description": "The id of the program.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_PROGRAM. If the program cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/program/{programId}/next": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets next program for a specific program for a channel.",
        "operationId": "getNextProgramv2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "in": "path",
            "description": "The id of the program.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "PROGRAM_NOT_FOUND. If the program cannot be found.<br>NEXT_PROGRAM_NOT_FOUND. If the next program cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/xmltv": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for a specific channel in XML TV format.",
        "description": "<p>",
        "operationId": "getXmlTvEpgForChannel",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel to get EPG for. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelEPGResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelIds}/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for a specific set of channels.",
        "description": "<p>\n Programs sorted ascending on startTime by default.",
        "operationId": "getEpgForChannelsV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "path",
            "description": "The comma separated list of the ids the channels to get EPG for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "ref"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "description": "The sort order.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiChannelEPGResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "DATE_REQUESTED_OUTSIDE_VALID_WINDOW. If the date requested is outside the valid EPG window.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/asset/{assetId}/next": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets next program for a specific asset.",
        "description": "If the asset has been showed multiple times there is a unspecified logic to select one program.",
        "operationId": "getNextProgramForAsset2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "PROGRAM_NOT_FOUND. If the program cannot be found.<br>NEXT_PROGRAM_NOT_FOUND. If the next program cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for all channels.",
        "description": "<p>\n This endpoint finds all published programs and partitions them in channel buckets. Only channels has programs\n in the page that has been requested will have a bucket.\n <p>\n Programs sorted ascending on startTime by default.",
        "operationId": "getEpgV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "ref"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number. Note that pageNumber * pageSize cannot exceed 10000 or an error will occur.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "description": "The sort order. Note that pageNumber * pageSize cannot exceed 10000 or an error will occur.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiChannelEPGResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Result window is too large. If the pageSize * pageNumber is greater than 10000.",
            "content": {}
          },
          "422": {
            "description": "DATE_REQUESTED_OUTSIDE_VALID_WINDOW. If the date requested is outside the valid EPG window.",
            "content": {}
          }
        }
      }
    },
    "/v2/location": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Get location.",
        "description": "Get location information based on caller IP-address.",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "Referer",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "exampleSetFlag": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v2/time": {
      "get": {
        "tags": [
          "time"
        ],
        "summary": "Get time.",
        "description": "Gets the current server UTC time.",
        "operationId": "time",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/config/{configId}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get the top level config object.",
        "operationId": "getWLConfig",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "The id of the config.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Comma separated list of filters. I.e: \"type:value,type2:value2\"",
            "schema": {
              "type": "ref"
            }
          },
          {
            "name": "Origin",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "INVALID_FILTERS. If the filters are invalid.",
            "content": {}
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/config/{configId}/component/{componentId}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get config component",
        "operationId": "getWLComponentV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "The config id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "The component id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Add allowed country parameter to any server side asset searches that are made.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Comma separated list of filters. I.e: \"type:value,type2:value2\"",
            "schema": {
              "type": "ref"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "INVALID_FILTERS. If the filters are invalid.",
            "content": {}
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/file/{folder}/{fileName}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "operationId": "getFile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/filters": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get user location and the filters to use in calls to the client configuration endpoints.",
        "operationId": "getComponentFilters",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiComponentFilters"
                }
              }
            }
          }
        }
      }
    },
    "/v2/whitelabel/origin/{host}/config/{configId}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get the top level config object.",
        "operationId": "getWLConfigV2WithDomain",
        "parameters": [
          {
            "name": "host",
            "in": "path",
            "description": "The host that will be mapped to a business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "description": "The id of the config.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Comma separated list of filters. I.e: \"type:value,type2:value2\"",
            "schema": {
              "type": "ref"
            }
          },
          {
            "name": "Origin",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "INVALID_FILTERS. If the filters are invalid.",
            "content": {}
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login.",
        "description": "<p>",
        "operationId": "loginV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The json request to login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAuthRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "DEVICE_LIMIT_EXCEEDED. If the account has exceeded the number of allowed devices.<br>SESSION_LIMIT_EXCEEDED. If the account has exceeded the number of allowed sessions.<br>UNKNOWN_DEVICE_ID. If the device body is not included and the device id is not found.<br>INVALID_JSON. If JSON received is not valid JSON.<br>THIRD_PARTY_ERROR. If third party login generate error message, for detail error code see\n field extendedMessage.",
            "content": {}
          },
          "401": {
            "description": "INCORRECT_CREDENTIALS. If the underlying CRM does not deem the credentials valid.<br>MIGRATED_USER. The user is migrated from another platform and has yet no password. The \"new user email\" has been resent.",
            "content": {}
          },
          "403": {
            "description": "INFORMATION_COLLECTION_CONSENT_MISSING. The user is required to give consent to collect<br>NOT_CONFIGURED. The OU is not configured to use the v2 API e.g EE2",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit cannot be found.",
            "content": {}
          },
          "422": {
            "description": "If the JSON does not follow the contract. I.E. unknown ENUM\n sent, strings in place of integers, missing values etc.",
            "content": {}
          },
          "429": {
            "description": "TEMPORARILY_LOCKED. Login is blocked for the account or IP-address for a while due to too\n many failed login attempts",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "authRequest"
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/asset/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Prefix search on asset titles.",
        "description": "EXPERIMENTAL. May change without notice.",
        "operationId": "searchAssetV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "The locales to search in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The comma separates list of types to search in.",
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sort parameter in the format of first,-second. Defaults to sorting by\n                              relevance.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/asset/title/autocomplete/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Does prefix autocomplete on asset titles.",
        "description": "EXPERIMENTAL. May change without notice.",
        "operationId": "autocompleteAssetTitleV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to autocomplete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "The locale to autocomplete in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The comma separates list of asset types to filter on.",
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "Filter on parental rating (format of COUNTRY:RATING,COUNTRY:RATING2)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/participant/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "operationId": "searchParticipantsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Prefix search on asset and tags.",
        "description": "EXPERIMENTAL. May change without notice.",
        "operationId": "searchV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locales to search in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The comma separates list of asset types to filter on.",
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "schemes",
            "in": "query",
            "description": "The schemes of tags to search. If no schemes, tags will not be searched.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "Filter on parental rating (format of COUNTRY:RATING,COUNTRY:RATING2)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Filter on allowed in country.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagResultSort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMultiSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/tag/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Prefix search on tag titles.",
        "description": "EXPERMIENTAL. May change without notice.",
        "operationId": "searchTagsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "The locales to search in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "description": "The schemes to autocomplete in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/tag/title/autocomplete/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Does prefix autocomplete on tag titles.",
        "description": "EXPERIMENTAL. May change without notice.",
        "operationId": "autocompleteTagTitleV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to autocomplete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "The locales to autocomplete in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "description": "The schemes to autocomplete in.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/appstore/purchase/{purchaseId}/verify": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Verify a App Store purchase",
        "description": "Verifies that the purchase was successful and makes entilement if so.",
        "operationId": "verifyAppStorePurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchase id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAppStorePurchaseVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseVerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseVerifyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/appstore/purchase/init/{productOfferingId}": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Initialize a App Store purchase",
        "description": "Set up a purchase of specified Product Offering, using App Store. If the Product Offerings field productRequiresSelectAsset is true then a assetId must be provided.",
        "operationId": "initializeAppStorePurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productOfferingId",
            "in": "path",
            "description": "Id of product offering to purchase",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAppStorePurchaseInitializeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseInitializeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseInitializeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/googleplay/purchase/{purchaseId}/verify": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Verify a Google Play purchase",
        "description": "Verifies that the purchase was successful and makes entilement if so.",
        "operationId": "verifyGooglePlayPurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchase id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGooglePlayPurchaseVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseVerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseVerifyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/googleplay/purchase/init/{productOfferingId}": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Initialize a Google Play purchase",
        "description": "Set up a purchase of specified Product Offering, using Google Play. If the Product Offerings field productRequiresSelectAsset is true then a assetId must be provided.",
        "operationId": "initializeGooglePlayPurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productOfferingId",
            "in": "path",
            "description": "Id of product offering to purchase",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGooglePlayPurchaseInitializeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseInitializeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseInitializeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/productoffering/country/{countryCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings.",
        "description": "Get available product offerings for location and payment service",
        "operationId": "getOfferingsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "description": "Current location ISO 3166 alpha-2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSelectAssetProducts",
            "in": "query",
            "description": "Include product offerings that requires AssetId at purchase",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "Supported payment service provider",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Payment provider",
              "enum": [
                "stripe",
                "appstore",
                "googleplay",
                "external"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiStoreProductOffering"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/attributes": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update provided user attributes.",
        "description": "Attributes NOT in the provided list will be untouched.",
        "operationId": "putUserAttributes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiUserAttributeRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "EMAIL_ADDRESS_NOT_APPROVED. An email address is not approved.<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          },
          "422": {
            "description": "BAD_EMAIL_ADDRESS. An email address is malformed.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "attributeRequestList",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/changeEmail": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change email address that is not used as username.",
        "operationId": "changeEmailV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangeEmailRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "EMAIL_ADDRESS_USED_AS_USERNAME. The user uses email as username, consider using the changeEmailAndUsername endpoint.",
            "content": {}
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.<br>BAD_PASSWORD. Entered password is not correct.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_SUPPORTED_FOR_FEDERATED_USER<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>EMAIL_ADDRESS_NOT_APPROVED. The email address is not approved.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          },
          "422": {
            "description": "BAD_EMAIL_ADDRESS. The new email address is malformed.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/changeEmailAndUsername": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change email address and username.",
        "operationId": "changeEmailAndUsernameV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangeEmailAndUserNameV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.<br>BAD_PASSWORD. Entered password is not correct.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_SUPPORTED_FOR_FEDERATED_USER<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>EMAIL_ADDRESS_NOT_APPROVED. The email address is not approved.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          },
          "422": {
            "description": "BAD_EMAIL_ADDRESS. The new email address is malformed.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/changePassword": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change password.",
        "operationId": "changePasswordV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangePwdV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChangePasswordResponse"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_SUPPORTED_FOR_FEDERATED_USER<br>OLD_PASSWORD_IS_NOT_CORRECT, the old password is not correct.<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          },
          "422": {
            "description": "BAD_PASSWORD. The new password is non-compliant to policy",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/delete": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Delete personal data.",
        "operationId": "deleteUserDetailsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCredentialsV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.<br>BAD_PASSWORD. The provided password is faulty.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>STORED_PAYMENT_DETAILS, the account cannot be deleted as there are stored payment details for the account.<br>OWNER_OF_ACCOUNT_WITH_NON_OWNER_USER, this user can not be deleted as there are other non-owners in the account.<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.<br>NOT_SUPPORTED_FOR_FEDERATED_USER",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "credentials",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get pin codes.",
        "operationId": "getPinCodes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPinCodeResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a pin code.",
        "description": "The id will be generated. If yoy want to specify the id, then instead create the code using the Update end point.",
        "operationId": "createPinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPinCodeResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode/pin/{pincodeId}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update (or Create) a pin code.",
        "operationId": "setPinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pincodeId",
            "in": "path",
            "description": "the id of the pin to update or if non-exiting to be created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPinCodeResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a pin code.",
        "operationId": "deletePinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pincodeId",
            "in": "path",
            "description": "the id of the pin to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode/pin/{pincodeId}/validate": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Validate a pin code.",
        "description": "Returns a list of application specified grants if successfully validated, else an empty list [].",
        "operationId": "validatePinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pincodeId",
            "in": "path",
            "description": "the id of the pin to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode/validate": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Validate all pin codes.",
        "description": "The provided code is matched with all defined pin codes.\n Returns a list of application specified grants of all successfully validated pin codes, if no one matches an empty list [] is returned.",
        "operationId": "validatePinCodes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session is not found.<br>INVALID_SESSION_TOKEN. If the session is expired.",
            "content": {}
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>NOT_ALLOWED_IN_ANONYMOUS_SESSION.<br>NOT_ALLOWED_IN_SESSION_USER_SESSION.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Signup to the service.",
        "description": "If unConfirmed == true, then the user will receive an email with a confirmation link.\n\n Else if unConfirmed == false the user is logged in and session details are in the response.",
        "operationId": "createNewAccountV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "email etc.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserSignupRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserSelfServiceCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION<br>EMAIL_ADDRESS_NOT_APPROVED. The email address is not approved.",
            "content": {}
          },
          "422": {
            "description": "EMAIL_OR_MOBILE_REQUIRED. EmailAddress must be supplied.<br>BAD_EMAIL_ADDRESS. The email address is malformed.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/signup/password/{token}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Set password.",
        "description": "Sets the users password using a token received at signup (without password) or password reset",
        "operationId": "setPasswordWithTokenV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "Token received out of band, e.g by mail",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Including the password to set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSetPwdWithTokenV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "NOT_FOUND. If the token is not found or is expired.",
            "content": {}
          },
          "422": {
            "description": "BAD_PASSWORD. The password does not comply to the password policy.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    }
  },
  "components": {
    "schemas": {
      "AdClips": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "titleId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "duration": {
            "type": "number",
            "format": "double"
          },
          "impressionUrlTemplates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trackingEvents": {
            "$ref": "#/components/schemas/AdTrackingEvents"
          },
          "videoClicks": {
            "$ref": "#/components/schemas/AdVideoClicks"
          }
        }
      },
      "AdMarker": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "type": "string"
          }
        }
      },
      "Ads": {
        "type": "object",
        "properties": {
          "stitcher": {
            "type": "string"
          },
          "stitcherSession": {
            "type": "string"
          },
          "stitcherProfileId": {
            "type": "string"
          },
          "insertionDuration": {
            "type": "integer",
            "format": "int32"
          },
          "insertionMaxCount": {
            "type": "integer",
            "format": "int32"
          },
          "adMarkers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdMarker"
            }
          },
          "clips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdClips"
            }
          }
        }
      },
      "AdTrackingEvents": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "firstQuartile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "midpoint": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thirdQuartile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdVideoClicks": {
        "type": "object",
        "properties": {
          "clickThroughUrl": {
            "type": "string"
          },
          "clickTrackingUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Algorithm": {
        "type": "object",
        "properties": {
          "algorithmName": {
            "type": "string",
            "enum": [
              "CLEAR",
              "PBKDF2",
              "NO_PASSWORD"
            ]
          },
          "pbkdf2Iterations": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Analytics": {
        "type": "object",
        "properties": {
          "postInterval": {
            "type": "integer",
            "format": "int32"
          },
          "bucket": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnalyticsBatch": {
        "required": [
          "DispatchTime"
        ],
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "string"
          },
          "BusinessUnit": {
            "type": "string"
          },
          "ClientIp": {
            "type": "string"
          },
          "ClockOffset": {
            "type": "integer",
            "format": "int32"
          },
          "Customer": {
            "type": "string"
          },
          "DispatchTime": {
            "type": "integer",
            "format": "int64"
          },
          "Payload": {
            "type": "string"
          },
          "SessionId": {
            "type": "string"
          },
          "UserId": {
            "type": "string"
          }
        }
      },
      "API Error message": {
        "type": "object",
        "properties": {
          "httpCode": {
            "type": "integer",
            "description": "HTTP Code",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "extendedMessage": {
            "type": "string",
            "description": "Extended error message"
          }
        }
      },
      "ApiAccessConfig": {
        "required": [
          "accessModel",
          "consentManagement",
          "loginMethods",
          "passwordPolicy",
          "signupMinimumAge",
          "signupModel"
        ],
        "type": "object",
        "properties": {
          "accessModel": {
            "type": "string",
            "description": "How users gain access",
            "enum": [
              "open",
              "login",
              "pay"
            ]
          },
          "signupMinimumAge": {
            "type": "integer",
            "description": "Minimum age in years of user signing up to the service",
            "format": "int32"
          },
          "passwordPolicy": {
            "$ref": "#/components/schemas/ApiPasswordPolicy"
          },
          "loginMethods": {
            "type": "object",
            "description": "Login methods"
          },
          "signupModel": {
            "type": "string",
            "description": "How to become a user",
            "enum": [
              "provisioned",
              "unconfirmed",
              "confirmed"
            ]
          },
          "consentManagement": {
            "$ref": "#/components/schemas/ApiConsentManagement"
          }
        },
        "description": "User access configuration"
      },
      "ApiActivationCodeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "6 characters drawn from set 123456789ABCDEF"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiActivationRequestV2": {
        "required": [
          "activationCode",
          "device"
        ],
        "type": "object",
        "properties": {
          "activationCode": {
            "type": "string",
            "description": "6 characters drawn from set 123456789ABCDEF as received from create end-point."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiActiveChannels": {
        "type": "object",
        "properties": {
          "apiChannelStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelStatus"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiAddPaymentMethodResponse": {
        "type": "object",
        "properties": {
          "stripe": {
            "$ref": "#/components/schemas/StripeSetupIntentResponse"
          }
        }
      },
      "ApiAnalyticsConfig": {
        "required": [
          "analyticsPercentage"
        ],
        "type": "object",
        "properties": {
          "analyticsBaseUrl": {
            "type": "string",
            "description": "If stated this is the base URL for analytics events, if not stated the base URL for Exposure API is to be used"
          },
          "analyticsPercentage": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Probability in percentage that the player shall send analytics events",
            "format": "int32"
          }
        },
        "description": "Analytics reporting configuration"
      },
      "ApiAnonymousSessionRequest": {
        "required": [
          "device",
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          }
        }
      },
      "ApiAnonymousSessionResponse": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token to use for subsequent requests."
          },
          "expirationDateTime": {
            "type": "string",
            "description": "The time when the session expires",
            "format": "date-time"
          }
        }
      },
      "ApiApiKeyUserSessionRequest": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The users login name"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "description": "When should the session created by this authentication request expire\n and force the user to log in again."
          },
          "sessionUser": {
            "type": "boolean",
            "description": "Should the session be unique or connected to a userId.\n If true the session will only be connected to an account but not to a user"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "TRUE: Consent to collect personal information is given.\n FALSE or null: consent is not given now. This may be fine if consent already is given."
          }
        }
      },
      "ApiAppStoreConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Apple App Store enabled"
          }
        },
        "description": "Apple app store configuration"
      },
      "ApiAppStorePurchaseInitializeRequest": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Single asset id that the purchase will entitle. Requires that the product offering requires \"direct asset purchases\"."
          }
        }
      },
      "ApiAppStorePurchaseInitializeResponse": {
        "type": "object",
        "properties": {
          "appAccountToken": {
            "type": "string",
            "description": "To used as appAccountToken",
            "format": "uuid"
          },
          "purchaseId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "ApiAppStorePurchaseVerifyRequest": {
        "required": [
          "transaction"
        ],
        "type": "object",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "As received in the App Store Purchase."
          }
        }
      },
      "ApiAppStorePurchaseVerifyResponse": {
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected",
              "cancelled"
            ]
          }
        }
      },
      "ApiAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiExternalReference"
            }
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLinkedEntity"
            }
          },
          "live": {
            "type": "boolean"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedData"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiMedia"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiParentalRating"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPerson"
            }
          },
          "popularityScores": {
            "$ref": "#/components/schemas/Map"
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPublication"
            }
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "studio": {
            "type": "string"
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "runtime": {
            "type": "integer",
            "description": "The duration of the asset in seconds.",
            "format": "int64"
          },
          "season": {
            "type": "string"
          },
          "seasonId": {
            "type": "string"
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSeason"
            }
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTag"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "tvShow": {
            "$ref": "#/components/schemas/ApiTvShowInfo"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "AD",
              "LIVE_EVENT",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "userData": {
            "$ref": "#/components/schemas/ApiUserAssetData"
          },
          "trackSizes": {
            "$ref": "#/components/schemas/ApiTrackSizes"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "channelFeatures": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIRTUAL",
                "VC_CURATED",
                "VC_PERSONALIZED",
                "VC_SCHEDULED",
                "EPG"
              ]
            }
          },
          "overlayWidgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiOverlayWidget"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "markerPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiMarkerPoint"
            }
          },
          "cuePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiMarkerPoint"
            }
          },
          "event": {
            "$ref": "#/components/schemas/Event"
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProgram"
            }
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCollectionReference"
            }
          },
          "assetFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSystemTag"
            }
          }
        }
      },
      "ApiAssetList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiAssetListBulk": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "lastCreatedEpochMillis": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiAssetListItemRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Map"
          },
          "order": {
            "type": "integer",
            "description": "The order to sort by.",
            "format": "int32"
          }
        }
      },
      "ApiAssetListItemResponse": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "assetId": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "$ref": "#/components/schemas/Map"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiAssetRights": {
        "type": "object",
        "properties": {
          "HDMIBlocked": {
            "type": "boolean"
          },
          "activation": {
            "type": "string",
            "format": "date-time"
          },
          "airplayBlocked": {
            "type": "boolean"
          },
          "amcDebugLogEnabled": {
            "type": "boolean"
          },
          "analyticsEnabled": {
            "type": "boolean"
          },
          "downloadBlocked": {
            "type": "boolean"
          },
          "downloadMaxSecondsAfterDownload": {
            "type": "integer",
            "format": "int32"
          },
          "downloadMaxSecondsAfterPlay": {
            "type": "integer",
            "format": "int32"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "ffEnabled": {
            "type": "boolean"
          },
          "fourGBlocked": {
            "type": "boolean"
          },
          "jailbrokenBlocked": {
            "type": "boolean"
          },
          "locationEnabled": {
            "type": "boolean"
          },
          "maxAds": {
            "type": "integer",
            "format": "int32"
          },
          "maxBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "maxFileSize": {
            "type": "integer",
            "format": "int64"
          },
          "maxPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "format": "int32"
          },
          "maxResWidth": {
            "type": "integer",
            "format": "int32"
          },
          "minBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "minPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "playCount": {
            "type": "integer",
            "format": "int32"
          },
          "rwEnabled": {
            "type": "boolean"
          },
          "sessionShiftEnabled": {
            "type": "boolean"
          },
          "streamingBlocked": {
            "type": "boolean"
          },
          "threeGBlocked": {
            "type": "boolean"
          },
          "wifiBlocked": {
            "type": "boolean"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiAudioTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "trackInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTrackInfo"
            }
          }
        }
      },
      "ApiAuthenticationRequest": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The users login name, e.g. email"
          },
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "description": "When should the session created by this authentication request expire\n and force the user to log in again."
          },
          "sessionUser": {
            "type": "boolean",
            "description": "Should the session be unique or connected to a userId.\n If true the session will only be connected to an account but not to a user"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "TRUE: Consent to collect personal information is given.\n FALSE or null: consent is not given now. This may be fine if consent already is given."
          }
        }
      },
      "ApiAuthRequestV3": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The users login name, e.g. email"
          },
          "password": {
            "type": "string",
            "description": "Password."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "TRUE: Consent to collect personal information is given.\n FALSE or null: consent is not given now. This may be fine if consent already is given."
          }
        }
      },
      "ApiAutocompleteItem": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "ApiAutocompleteItem2": {
        "type": "object",
        "properties": {
          "hitText": {
            "type": "string"
          },
          "hitFieldValue": {
            "type": "string"
          }
        }
      },
      "ApiBookkeeperAccount": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiBookkeeperAsset"
            }
          }
        }
      },
      "ApiBookkeeperAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiBookkeeperDownload"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiBookkeeperDownload": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "clientIp": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceModelId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "ApiCardSummary": {
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "Type of card, e.g visa"
          },
          "expiryMonth": {
            "type": "string",
            "description": "Expiry month e.g. \"10\""
          },
          "expiryYear": {
            "type": "string",
            "description": "Expiry month e.g. \"2022\""
          },
          "last4": {
            "type": "string",
            "description": "Last of digits of card number"
          },
          "origin": {
            "type": "string",
            "description": "Origin of the card E.g. Google Pay, Apple Pay. If empty, consider the origin to be the payment provider"
          }
        },
        "description": "Summary of card details"
      },
      "ApiCarousel": {
        "type": "object",
        "properties": {
          "carouselId": {
            "type": "string"
          },
          "items": {
            "$ref": "#/components/schemas/ApiAssetList"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "titles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedTitle"
            }
          }
        }
      },
      "ApiCencConfigurationResponse": {
        "type": "object",
        "properties": {
          "com.microsoft.playready": {
            "type": "string"
          },
          "com.widevine.alpha": {
            "type": "string"
          }
        }
      },
      "ApiChangeEmailAndUserNameV3": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Current Password."
          },
          "newEmailAddressAndUsername": {
            "type": "string",
            "description": "The new email address and user name"
          }
        }
      },
      "ApiChangeEmailRequest": {
        "required": [
          "credentials"
        ],
        "type": "object",
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "newEmailAddress": {
            "type": "string",
            "description": "The new email address"
          }
        }
      },
      "ApiChangeEmailRequestV3": {
        "type": "object",
        "properties": {
          "newEmailAddress": {
            "type": "string",
            "description": "The new email address"
          }
        }
      },
      "ApiChangePasswordRequest": {
        "required": [
          "device",
          "newCredentials",
          "oldCredentials"
        ],
        "type": "object",
        "properties": {
          "newCredentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "oldCredentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "logoutOnAllDevices": {
            "type": "boolean",
            "description": "true: All existing sessions will be cleared\n false : other devices' sessions are still valid"
          }
        }
      },
      "ApiChangePasswordResponse": {
        "type": "object",
        "properties": {
          "loginResponse": {
            "$ref": "#/components/schemas/ApiLoginResponse"
          }
        }
      },
      "ApiChangePwdV3": {
        "required": [
          "device",
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "New Password."
          },
          "oldPassword": {
            "type": "string",
            "description": "Old Password."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "logoutOnAllDevices": {
            "type": "boolean",
            "description": "true: All existing sessions will be cleared\n false : other devices' sessions are still valid"
          }
        }
      },
      "ApiChannelAsset": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          }
        }
      },
      "ApiChannelEPGResponse": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProgramResponse"
            }
          },
          "totalHitsAllChannels": {
            "type": "integer",
            "description": "This is the total number of hits for all channels, not only this.",
            "format": "int64"
          }
        }
      },
      "ApiChannelStatus": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "active": {
            "type": "boolean"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelAsset"
            }
          }
        }
      },
      "ApiCollectionReference": {
        "type": "object",
        "properties": {
          "collectionId": {
            "type": "string"
          }
        }
      },
      "ApiComponentFilters": {
        "type": "object",
        "properties": {
          "locationKnown": {
            "type": "boolean"
          },
          "countryCode": {
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "ApiConfigFile": {
        "type": "object",
        "properties": {
          "businessUnit": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "customer": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "systemConfig": {
            "$ref": "#/components/schemas/ApiSystemConfig"
          }
        }
      },
      "ApiConfigFilesResponse": {
        "type": "object",
        "properties": {
          "businessUnit": {
            "type": "string"
          },
          "customer": {
            "type": "string"
          },
          "fileNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiConfirmAccountData": {
        "type": "object",
        "properties": {
          "deviceRegistration": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiConfirmAccountResponse": {
        "type": "object",
        "properties": {
          "loginResponse": {
            "$ref": "#/components/schemas/ApiLoginResponse"
          }
        }
      },
      "ApiConsentManagement": {
        "required": [
          "didomi"
        ],
        "type": "object",
        "properties": {
          "didomi": {
            "$ref": "#/components/schemas/Didomi"
          }
        },
        "description": "Consent management"
      },
      "ApiConsentManagement-Didomi": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "noticeId": {
            "type": "string"
          },
          "tvNoticeId": {
            "type": "string"
          },
          "appNoticeId": {
            "type": "string"
          }
        }
      },
      "ApiContinueUph2Assets": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiContinueWatchingAsset"
            }
          }
        }
      },
      "ApiContinueWatchingAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "LIVE_EVENT",
              "AD",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "season": {
            "type": "string"
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "trackSizes": {
            "$ref": "#/components/schemas/TrackSizes"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "live": {
            "type": "boolean"
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeasonResponse"
            }
          },
          "geoCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "runtime": {
            "type": "integer",
            "format": "int32"
          },
          "popularityScores": {
            "$ref": "#/components/schemas/Map"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "seasonId": {
            "type": "string"
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPublication"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCollectionReference"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userData": {
            "$ref": "#/components/schemas/ApiUserAssetData"
          }
        }
      },
      "ApiCreateSessionRequest": {
        "required": [
          "accountId",
          "deviceId",
          "expiration",
          "userId"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "anonymous": {
            "type": "boolean",
            "description": "If this is an anonymous user."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "expiration": {
            "type": "string",
            "description": "The time that the session should expire.",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "ApiCreateSessionResponse": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session token to use for subsequent requests."
          },
          "expirationDateTime": {
            "type": "string",
            "description": "The time when the session expires",
            "format": "date-time"
          }
        }
      },
      "ApiCredentials": {
        "required": [
          "passwordTuples"
        ],
        "type": "object",
        "properties": {
          "passwordTuples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordTuple"
            }
          }
        }
      },
      "ApiCredentialsV3": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "ApiDeleteUsersSessionsRequest": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The users login name"
          }
        }
      },
      "ApiDevice": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "model": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "WEB",
              "MOBILE",
              "TABLET",
              "APPLE_TV",
              "SMART_TV",
              "CONSOLE",
              "STB"
            ]
          }
        }
      },
      "ApiDeviceRegistration": {
        "required": [
          "deviceId",
          "name"
        ],
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "name": {
            "type": "string",
            "description": "The user's name of the device."
          },
          "type": {
            "type": "string",
            "enum": [
              "WEB",
              "MOBILE",
              "TABLET",
              "APPLE_TV",
              "SMART_TV",
              "CONSOLE",
              "STB"
            ]
          }
        }
      },
      "ApiDeviceResponseV2": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          },
          "deviceName": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceCreated": {
            "type": "string",
            "format": "date-time"
          },
          "sessionCreated": {
            "type": "string",
            "format": "date-time"
          },
          "sessionExpires": {
            "type": "string",
            "format": "date-time"
          },
          "currentDevice": {
            "type": "boolean"
          },
          "aboveDeviceLimit": {
            "type": "boolean"
          }
        }
      },
      "ApiDeviceRights": {
        "type": "object",
        "properties": {
          "manufacturer": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "rights": {
            "$ref": "#/components/schemas/ApiAssetRights"
          },
          "type": {
            "type": "string",
            "enum": [
              "WEB",
              "MOBILE",
              "TABLET",
              "APPLE_TV",
              "SMART_TV",
              "CONSOLE",
              "STB"
            ]
          }
        }
      },
      "ApiDevicesResponseV2": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "description": "The list of current devices for the account.",
            "items": {
              "$ref": "#/components/schemas/ApiDeviceResponseV2"
            }
          }
        }
      },
      "ApiDownloadInfoResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          },
          "durationInMs": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "audios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoTrack"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiDownloadResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "formats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFormatDownload"
            }
          },
          "playSessionId": {
            "type": "string"
          },
          "playToken": {
            "type": "string"
          },
          "playTokenExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "playTokenExpirationReason": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          },
          "durationInMs": {
            "type": "integer",
            "format": "int64"
          },
          "materialId": {
            "type": "string"
          },
          "materialVersion": {
            "type": "integer",
            "format": "int32"
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "cdn": {
            "$ref": "#/components/schemas/CDN"
          },
          "analytics": {
            "$ref": "#/components/schemas/Analytics"
          }
        }
      },
      "ApiEDRMConfigurationResponse": {
        "type": "object",
        "properties": {
          "adParameter": {
            "type": "string",
            "description": "The ad parameter to use."
          },
          "ownerId": {
            "type": "string",
            "description": "The id of the owner of the media."
          },
          "requestUrl": {
            "type": "string",
            "description": "The url of the server to use."
          },
          "userToken": {
            "type": "string",
            "description": "The user token."
          }
        }
      },
      "ApiEntitlementResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The ID of the asset for TVOD."
          },
          "externalAssetId": {
            "type": "string",
            "description": "The external ID of the asset for TVOD."
          },
          "orderId": {
            "type": "string",
            "description": "The id of the order this entitlement is part of."
          },
          "packageId": {
            "type": "string",
            "description": "The id of the package."
          },
          "paymentDone": {
            "type": "boolean",
            "description": "The flag to show if payment is done."
          },
          "productId": {
            "type": "string",
            "description": "The id of the product."
          },
          "type": {
            "type": "string",
            "description": "The type of the entitlement.",
            "enum": [
              "FVOD",
              "SVOD",
              "TVOD",
              "AVOD",
              "INTERNAL"
            ]
          },
          "validFrom": {
            "type": "string",
            "description": "The start date of the validity of the entitlement.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "The end date of the validity of the entitlement.",
            "format": "date-time"
          }
        }
      },
      "ApiEntitleResponseV2": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The account id"
          },
          "requestId": {
            "type": "string",
            "description": "The request id, used for internal debugging."
          },
          "formats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFormat"
            }
          },
          "productId": {
            "type": "string",
            "description": "Identity of the product that permitted playback of the asset"
          },
          "publicationId": {
            "type": "string",
            "description": "Identity of the publication that permitted playback of the asset."
          },
          "publicationStart": {
            "type": "string",
            "description": "The publication start time",
            "format": "date-time"
          },
          "publicationEnd": {
            "type": "string",
            "description": "The publication end time",
            "format": "date-time"
          },
          "entitlementId": {
            "type": "string",
            "description": "Identity of the entitlement that permitted playback of the asset."
          },
          "entitlementStart": {
            "type": "string",
            "description": "The entitlement start time",
            "format": "date-time"
          },
          "entitlementEnd": {
            "type": "string",
            "description": "The entitlement end time",
            "format": "date-time"
          },
          "time": {
            "type": "string",
            "description": "The time the entitle was made for",
            "format": "date-time"
          },
          "streamInfo": {
            "$ref": "#/components/schemas/StreamInfo"
          },
          "status": {
            "type": "string",
            "description": "Status\n Only used when we can actually play something, so at the moment we hard cord SUCCESS to make the move from v1 clients to v2 easy, they might expect SUCCESS"
          },
          "entitleExposure": {
            "type": "boolean"
          }
        }
      },
      "ApiEpgSearchHits": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelEPGResponse"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiEvent": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "assetId": {
            "type": "string",
            "description": "The id of the asset this program is for."
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiEventList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiEvent"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiExchangeTokenRequest": {
        "required": [
          "crmToken",
          "device",
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "crmToken": {
            "type": "string",
            "description": "The CRM token to exchange."
          }
        }
      },
      "ApiExternalPaymentConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "External payments enabled"
          },
          "externalPaymentUrl": {
            "type": "string",
            "description": "External payments url"
          }
        },
        "description": "External payments configuration"
      },
      "ApiExternalReference": {
        "type": "object",
        "properties": {
          "locator": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ApiExternalUserSessionRequest": {
        "required": [
          "accountId",
          "device",
          "expiration"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Will be used as accountId and, if userId is not provided, as userId"
          },
          "userId": {
            "type": "string",
            "description": "Optional userId, if not provided accountId will be used also as userId"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "description": "The time that the session should expire.",
            "format": "date-time"
          }
        }
      },
      "ApiFacebookLoginRequest": {
        "required": [
          "accessToken",
          "device",
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "rememberMe": {
            "type": "boolean",
            "description": "If the session should have a longer lifetime."
          },
          "accessToken": {
            "type": "string",
            "description": "Facebook access token (oauth2)."
          }
        }
      },
      "ApiFairplayConfigurationResponse": {
        "type": "object",
        "properties": {
          "certificateUrl": {
            "type": "string"
          },
          "licenseAcquisitionUrl": {
            "type": "string"
          },
          "secondaryMediaLocator": {
            "type": "string"
          }
        }
      },
      "ApiFirebaseAuthenticationRequest": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The users login name, 'firebase..&lt;uid&gt;'"
          },
          "email": {
            "type": "string",
            "description": "Email, used for Firebase user creation."
          },
          "displayName": {
            "type": "string",
            "description": "Display name, used for Firebase user creation."
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Email verified, used for Firebase user creation."
          },
          "providerId": {
            "type": "string",
            "description": "Firebase provider, used for Firebase user creation."
          },
          "accessToken": {
            "type": "string",
            "description": "Firebase access token."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "description": "When should the session created by this authentication request expire\n and force the user to log in again."
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used if first login when creating the user"
          }
        }
      },
      "ApiFrontendFeatures": {
        "required": [
          "searchLocales",
          "shouldAlwaysUseAnonymousLogin"
        ],
        "type": "object",
        "properties": {
          "shouldAlwaysUseAnonymousLogin": {
            "type": "boolean",
            "description": "Should device always login anonymous."
          },
          "customLandingPageUrl": {
            "type": "string",
            "description": "Custom landing page url"
          },
          "customSignupPageUrl": {
            "type": "string",
            "description": "Custom signup page url"
          },
          "customAccountPageUrl": {
            "type": "string",
            "description": "Custom account page url"
          },
          "customPasswordResetPageUrl": {
            "type": "string",
            "description": "Custom password reset page url"
          },
          "searchLocales": {
            "type": "array",
            "description": "Search languages",
            "items": {
              "type": "string",
              "description": "Search languages"
            }
          }
        },
        "description": "Frontend features configuration"
      },
      "ApiGetAllUserContentRatingsForAssetResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "ApiGetAllUserContentRatingsForUserResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "rating": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ApiGetUserContentRatingResponse": {
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "rating": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ApiGigyaAuthenticationRequest": {
        "required": [
          "device",
          "jwt"
        ],
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "description": "Gigya JWT."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used if first login when creating the user"
          }
        }
      },
      "ApiGooglePlayConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Google play enabled"
          }
        },
        "description": "Google play configuration"
      },
      "ApiGooglePlayPurchaseInitializeRequest": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Single asset id that the purchase will entitle. Requires that the product offering requires \"direct asset purchases\"."
          }
        }
      },
      "ApiGooglePlayPurchaseInitializeResponse": {
        "type": "object",
        "properties": {
          "obfuscatedAccountId": {
            "type": "string",
            "description": "To used as obfuscatedAccountId"
          },
          "obfuscatedProfileId": {
            "type": "string",
            "description": "To used as obfuscatedProfileId"
          },
          "purchaseId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "ApiGooglePlayPurchaseVerifyRequest": {
        "required": [
          "purchaseToken"
        ],
        "type": "object",
        "properties": {
          "purchaseToken": {
            "type": "string",
            "description": "As received in the Google Play Purchase."
          }
        }
      },
      "ApiGooglePlayPurchaseVerifyResponse": {
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected",
              "cancelled"
            ]
          }
        }
      },
      "ApiHtmlDocument": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ApiImage": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE",
              "SQUARE",
              "UNKNOWN"
            ]
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiInitialisePayment": {
        "type": "object",
        "properties": {
          "productOfferingId": {
            "type": "string",
            "description": "id of the product offering to get methods and price for."
          },
          "voucherCode": {
            "type": "string",
            "description": "Optional voucher code."
          }
        }
      },
      "ApiInitializePaymentResponse": {
        "type": "object",
        "properties": {
          "stripe": {
            "$ref": "#/components/schemas/ApiStripePaymentMethodsAndPrice"
          }
        }
      },
      "ApiIsEntitledResponse": {
        "type": "object",
        "properties": {
          "paymentDone": {
            "type": "boolean",
            "description": "The status of the payment."
          },
          "status": {
            "type": "string",
            "description": "The status of the entitlement.",
            "enum": [
              "SUCCESS",
              "NOT_ENTITLED",
              "GEO_BLOCKED",
              "DOWNLOAD_BLOCKED",
              "DEVICE_BLOCKED",
              "LICENSE_EXPIRED",
              "NOT_AVAILABLE_IN_FORMAT",
              "CONCURRENT_STREAMS_LIMIT_REACHED",
              "NOT_ENABLED",
              "GAP_IN_EPG",
              "EPG_PLAY_MAX_HOURS",
              "ANONYMOUS_IP_BLOCKED"
            ]
          }
        }
      },
      "ApiLabelFilter": {
        "required": [
          "labelFilterId"
        ],
        "type": "object",
        "properties": {
          "labelFilterId": {
            "type": "string"
          }
        }
      },
      "ApiLastViewedAssetList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          }
        }
      },
      "ApiLastViewedOffset": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "lastViewedOffset": {
            "type": "integer",
            "format": "int64"
          },
          "lastViewedTime": {
            "type": "integer",
            "format": "int64"
          },
          "liveTime": {
            "type": "integer",
            "format": "int64"
          },
          "programId": {
            "type": "string"
          }
        }
      },
      "ApiLastViewedOffsetList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLastViewedOffset"
            }
          }
        }
      },
      "ApiLinkedEntity": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "linkType": {
            "type": "string"
          }
        }
      },
      "ApiLocaleConfig": {
        "required": [
          "defaultLocale",
          "displayLocales"
        ],
        "type": "object",
        "properties": {
          "currencies": {
            "type": "array",
            "description": "Currencies",
            "items": {
              "type": "string",
              "description": "Currencies"
            }
          },
          "displayLocales": {
            "type": "array",
            "description": "Supported display languages",
            "items": {
              "type": "string",
              "description": "Supported display languages"
            }
          },
          "defaultLocale": {
            "type": "string",
            "description": "Default display language"
          }
        },
        "description": "Locale configuration"
      },
      "ApiLocalizedData": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiImage"
            }
          },
          "locale": {
            "type": "string"
          },
          "extendedDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "sortingTitle": {
            "type": "string"
          },
          "tinyDescription": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ApiLocalizedPersonData": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          }
        }
      },
      "ApiLocalizedTag": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiImage"
            }
          }
        }
      },
      "ApiLocalizedTitle": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ApiLocation": {
        "required": [
          "locationKnown"
        ],
        "type": "object",
        "properties": {
          "locationKnown": {
            "type": "boolean",
            "description": "true if location is known."
          },
          "countryCode": {
            "type": "string",
            "description": "ISO country code or null if unknown."
          }
        }
      },
      "ApiLoginRequest": {
        "required": [
          "device",
          "deviceId",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "rememberMe": {
            "type": "boolean",
            "description": "If the session should have a longer lifetime."
          },
          "password": {
            "type": "string",
            "description": "The password of the user."
          },
          "username": {
            "type": "string",
            "description": "The username to login."
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "TRUE: Consent to collect personal information is given.\n FALSE or null: consent is not given now. This may be fine if consent already is given."
          }
        }
      },
      "ApiLoginResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The id of the account in the CRM."
          },
          "userId": {
            "type": "string",
            "description": "The id of the user in the CRM."
          },
          "accountStatus": {
            "type": "string",
            "description": "The status of the account."
          },
          "crmToken": {
            "type": "string",
            "description": "The token of the underlying CRM to use if talking directly to the CRM."
          },
          "expirationDateTime": {
            "type": "string",
            "description": "The time when the session expires",
            "format": "date-time"
          },
          "sessionToken": {
            "type": "string",
            "description": "The session token to use for subsequent requests."
          },
          "informationCollectionConsentGiven": {
            "type": "string",
            "format": "date-time"
          },
          "informationCollectionConsentRequiredDate": {
            "type": "string",
            "format": "date-time"
          },
          "language": {
            "type": "string",
            "description": "user language"
          },
          "isOverDeviceLimit": {
            "type": "boolean",
            "description": "If true to many devices are logged in and this session can not be used to play."
          },
          "child": {
            "type": "boolean",
            "description": "is a child user"
          },
          "profileType": {
            "type": "string",
            "description": "Application defined value. Can be used e.g. to carry mapping to parental rating configuration."
          },
          "configReloadQueryParameter": {
            "$ref": "#/components/schemas/ApiQueryParameter"
          },
          "userProfile": {
            "$ref": "#/components/schemas/ApiUserProfile"
          }
        }
      },
      "ApiMarkerPoint": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "endOffset": {
            "type": "integer",
            "format": "int64"
          },
          "thumbnail": {
            "type": "string"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSimpleLocalizedData"
            }
          }
        }
      },
      "ApiMedia": {
        "type": "object",
        "properties": {
          "drm": {
            "type": "string",
            "description": "The DRM of the media."
          },
          "durationMillis": {
            "type": "integer",
            "description": "The duration of the media in milliseconds.",
            "format": "int64"
          },
          "format": {
            "type": "string",
            "description": "The streaming format of the media."
          },
          "height": {
            "type": "integer",
            "description": "The height in pixels.",
            "format": "int32"
          },
          "mediaId": {
            "type": "string",
            "description": "The id of the media."
          },
          "name": {
            "type": "string",
            "description": "The name of the media."
          },
          "programId": {
            "type": "string",
            "description": "The id of the EPG program this media is for."
          },
          "status": {
            "type": "string",
            "description": "The status of the media. \"enabled\" if playable."
          },
          "width": {
            "type": "integer",
            "description": "The width in pixels.",
            "format": "int32"
          }
        }
      },
      "ApiMultiSearchResponse": {
        "type": "object",
        "properties": {
          "assetHits": {
            "$ref": "#/components/schemas/ApiSearchList"
          },
          "tagHits": {
            "$ref": "#/components/schemas/ApiTagSearchList"
          },
          "participantHits": {
            "$ref": "#/components/schemas/ApiParticipantSearchList"
          }
        }
      },
      "ApiOauthAuthenticationRequest": {
        "required": [
          "device",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used if frirslogin awgane creating the user"
          }
        }
      },
      "ApiOAuthLoginRequest": {
        "required": [
          "accessToken",
          "device",
          "deviceId",
          "type"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "rememberMe": {
            "type": "boolean",
            "description": "If the session should have a longer lifetime."
          },
          "accessToken": {
            "type": "string",
            "description": "OAuth access token (oauth2)."
          },
          "type": {
            "type": "string",
            "description": "The OAuth provider type."
          }
        }
      },
      "ApiOidcAuthenticationRequest": {
        "required": [
          "device",
          "jwt"
        ],
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "description": "JWT."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used if first login when creating the user"
          }
        }
      },
      "ApiOverlayWidget": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "ApiParentalRating": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "description": "The two letter country code this rating is for."
          },
          "rating": {
            "type": "string",
            "description": "The rating, allowed values depends on the scheme."
          },
          "scheme": {
            "type": "string",
            "description": "The rating scheme, for instance MPAA."
          }
        }
      },
      "ApiParticipant": {
        "type": "object",
        "properties": {
          "participantId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "dateOfDeath": {
            "type": "string",
            "format": "date"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedPersonData"
            }
          }
        }
      },
      "ApiParticipantSearchList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiParticipantsSearch"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiParticipantsSearch": {
        "type": "object",
        "properties": {
          "participant": {
            "$ref": "#/components/schemas/ApiParticipant"
          }
        }
      },
      "ApiPasswordHashConfig": {
        "type": "object",
        "properties": {
          "sharedRandom": {
            "type": "string"
          },
          "algorithms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Algorithm"
            }
          }
        }
      },
      "ApiPasswordPolicy": {
        "required": [
          "minimumGroups",
          "minimumLength"
        ],
        "type": "object",
        "properties": {
          "minimumLength": {
            "type": "integer",
            "description": "Minimum number of characters in passwords",
            "format": "int32"
          },
          "minimumGroups": {
            "type": "integer",
            "description": "Minimum number character groups used, eg. alfa, ALFA, 0..9, separators",
            "format": "int32"
          }
        },
        "description": "Password policy"
      },
      "ApiPaymentConfig": {
        "required": [
          "appstore",
          "external",
          "googleplay",
          "stripe",
          "vouchers"
        ],
        "type": "object",
        "properties": {
          "appstore": {
            "$ref": "#/components/schemas/ApiAppStoreConfig"
          },
          "external": {
            "$ref": "#/components/schemas/ApiExternalPaymentConfig"
          },
          "googleplay": {
            "$ref": "#/components/schemas/ApiGooglePlayConfig"
          },
          "stripe": {
            "$ref": "#/components/schemas/ApiStripeConfig"
          },
          "vouchers": {
            "$ref": "#/components/schemas/ApiVouchersConfig"
          }
        },
        "description": "Payments configuration"
      },
      "ApiPaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the payment method"
          },
          "cardSummary": {
            "$ref": "#/components/schemas/ApiCardSummary"
          },
          "preferred": {
            "type": "boolean"
          }
        }
      },
      "ApiPaymentMethods": {
        "type": "object",
        "properties": {
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPaymentMethod"
            }
          }
        }
      },
      "ApiPerson": {
        "type": "object",
        "properties": {
          "function": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "dateOfDeath": {
            "type": "string",
            "format": "date"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedPersonData"
            }
          }
        }
      },
      "ApiPinCodeResponse": {
        "required": [
          "grants",
          "modified",
          "pinId"
        ],
        "type": "object",
        "properties": {
          "pinId": {
            "type": "string",
            "description": "Id of PIN"
          },
          "grants": {
            "type": "array",
            "description": "List of application specified grants",
            "items": {
              "type": "string"
            }
          },
          "modified": {
            "type": "string",
            "description": "When last modified"
          }
        }
      },
      "ApiPinCodeSetRequest": {
        "required": [
          "grants",
          "inClear"
        ],
        "type": "object",
        "properties": {
          "inClear": {
            "type": "string",
            "description": "PIN in clear text."
          },
          "grants": {
            "type": "array",
            "description": "List of application specified grants returned if PIN is successfully validated.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiPinCodeValidationRequest": {
        "required": [
          "inClear"
        ],
        "type": "object",
        "properties": {
          "inClear": {
            "type": "string",
            "description": "PIN in clear text to validate."
          }
        }
      },
      "ApiPlayRequest": {
        "required": [
          "drm",
          "format"
        ],
        "type": "object",
        "properties": {
          "drm": {
            "type": "string",
            "description": "The requested DRM. The token will be adapted according to this parameter.",
            "enum": [
              "PLAYREADY",
              "EDRM",
              "EDRM_FAIRPLAY",
              "CENC",
              "UNENCRYPTED",
              "FAIRPLAY"
            ]
          },
          "format": {
            "type": "string",
            "description": "The requested format. The server will make sure that the asset is available in this format.",
            "enum": [
              "DASH",
              "SMOOTHSTREAMING",
              "HLS",
              "MP4",
              "SYNDICATED",
              "MP3",
              "AAC"
            ]
          }
        }
      },
      "ApiPlayResponse": {
        "type": "object",
        "properties": {
          "airplayBlocked": {
            "type": "boolean",
            "description": "If airplay is blocked"
          },
          "cencConfig": {
            "$ref": "#/components/schemas/ApiCencConfigurationResponse"
          },
          "edrmConfig": {
            "$ref": "#/components/schemas/ApiEDRMConfigurationResponse"
          },
          "entitlementType": {
            "type": "string",
            "description": "The type of entitlement that granted access to this play.",
            "enum": [
              "TVOD",
              "SVOD",
              "FVOD",
              "AVOD"
            ]
          },
          "fairplayConfig": {
            "$ref": "#/components/schemas/ApiFairplayConfigurationResponse"
          },
          "widevineConfig": {
            "$ref": "#/components/schemas/ApiWidevineConfigurationResponse"
          },
          "ffEnabled": {
            "type": "boolean",
            "description": "If fast forward is enabled"
          },
          "lastViewedOffset": {
            "type": "integer",
            "description": "Last viewed offset",
            "format": "int64"
          },
          "lastViewedTime": {
            "type": "integer",
            "description": "Last viewed time",
            "format": "int64"
          },
          "licenseActivation": {
            "type": "string",
            "description": "The datetime of activation of the drm license.",
            "format": "date-time"
          },
          "licenseExpiration": {
            "type": "string",
            "description": "The datetime of expiration of the drm license.",
            "format": "date-time"
          },
          "licenseExpirationReason": {
            "type": "string",
            "description": "The reason of expiration of the drm license.",
            "enum": [
              "SUCCESS",
              "NOT_ENTITLED",
              "GEO_BLOCKED",
              "DOWNLOAD_BLOCKED",
              "DEVICE_BLOCKED",
              "LICENSE_EXPIRED",
              "NOT_AVAILABLE_IN_FORMAT",
              "CONCURRENT_STREAMS_LIMIT_REACHED",
              "NOT_ENABLED",
              "GAP_IN_EPG",
              "EPG_PLAY_MAX_HOURS",
              "ANONYMOUS_IP_BLOCKED"
            ]
          },
          "live": {
            "type": "boolean",
            "description": "If this is a live entitlement."
          },
          "liveTime": {
            "type": "integer",
            "description": "Live time",
            "format": "int64"
          },
          "maxBitrate": {
            "type": "integer",
            "description": "Max bitrate to use",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "description": "Max height resolution",
            "format": "int32"
          },
          "mdnRequestRouterUrl": {
            "type": "string",
            "description": "MDN Request Router Url"
          },
          "mediaLocator": {
            "type": "string",
            "description": "The information needed to locate the media. FOR EDRM this will be the media uid, for other formats it's the URL\n of the media."
          },
          "adMediaLocator": {
            "type": "string",
            "description": "Media locator to used for add servers SDKs"
          },
          "minBitrate": {
            "type": "integer",
            "description": "Min bitrate to use",
            "format": "int32"
          },
          "playSessionId": {
            "type": "string",
            "description": "Unique id of this playback session, all analytics events for this session should be reported on with this id"
          },
          "playToken": {
            "type": "string",
            "description": "Play token to use for either PlayReady or MRR.\n Will be empty if the status is not SUCCESS."
          },
          "playTokenExpiration": {
            "type": "string",
            "description": "The expiration of the the play token. The player needs to be initialized and done the play call before this.",
            "format": "date-time"
          },
          "productId": {
            "type": "string",
            "description": "Identity of the product that permitted playback of the asset"
          },
          "rwEnabled": {
            "type": "boolean",
            "description": "If rewind is enabled"
          },
          "timeshiftEnabled": {
            "type": "boolean",
            "description": "If timeshift is disabled"
          }
        }
      },
      "ApiPlayResponseV2": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "description": "The account id"
          },
          "audioOnly": {
            "type": "boolean",
            "description": "Is the material an audio only asset or is it audio+video"
          },
          "requestId": {
            "type": "string",
            "description": "The request id, used for internal debugging."
          },
          "bookmarks": {
            "$ref": "#/components/schemas/Bookmarks"
          },
          "contractRestrictions": {
            "$ref": "#/components/schemas/ContractRestrictions"
          },
          "entitlementType": {
            "type": "string",
            "description": "The type of entitlement that granted access to this play.",
            "enum": [
              "TVOD",
              "SVOD",
              "FVOD",
              "AVOD"
            ]
          },
          "formats": {
            "type": "array",
            "description": "Formats",
            "items": {
              "$ref": "#/components/schemas/MediaFormat"
            }
          },
          "playSessionId": {
            "type": "string",
            "description": "Unique id of this playback session, all analytics events for this session should be reported on with this id"
          },
          "playToken": {
            "type": "string",
            "description": "The play token"
          },
          "playTokenExpiration": {
            "type": "integer",
            "description": "The expiration of the the play token. The player needs to be initialized and have done the play call before this.",
            "format": "int64"
          },
          "playTokenExpirationReason": {
            "type": "string",
            "description": "Why does the play token expire"
          },
          "productId": {
            "type": "string",
            "description": "Identity of the product that permitted playback of the asset"
          },
          "publicationId": {
            "type": "string",
            "description": "Identity of the publication that permitted playback of the asset."
          },
          "streamInfo": {
            "$ref": "#/components/schemas/StreamInfo"
          },
          "concurrentSessionsCount": {
            "type": "integer",
            "description": "Number of concurrent sessions",
            "format": "int32"
          },
          "durationInMs": {
            "type": "integer",
            "description": "Duration of the material. This is deprecated and must contain duratin in micro seconds and not milliseconds",
            "format": "int64"
          },
          "durationInMilliseconds": {
            "type": "integer",
            "description": "Duration of the material. This is the new value that MUST be and should stay as milliseconds",
            "format": "int64"
          },
          "materialId": {
            "type": "string",
            "description": "The material id for the material used in this play response. Just available for testing purposes."
          },
          "materialVersion": {
            "type": "integer",
            "description": "The material version for the material used in this play response. Just available for testing purposes.",
            "format": "int32"
          },
          "materialProfile": {
            "type": "string",
            "description": "The material profile, materials can be used for different purposes using profiles"
          },
          "ads": {
            "$ref": "#/components/schemas/Ads"
          },
          "sprites": {
            "type": "array",
            "description": "Information about available sprites",
            "items": {
              "$ref": "#/components/schemas/Sprites"
            }
          },
          "publishingType": {
            "type": "string",
            "description": "Type of publishing type, Just available for testing. Should we really return this here? why?"
          },
          "cdn": {
            "$ref": "#/components/schemas/CDN"
          },
          "analytics": {
            "$ref": "#/components/schemas/Analytics"
          },
          "epg": {
            "$ref": "#/components/schemas/EpgInfo"
          },
          "entitleExposure": {
            "type": "boolean"
          }
        }
      },
      "ApiPreferencesListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "$ref": "#/components/schemas/Map"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiPreferencesListResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPreferencesListItem"
            }
          },
          "query": {
            "type": "string"
          }
        }
      },
      "ApiPrimetimeAuthenticationRequest": {
        "required": [
          "device",
          "mediaToken"
        ],
        "type": "object",
        "properties": {
          "mediaToken": {
            "type": "string",
            "description": "Adobe Primetime AuthZ media token."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used if first login when creating the user"
          }
        }
      },
      "ApiProduct": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entitlementRequired": {
            "type": "boolean"
          },
          "anonymousAllowed": {
            "type": "boolean"
          },
          "hasAds": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "blocked": {
            "type": "boolean"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiProductOfferingPurchase": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "businessUnitId": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "description": "Time of purchase. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "description": "Start of entitlement. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "description": "End of entitlement. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "deprecated": true
          },
          "purchaseId": {
            "type": "string",
            "description": "Id of this purchase."
          },
          "renewAt": {
            "type": "string",
            "description": "If present, next time for renewal. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "productOfferingId": {
            "type": "string",
            "description": "Id of the purchased product offering."
          },
          "apiStoreProductOffering": {
            "$ref": "#/components/schemas/ApiStoreProductOffering"
          },
          "status": {
            "type": "string",
            "enum": [
              "REJECTED",
              "PENDING",
              "FULFILLED"
            ]
          },
          "activated": {
            "type": "boolean",
            "description": "Indicates that the user has started to watch the content."
          }
        }
      },
      "ApiProductOfferingPurchases": {
        "type": "object",
        "properties": {
          "consumedProductOfferingDiscounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "purchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProductOfferingPurchase"
            }
          }
        }
      },
      "ApiProductOfferingTransactions": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreTransaction"
            }
          }
        }
      },
      "ApiProductOfferingTransactionsProductOfferingPair": {
        "type": "object",
        "properties": {
          "transactions": {
            "$ref": "#/components/schemas/ApiStoreTransaction"
          },
          "productOffering": {
            "$ref": "#/components/schemas/ApiStoreProductOffering"
          }
        }
      },
      "ApiProductOfferingTransactionsProductOfferingPairList": {
        "type": "object",
        "properties": {
          "transactionsProductOfferingPairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProductOfferingTransactionsProductOfferingPair"
            }
          }
        }
      },
      "ApiProducts": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProduct"
            }
          }
        }
      },
      "ApiProgram": {
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "programId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          }
        }
      },
      "ApiProgramResponse": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "assetId": {
            "type": "string",
            "description": "The id of the asset this program is for."
          },
          "blackout": {
            "type": "boolean",
            "description": "If this program is currently published as blackout. This means any publication contains blackout, not global\n blackout;"
          },
          "catchup": {
            "type": "boolean",
            "description": "If this asset is currently available as rough cut that is not expired."
          },
          "catchupBlocked": {
            "type": "boolean",
            "description": "If this asset is currently blocked for catchup."
          },
          "changed": {
            "type": "string",
            "description": "The date the program was changed.",
            "format": "date-time"
          },
          "channelId": {
            "type": "string",
            "description": "The id of the channel this program is on."
          },
          "created": {
            "type": "string",
            "description": "The date the program was created.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "programId": {
            "type": "string",
            "description": "The id of the program."
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "vodAvailable": {
            "type": "boolean",
            "description": "If this asset is currently available as VOD."
          }
        }
      },
      "ApiPublication": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDeviceRights"
            }
          },
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publicationDate": {
            "type": "string",
            "format": "date-time"
          },
          "publicationId": {
            "type": "string"
          },
          "rights": {
            "$ref": "#/components/schemas/ApiAssetRights"
          },
          "services": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "toDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiPurchaseRequest": {
        "type": "object",
        "properties": {
          "stripePurchase": {
            "$ref": "#/components/schemas/ApiStripePurchaseRequest"
          },
          "voucherCode": {
            "type": "string",
            "description": "Voucher code that should be applied to the purchase"
          },
          "assetId": {
            "type": "string",
            "description": "Single asset id that the purchase will entitle.\nRequires that the product offering requires \"direct asset purchases\""
          },
          "storePaymentMethod": {
            "type": "boolean",
            "description": "Store payment method for future usage.\nThe details is stored within the used payment provider."
          }
        }
      },
      "ApiPurchaseResponse": {
        "type": "object",
        "properties": {
          "purchaseId": {
            "type": "string",
            "deprecated": true
          },
          "purchase": {
            "$ref": "#/components/schemas/ApiStorePurchase"
          },
          "apiStripePurchaseResponse": {
            "$ref": "#/components/schemas/ApiStripePurchaseResponse"
          }
        }
      },
      "ApiPurchaseVerificationRequest": {
        "type": "object"
      },
      "ApiPutUserContentRatingRequest": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ApiQueryParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ApiRecommendedAssets": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          }
        }
      },
      "ApiRecommendedWatchNext": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          }
        }
      },
      "ApiSearch": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "highlightedDescription": {
            "type": "string"
          },
          "highlightedTitle": {
            "type": "string"
          }
        }
      },
      "ApiSearchList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSearch"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiSeason": {
        "type": "object",
        "properties": {
          "availableDate": {
            "type": "string",
            "format": "date-time"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "endYear": {
            "type": "integer",
            "format": "int32"
          },
          "episodeCount": {
            "type": "integer",
            "format": "int32"
          },
          "episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiExternalReference"
            }
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLinkedEntity"
            }
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedData"
            }
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "season": {
            "type": "string"
          },
          "seasonId": {
            "type": "string"
          },
          "startYear": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTag"
            }
          },
          "tvShowId": {
            "type": "string"
          }
        }
      },
      "ApiSeasonList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSeason"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiSentryConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "If Sentry is to be enabled"
          },
          "sampleRate": {
            "type": "number",
            "description": "How much reporting to do. 0.0 - 1.0.  0.0 report nothing, 0.5 means report every second session etc.",
            "format": "double"
          }
        },
        "description": "Sentry configuaration"
      },
      "ApiSessionResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The account ID."
          },
          "crmToken": {
            "type": "string",
            "description": "The token within the crm."
          },
          "userId": {
            "type": "string",
            "description": "The user / profile id."
          },
          "overTheDeviceLimit": {
            "type": "boolean",
            "description": "If true this session is can only be used to list and log out other devices"
          },
          "configReloadQueryParameter": {
            "$ref": "#/components/schemas/ApiQueryParameter"
          },
          "userProfile": {
            "$ref": "#/components/schemas/ApiUserProfile"
          }
        }
      },
      "ApiSetPasswordWithTokenRequestV2": {
        "required": [
          "credentials"
        ],
        "type": "object",
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "If TRUE consent to information collection is given now\n If FALSE or null no consent given now. Which is fine if consent is not required or already given"
          }
        }
      },
      "ApiSetPwdWithTokenV3": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password."
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "If TRUE consent to information collection is given now\n If FALSE or null no consent given now. Which is fine if consent is not required or already given"
          }
        }
      },
      "ApiSetUserPreferenceRequest": {
        "required": [
          "preferences"
        ],
        "type": "object",
        "properties": {
          "preferences": {
            "$ref": "#/components/schemas/Map"
          }
        }
      },
      "ApiSimpleLocalizedData": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/ApiImage"
          }
        }
      },
      "ApiStoreAppStoreReference": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          }
        }
      },
      "ApiStoreDiscount": {
        "type": "object",
        "properties": {
          "discountedOfferingPrice": {
            "$ref": "#/components/schemas/ApiStoreProductOfferingPrice"
          }
        }
      },
      "ApiStoreGooglePlayReference": {
        "type": "object",
        "properties": {
          "skuId": {
            "type": "string"
          }
        }
      },
      "ApiStoreLocalizedMetaData": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ApiStoreLocalizedName": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ApiStoreLocalizedTitle": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ApiStorePrice": {
        "type": "object",
        "properties": {
          "priceClassId": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "vatIncluded": {
            "type": "boolean"
          },
          "vatPercentage": {
            "type": "number",
            "format": "double"
          },
          "rentalLength": {
            "type": "string",
            "enum": [
              "NO_RENTAL",
              "PT24H",
              "PT48H",
              "PT72H",
              "PT96H",
              "PT120H",
              "PT144H",
              "PT168H",
              "PT720H"
            ]
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "NO_RECURRENCE",
              "P1Y",
              "P6M",
              "P3M",
              "P1M",
              "P7D"
            ]
          }
        }
      },
      "ApiStorePriceTag": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount in minor units of the currency. e.g. 10 EUR is 1000, while 100 JPY is 100",
            "format": "int64"
          },
          "fractionDigits": {
            "type": "integer",
            "description": "Number of fraction digits of the currency as specified by ISO 4217, e.g. for EUR 2 and for JPY 0",
            "format": "int32"
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 Currency Code"
          }
        },
        "description": "Price after any discount"
      },
      "ApiStoreProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "productType": {
            "type": "string",
            "enum": [
              "PACKAGE",
              "SVOD",
              "TVOD",
              "AVOD",
              "FVOD"
            ]
          },
          "preRequisiteProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProduct"
            }
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStorePrice"
            }
          },
          "subProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProduct"
            }
          }
        }
      },
      "ApiStoreProductOffering": {
        "type": "object",
        "properties": {
          "productOfferingId": {
            "type": "string",
            "description": "Product Offering Id"
          },
          "recurrence": {
            "type": "string",
            "description": "Recurrence interval, ISO 8601 Duration",
            "nullable": true
          },
          "rentalLength": {
            "type": "string",
            "description": "Rental length, ISO 8601 Duration"
          },
          "rentalExpiryWindow": {
            "type": "string",
            "description": "Rental expiry window, ISO 8601 Duration",
            "nullable": true
          },
          "localizedMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreLocalizedMetaData"
            }
          },
          "accountProductId": {
            "type": "string"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "offeringPrice": {
            "$ref": "#/components/schemas/ApiStoreProductOfferingPrice"
          },
          "googlePlayReference": {
            "$ref": "#/components/schemas/ApiStoreGooglePlayReference"
          },
          "appStoreReference": {
            "$ref": "#/components/schemas/ApiStoreAppStoreReference"
          },
          "entitlementStart": {
            "type": "string",
            "description": "If present the time at which entitlement starts, if not present entitlement starts ar time of purchase, ISO 8601 Date and time",
            "format": "date-time",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/ApiStoreProductOfferingDiscount"
          },
          "productRequiresSelectAsset": {
            "type": "boolean",
            "description": "if true, purchase of single asset. The assetId must be provided in the purchase",
            "nullable": true
          },
          "productOfferingType": {
            "type": "string",
            "description": "Type of offering: purchase, rental, event, subscription"
          },
          "paymentMethodTypes": {
            "type": "array",
            "description": "If present, this is a list of stripe payment method types that are allowed with this offering",
            "items": {
              "type": "string",
              "description": "If present, this is a list of stripe payment method types that are allowed with this offering"
            }
          },
          "id": {
            "type": "string",
            "description": "Product Offering Id",
            "deprecated": true
          }
        }
      },
      "ApiStoreProductOfferingDiscount": {
        "type": "object",
        "properties": {
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "numberOfRecurringPayments": {
            "type": "integer",
            "format": "int32"
          },
          "freePeriod": {
            "type": "object",
            "properties": {
              "years": {
                "type": "integer",
                "format": "int32"
              },
              "months": {
                "type": "integer",
                "format": "int32"
              },
              "days": {
                "type": "integer",
                "format": "int32"
              },
              "units": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "duration": {
                      "type": "object",
                      "properties": {
                        "seconds": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "nano": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "zero": {
                          "type": "boolean"
                        },
                        "negative": {
                          "type": "boolean"
                        }
                      }
                    },
                    "durationEstimated": {
                      "type": "boolean"
                    },
                    "dateBased": {
                      "type": "boolean"
                    },
                    "timeBased": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "zero": {
                "type": "boolean"
              },
              "negative": {
                "type": "boolean"
              },
              "chronology": {
                "type": "object",
                "properties": {
                  "calendarType": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": "The one-time discounted price on a product offering",
        "nullable": true
      },
      "ApiStoreProductOfferingPrice": {
        "type": "object",
        "properties": {
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "countryCode": {
            "type": "string",
            "description": "In which country this offering is valid, if not present anywhere\nFormat: ISO 3166-1 alpha-2, if not present the offering is available globally"
          },
          "vat": {
            "$ref": "#/components/schemas/ApiStoreVat"
          }
        }
      },
      "ApiStoreProductOfferings": {
        "type": "object",
        "properties": {
          "productOfferings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProductOffering"
            }
          }
        }
      },
      "ApiStorePromotion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customer": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "discount": {
            "$ref": "#/components/schemas/ApiStoreDiscount"
          },
          "productOfferingIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fullDiscountVoucher": {
            "type": "boolean"
          }
        }
      },
      "ApiStorePromotionProductOfferings": {
        "type": "object",
        "properties": {
          "productOfferings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProductOffering"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/ApiStorePromotion"
          }
        }
      },
      "ApiStorePurchase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/ApiStoreProduct"
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time"
          },
          "renewAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "REJECTED",
              "PENDING",
              "FULFILLED"
            ]
          },
          "purchaseStatus": {
            "type": "string",
            "enum": [
              "REJECTED",
              "PENDING",
              "FULFILLED"
            ]
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreTransaction"
            }
          }
        }
      },
      "ApiStorePurchaseTransaction": {
        "type": "object",
        "properties": {
          "productOfferingId": {
            "type": "string"
          },
          "productOfferingType": {
            "type": "string",
            "description": "Type of offering: purchase, rental, event, subscription"
          },
          "localizedProductOffering": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreLocalizedName"
            }
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time"
          },
          "renewAt": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreTransaction"
            }
          },
          "voucherCode": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "localizedAsset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreLocalizedTitle"
            }
          }
        }
      },
      "ApiStoreTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "deprecated": true
          },
          "transactionId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected",
              "cancelled"
            ]
          },
          "paymentProviderRequestId": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "completedTime": {
            "type": "string"
          },
          "refunded": {
            "type": "boolean"
          },
          "paymentProviderTransactionId": {
            "type": "string"
          },
          "paymentProviderType": {
            "type": "string"
          },
          "productOfferingId": {
            "type": "string"
          },
          "receiptUrl": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ApiStoreVat": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "description": "The percentage of the price to paid a VAT, e.g. 12.5",
            "format": "double"
          },
          "included": {
            "type": "boolean",
            "description": "If the VAT is part of the product offering price"
          }
        }
      },
      "ApiStripeConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Stripe enabled"
          },
          "stripePublicKey": {
            "type": "string",
            "description": "Stripe public key"
          }
        },
        "description": "Stripe configuration"
      },
      "ApiStripePaymentMethodsAndPrice": {
        "type": "object",
        "properties": {
          "methodTypes": {
            "type": "array",
            "description": "One entry for each relevant payment method type, such as \"card\", \"ideal\"",
            "items": {
              "$ref": "#/components/schemas/ApiStripePaymentMethodTypeAndPrice"
            }
          },
          "wallets": {
            "type": "array",
            "description": "One entry for each relevant wallet, such as \"apple\", \"google\"",
            "items": {
              "$ref": "#/components/schemas/ApiStripeWalletAndPrice"
            }
          }
        },
        "description": "If Stripe is enabled."
      },
      "ApiStripePaymentMethodTypeAndPrice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name e.g card or ideal"
          },
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "recurring": {
            "type": "boolean",
            "description": "Will payment be recurring"
          }
        },
        "description": "One entry for each relevant payment method type, such as \"card\", \"ideal\""
      },
      "ApiStripePurchaseRequest": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string"
          }
        },
        "description": "Purchase using Stripe as payment platform.\nCreates an stripe intent.\nRequires that Stripe is configured for the customer/business unit."
      },
      "ApiStripePurchaseResponse": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "If setupCard == false the clientSecret is paymentIntent clientSecret. If setupCard == true the clientSecret is setupIntent clientSecret"
          },
          "setupCard": {
            "type": "boolean",
            "description": "If true setup card else payment"
          },
          "stripeCustomerId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "paymentMethodTypes": {
            "type": "array",
            "description": "\"card\" [, \"ideal\"]   Are the currently supported types",
            "items": {
              "type": "string",
              "description": "\"card\" [, \"ideal\"]   Are the currently supported types"
            }
          }
        }
      },
      "ApiStripeWalletAndPrice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of wallet e.g apple or google"
          },
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "recurring": {
            "type": "boolean",
            "description": "Will payment be recurring"
          }
        },
        "description": "One entry for each relevant wallet, such as \"apple\", \"google\""
      },
      "ApiSubtitleTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiSystemConfig": {
        "required": [
          "access",
          "analytics",
          "frontendFeatures",
          "localization",
          "payments",
          "production",
          "sentry"
        ],
        "type": "object",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/ApiAccessConfig"
          },
          "analytics": {
            "$ref": "#/components/schemas/ApiAnalyticsConfig"
          },
          "frontendFeatures": {
            "$ref": "#/components/schemas/ApiFrontendFeatures"
          },
          "localization": {
            "$ref": "#/components/schemas/ApiLocaleConfig"
          },
          "payments": {
            "$ref": "#/components/schemas/ApiPaymentConfig"
          },
          "playerUrl": {
            "type": "string",
            "description": "Url to player"
          },
          "production": {
            "type": "boolean",
            "description": "True if production environment"
          },
          "sentry": {
            "$ref": "#/components/schemas/ApiSentryConfig"
          }
        }
      },
      "ApiSystemTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSystemTagImage"
            }
          }
        }
      },
      "ApiSystemTagImage": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "selectors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiTag": {
        "type": "object",
        "properties": {
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "tagValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagValues"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ApiTagList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagType"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiTagSearch": {
        "type": "object",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/ApiTagType"
          },
          "highlightedTitle": {
            "type": "string"
          }
        }
      },
      "ApiTagSearchList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagSearch"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiTagType": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagType"
            }
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedTag"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scheme": {
            "type": "string"
          },
          "tagId": {
            "type": "string"
          }
        }
      },
      "ApiTagValues": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "string"
          }
        }
      },
      "ApiTrackInfo": {
        "type": "object",
        "properties": {
          "targetBitrate": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiTrackSizes": {
        "type": "object",
        "properties": {
          "audioTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAudioTrackInfo"
            }
          },
          "videoTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiVideoTrackInfo"
            }
          },
          "subtitleTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSubtitleTrackInfo"
            }
          }
        }
      },
      "ApiTvShowInfo": {
        "type": "object",
        "properties": {
          "localizedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedData"
            }
          }
        }
      },
      "ApiUpdatePaymentMethodRequest": {
        "type": "object",
        "properties": {
          "expiryMonth": {
            "type": "integer",
            "format": "int32"
          },
          "expiryYear": {
            "type": "integer",
            "format": "int32"
          },
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "ApiUpdatePrederredPaymentMethodRequest": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "ApiUserAssetData": {
        "type": "object",
        "properties": {
          "playHistory": {
            "$ref": "#/components/schemas/ApiUserAssetPlayHistory"
          }
        }
      },
      "ApiUserAssetPlayHistory": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string",
            "description": "The channel id if the asset was viewed as catchup or live."
          },
          "errorMessage": {
            "type": "string",
            "description": "Property is set to \"FAILURE\" if the data couldn't be received.\n If no problem this property is not set."
          },
          "lastViewedOffset": {
            "type": "integer",
            "description": "Last viewed offset, offset in the last play of the asset.",
            "format": "int64"
          },
          "programId": {
            "type": "string",
            "description": "The program id if the asset was viewed as catchup or live."
          }
        }
      },
      "ApiUserAttributeRequest": {
        "required": [
          "attributeId"
        ],
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "string",
            "description": "id of the attribute"
          },
          "value": {
            "$ref": "#/components/schemas/Object"
          }
        }
      },
      "ApiUserAttributeResponse": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "string",
            "description": "id of the attribute"
          },
          "type": {
            "type": "string",
            "description": "Name of type\n \"boolean\":  value range null/undefined, false, true,\n \"email\": valid email address\n \"string\": any string\n \"integer\": integer number e.g 1\n \"real\": Real/decimal number e.g 1.1"
          },
          "requiredAtSignup": {
            "type": "boolean",
            "description": "If true user must provide value"
          },
          "defaultValue": {
            "$ref": "#/components/schemas/Object"
          },
          "value": {
            "$ref": "#/components/schemas/Object"
          },
          "enums": {
            "type": "array",
            "description": "If type = \"enum\": The enums value set",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributesEnumValue"
            }
          },
          "range": {
            "$ref": "#/components/schemas/ApiUserAttributesRange"
          },
          "valueSet": {
            "type": "boolean",
            "description": "If true the attribute has been set, potentially with a null/undefined value, in which case the default value is used"
          },
          "localized": {
            "type": "array",
            "description": "Localized titles and descriptions",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributesLocalizedMetadata"
            }
          }
        }
      },
      "ApiUserAttributesEnumValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "To be used as value of the enum"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributesLocalizedMetadata"
            }
          }
        }
      },
      "ApiUserAttributesLocalizedMetadata": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "Locale of title and description."
          },
          "title": {
            "type": "string",
            "description": "Title of attribute or enum in locale's language."
          },
          "description": {
            "type": "string",
            "description": "The attribute's or enum's description  in locale's language."
          }
        }
      },
      "ApiUserAttributesRange": {
        "type": "object",
        "properties": {
          "min": {
            "$ref": "#/components/schemas/Object"
          },
          "max": {
            "$ref": "#/components/schemas/Object"
          }
        }
      },
      "ApiUserCapabilities": {
        "type": "object",
        "properties": {
          "canChangePassword": {
            "type": "boolean",
            "description": "True if the user can change password here."
          },
          "canChangeUserNameAndEmail": {
            "type": "boolean",
            "description": "True if user name equals the user's email address and the user may change this; password required"
          },
          "canChangeEmail": {
            "type": "boolean",
            "description": "True if user name is not equal to the user's email address and the user may change the email address."
          },
          "canManageAccount": {
            "type": "boolean",
            "description": "True if user can manage user profiles and cancel account"
          },
          "canManageDevices": {
            "type": "boolean",
            "description": "True if user can manage devices"
          },
          "canManagePayments": {
            "type": "boolean",
            "description": "True if user can manage payment methods, such as credit cards"
          },
          "canManagePurchases": {
            "type": "boolean",
            "description": "True if user can manage purchase, such as adding and cancelling subscriptions"
          }
        }
      },
      "ApiUserDetailsResponse": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name used e.g. as email display name, null if not changed"
          },
          "username": {
            "type": "string",
            "description": "username"
          },
          "email": {
            "type": "string",
            "description": "email address if available"
          },
          "language": {
            "type": "string",
            "description": "Set Language"
          },
          "defaultLanguage": {
            "type": "string"
          },
          "child": {
            "type": "boolean",
            "description": "If true the user is a child"
          },
          "profileType": {
            "type": "string",
            "description": "Application defined value. Can be used e.g. to carry mapping to parental rating configuration."
          },
          "metadata": {
            "$ref": "#/components/schemas/Map"
          },
          "capabilities": {
            "$ref": "#/components/schemas/ApiUserCapabilities"
          },
          "attributes": {
            "type": "array",
            "description": "Potentially empty list of attributes",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributeResponse"
            }
          }
        }
      },
      "ApiUserDetailsUpdateRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name used e.g. as email display name, null if not changed.\n If value is not provided any existing value is unchanged."
          },
          "language": {
            "type": "string",
            "description": "Preferred language.\n If value is not provided any existing value is unchanged."
          },
          "child": {
            "type": "boolean",
            "description": "True if user is a child."
          },
          "profileType": {
            "type": "string",
            "description": "Application defined value. Can be used e.g. to carry mapping to parental rating configuration.\n If value is not provided any existing value is unchanged."
          },
          "metadata": {
            "$ref": "#/components/schemas/Map"
          }
        }
      },
      "ApiUserPreferenceResponse": {
        "type": "object",
        "properties": {
          "lastUpdated": {
            "type": "string",
            "description": "Last time the preferences where changed.",
            "format": "date-time"
          },
          "preferences": {
            "$ref": "#/components/schemas/Map"
          }
        }
      },
      "ApiUserProfile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name."
          },
          "displayName": {
            "type": "string",
            "description": "Display name (full name)."
          },
          "created": {
            "type": "string",
            "description": "Created at"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address."
          },
          "userId": {
            "type": "string",
            "description": "UserId of profile."
          },
          "child": {
            "type": "boolean",
            "description": "True if user is a child."
          },
          "profileType": {
            "type": "string",
            "description": "Application defined value. Can be used e.g. to carry mapping to parental rating configuration."
          },
          "metadata": {
            "$ref": "#/components/schemas/Map"
          },
          "active": {
            "type": "boolean",
            "description": "True if this user profile is the active user"
          },
          "owner": {
            "type": "boolean",
            "description": "True if user is owner of the account."
          },
          "emailAddressRequired": {
            "type": "boolean",
            "description": "DEPRECATED True if the user must have an email address. Check User attribute primary-email-address instead."
          },
          "language": {
            "type": "string",
            "description": "preferred language."
          },
          "capabilities": {
            "$ref": "#/components/schemas/ApiUserCapabilities"
          },
          "attributes": {
            "type": "array",
            "description": "Potentially empty list of attributes\n EXPERIMENTAL May change",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributeResponse"
            }
          }
        }
      },
      "ApiUserProfileCreateRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name."
          },
          "child": {
            "type": "boolean",
            "description": "True if user is a child."
          },
          "profileType": {
            "type": "string",
            "description": "Application defined value. Can be used e.g. to carry mapping to parental rating configuration."
          },
          "metadata": {
            "$ref": "#/components/schemas/Map"
          },
          "language": {
            "type": "string",
            "description": "Preferred language."
          }
        }
      },
      "ApiUserProfiles": {
        "type": "object",
        "properties": {
          "profiles": {
            "type": "array",
            "description": "List user profiles.",
            "items": {
              "$ref": "#/components/schemas/ApiUserProfile"
            }
          },
          "pinCodes": {
            "type": "array",
            "description": "List of pin codes, which may or may not be related to profile management.",
            "items": {
              "$ref": "#/components/schemas/ApiPinCodeResponse"
            }
          }
        }
      },
      "ApiUserSelfServiceCreateRequestV2": {
        "required": [
          "credentials",
          "device",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name used e.g. as email display name"
          },
          "emailAddress": {
            "type": "string",
            "description": "Used for e.g. password reset mails\n Maybe required depending on customer settings\n EmailAddress must be provided"
          },
          "language": {
            "type": "string",
            "description": "Preferred language. If not set fall back to business unit's default language\n Valid iso 639-1 language code"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "If TRUE consent to information collection is given now\n If FALSE or null no consent given now."
          },
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiUserSelfServiceCreateResponse": {
        "type": "object",
        "properties": {
          "unConfirmed": {
            "type": "boolean",
            "description": "If TRUE the user need to confirm creation bu following email/sms instructions\n If FALSE the account is good to go."
          },
          "loginResponse": {
            "$ref": "#/components/schemas/ApiLoginResponse"
          }
        }
      },
      "ApiUserSignupRequestV3": {
        "required": [
          "device",
          "displayName",
          "password"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name used e.g. as email display name"
          },
          "emailAddress": {
            "type": "string",
            "description": "Used for e.g. password reset mails\n Maybe required depending on customer settings\n EmailAddress must be provided"
          },
          "language": {
            "type": "string",
            "description": "Preferred language. If not set fall back to business unit's default language\n Valid iso 639-1 language code"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "If TRUE consent to information collection is given now\n If FALSE or null no consent given now."
          },
          "password": {
            "type": "string",
            "description": "Password."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiVerifiedResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiVideoTrackInfo": {
        "type": "object",
        "properties": {
          "targetBitrate": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiVouchersConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Vouchers enabled"
          }
        },
        "description": "Vouchers configuration"
      },
      "ApiWidevineConfigurationResponse": {
        "type": "object",
        "properties": {
          "certificateUrl": {
            "type": "string"
          }
        }
      },
      "AssetResponse": {
        "type": "object",
        "properties": {
          "studio": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "LIVE_EVENT",
              "AD",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "publicCustomData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "mrrCluster": {
            "type": "string"
          },
          "originalTitle": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionReferenceResponse"
            }
          },
          "systemTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "season": {
            "type": "string"
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "trackSizes": {
            "$ref": "#/components/schemas/TrackSizes"
          },
          "isLive": {
            "type": "boolean"
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeasonResponse"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "geoCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "adminDisplayName": {
            "type": "string"
          },
          "runtime": {
            "type": "integer",
            "format": "int32"
          },
          "localizedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "seasonId": {
            "type": "string"
          },
          "materials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialResponse"
            }
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramListEntryResponse"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "popularity": {
            "$ref": "#/components/schemas/Popularity"
          },
          "ingestFlow": {
            "type": "string"
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "overlayWidgetLayoutId": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/EventDataResponse"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "popularityScores": {
            "$ref": "#/components/schemas/Map"
          },
          "assetId": {
            "type": "string"
          },
          "channelFeatures": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIRTUAL",
                "VC_CURATED",
                "VC_PERSONALIZED",
                "VC_SCHEDULED",
                "EPG"
              ]
            }
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicationResponse"
            }
          }
        }
      },
      "AudioTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "trackInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackInfo"
            }
          }
        }
      },
      "AvailabilityKeys": {
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "availabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currentAvailabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "futureAvailabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "entitleExposure": {
            "type": "boolean"
          }
        }
      },
      "Bookmarks": {
        "type": "object",
        "properties": {
          "lastViewedOffset": {
            "type": "integer",
            "description": "Only relevant for VOD.\n This is the offset from the start off the VOD is ms",
            "format": "int64"
          },
          "liveTime": {
            "type": "integer",
            "description": "Only relevant for LIVE.\n This is the offset from the start of the stream in ms.\n Since we always use unix epoch as start for our channels this will be a UNIX timestamp when the user hit pause while watching live",
            "format": "int64"
          }
        }
      },
      "CDN": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          }
        }
      },
      "CollectionReferenceResponse": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "collectionId": {
            "type": "string"
          }
        }
      },
      "ContractRestrictions": {
        "type": "object",
        "properties": {
          "airplayEnabled": {
            "type": "boolean",
            "description": "Is apple airplay allowed or not"
          },
          "ffEnabled": {
            "type": "boolean",
            "description": "Is the user allowed to fast forward"
          },
          "maxBitrate": {
            "type": "integer",
            "description": "What is the highest bitrate that should be used",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "description": "What is the highest resolution allowed",
            "format": "int32"
          },
          "minBitrate": {
            "type": "integer",
            "description": "What is the lowest bitrate that should be used",
            "format": "int32"
          },
          "rwEnabled": {
            "type": "boolean",
            "description": "Is the user allowed to rewind"
          },
          "timeshiftEnabled": {
            "type": "boolean",
            "description": "Is the user allowed to timeshift (skip)"
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "os": {
            "type": "string"
          },
          "rights": {
            "$ref": "#/components/schemas/Rights"
          },
          "model": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "WEB",
              "MOBILE",
              "TABLET",
              "APPLE_TV",
              "SMART_TV",
              "CONSOLE",
              "STB"
            ]
          },
          "manufacturer": {
            "type": "string"
          }
        }
      },
      "Didomi": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "API Key"
          },
          "noticeId": {
            "type": "string",
            "description": "Notice Id"
          },
          "tvNoticeId": {
            "type": "string",
            "description": "TV Notice Id"
          },
          "appNoticeId": {
            "type": "string",
            "description": "App Notice Id"
          }
        },
        "description": "Didomi consent management"
      },
      "DRMLicense": {
        "type": "object",
        "properties": {
          "licenseActivation": {
            "type": "integer",
            "description": "The datetime of activation of the drm license.",
            "format": "int64"
          },
          "licenseExpiration": {
            "type": "integer",
            "description": "The datetime of expiration of the drm license.",
            "format": "int64"
          },
          "licenseExpirationReason": {
            "type": "string",
            "description": "The reason of expiration of the drm license.",
            "enum": [
              "SUCCESS",
              "NOT_ENTITLED",
              "GEO_BLOCKED",
              "DOWNLOAD_BLOCKED",
              "DEVICE_BLOCKED",
              "LICENSE_EXPIRED",
              "NOT_AVAILABLE_IN_FORMAT",
              "CONCURRENT_STREAMS_LIMIT_REACHED",
              "NOT_ENABLED",
              "GAP_IN_EPG",
              "EPG_PLAY_MAX_HOURS",
              "ANONYMOUS_IP_BLOCKED"
            ]
          },
          "com.microsoft.playready": {
            "$ref": "#/components/schemas/DrmUrls"
          },
          "com.widevine.alpha": {
            "$ref": "#/components/schemas/DrmUrls"
          },
          "com.apple.fps": {
            "$ref": "#/components/schemas/DrmUrls"
          }
        }
      },
      "DrmUrls": {
        "type": "object",
        "properties": {
          "certificateUrl": {
            "type": "string"
          },
          "licenseServerUrl": {
            "type": "string"
          }
        }
      },
      "EmptyResponse": {
        "type": "object"
      },
      "EpgInfo": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "entitlementCheck": {
            "type": "boolean"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EventDataResponse": {
        "type": "object",
        "properties": {
          "publicStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "publicEndTime": {
            "type": "string",
            "format": "date-time"
          },
          "channelId": {
            "type": "string"
          }
        }
      },
      "ExternalReferenceResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "locator": {
            "type": "string"
          }
        }
      },
      "Filters": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filters-Filter"
            }
          }
        }
      },
      "Filters-Filter": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ImageResponse": {
        "type": "object",
        "properties": {
          "orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE",
              "SQUARE",
              "UNKNOWN"
            ]
          },
          "copyright": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "caption": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "JsonAccount": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "ownerUserId": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stripeCustomerId": {
            "type": "string"
          },
          "stripeLiveMode": {
            "type": "boolean"
          },
          "preferredPaymentMethod": {
            "type": "string"
          },
          "monitoringAccount": {
            "type": "boolean"
          },
          "stripePaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StripePaymentMethod"
            }
          }
        }
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "valueNode": {
            "type": "boolean"
          },
          "containerNode": {
            "type": "boolean"
          },
          "missingNode": {
            "type": "boolean"
          },
          "array": {
            "type": "boolean"
          },
          "object": {
            "type": "boolean"
          },
          "nodeType": {
            "type": "string",
            "enum": [
              "ARRAY",
              "BINARY",
              "BOOLEAN",
              "MISSING",
              "NULL",
              "NUMBER",
              "OBJECT",
              "POJO",
              "STRING"
            ]
          },
          "pojo": {
            "type": "boolean"
          },
          "number": {
            "type": "boolean"
          },
          "integralNumber": {
            "type": "boolean"
          },
          "floatingPointNumber": {
            "type": "boolean"
          },
          "short": {
            "type": "boolean"
          },
          "int": {
            "type": "boolean"
          },
          "long": {
            "type": "boolean"
          },
          "float": {
            "type": "boolean"
          },
          "double": {
            "type": "boolean"
          },
          "bigDecimal": {
            "type": "boolean"
          },
          "bigInteger": {
            "type": "boolean"
          },
          "textual": {
            "type": "boolean"
          },
          "boolean": {
            "type": "boolean"
          },
          "null": {
            "type": "boolean"
          },
          "binary": {
            "type": "boolean"
          }
        }
      },
      "LinkedEntityResponse": {
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string"
          },
          "linkType": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          }
        }
      },
      "LocalizedDataResponse": {
        "type": "object",
        "properties": {
          "shortDescription": {
            "type": "string"
          },
          "tinyDescription": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            }
          },
          "extendedDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "sortingTitle": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "LocalizedPersonDataResponse": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "Map": {
        "type": "object",
        "description": "A key value Map"
      },
      "Marker": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "adMarkerType": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "MarkerPointResponse": {
        "type": "object",
        "properties": {
          "thumbnail": {
            "type": "boolean"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleLocalizedResponse"
            }
          },
          "type": {
            "type": "string"
          },
          "markerTimeEnd": {
            "type": "string"
          },
          "markerTime": {
            "type": "string"
          }
        }
      },
      "MaterialResponse": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "profile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "markerPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkerPointResponse"
            }
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "adMarkers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          }
        }
      },
      "MediaFormat": {
        "type": "object",
        "properties": {
          "drm": {
            "$ref": "#/components/schemas/DRMLicense"
          },
          "format": {
            "type": "string",
            "enum": [
              "DASH",
              "SMOOTHSTREAMING",
              "HLS",
              "MP4",
              "SYNDICATED",
              "MP3",
              "AAC"
            ]
          },
          "mediaLocator": {
            "type": "string"
          },
          "orgMediaLocator": {
            "type": "string"
          },
          "vastUrl": {
            "type": "string"
          },
          "liveDelay": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MediaFormatDownload": {
        "type": "object",
        "properties": {
          "drm": {
            "$ref": "#/components/schemas/DRMLicense"
          },
          "format": {
            "type": "string",
            "enum": [
              "DASH",
              "SMOOTHSTREAMING",
              "HLS",
              "MP4",
              "SYNDICATED",
              "MP3",
              "AAC"
            ]
          },
          "mediaLocator": {
            "type": "string"
          }
        }
      },
      "MediaResponse": {
        "type": "object",
        "properties": {
          "bitrates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubtitleResponse"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "format": {
            "type": "string"
          },
          "keyId": {
            "type": "string"
          },
          "mediaId": {
            "type": "string"
          },
          "mediaLocator": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "ingestionProfile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "drm": {
            "type": "string"
          },
          "programId": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Object": {
        "type": "object",
        "description": "An object"
      },
      "ParentalRatingResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "scheme": {
            "type": "string"
          },
          "rating": {
            "type": "string"
          }
        }
      },
      "PasswordTuple": {
        "type": "object",
        "properties": {
          "algorithm": {
            "$ref": "#/components/schemas/Algorithm"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PersonResponse": {
        "type": "object",
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "localizedPersonData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedPersonDataResponse"
            }
          },
          "role": {
            "type": "string"
          },
          "function": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "dateOfDeath": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Popularity": {
        "type": "object",
        "properties": {
          "week": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProgramListEntryResponse": {
        "type": "object",
        "properties": {
          "catchupBlocked": {
            "type": "boolean"
          },
          "publicStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "publicEndTime": {
            "type": "string",
            "format": "date-time"
          },
          "programId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          }
        }
      },
      "PublicationResponse": {
        "type": "object",
        "properties": {
          "toDate": {
            "type": "string",
            "format": "date-time"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "rights": {
            "$ref": "#/components/schemas/Rights"
          },
          "contractId": {
            "type": "string"
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationDate": {
            "type": "string",
            "format": "date-time"
          },
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Result": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Rights": {
        "type": "object",
        "properties": {
          "sessionShiftEnabled": {
            "type": "boolean"
          },
          "maxAds": {
            "type": "integer",
            "format": "int32"
          },
          "hDMIBlocked": {
            "type": "boolean"
          },
          "fourGBlocked": {
            "type": "boolean"
          },
          "ffEnabled": {
            "type": "boolean"
          },
          "minPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "format": "int32"
          },
          "maxPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "maxResWidth": {
            "type": "integer",
            "format": "int32"
          },
          "playCount": {
            "type": "integer",
            "format": "int32"
          },
          "jailbrokenBlocked": {
            "type": "boolean"
          },
          "maxFileSize": {
            "type": "integer",
            "format": "int64"
          },
          "amcDebugLogEnabled": {
            "type": "boolean"
          },
          "locationEnabled": {
            "type": "boolean"
          },
          "minBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "downloadBlocked": {
            "type": "boolean"
          },
          "rwEnabled": {
            "type": "boolean"
          },
          "maxBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "threeGBlocked": {
            "type": "boolean"
          },
          "airplayBlocked": {
            "type": "boolean"
          },
          "fwEnabled": {
            "type": "boolean"
          },
          "wifiBlocked": {
            "type": "boolean"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "analyticsEnabled": {
            "type": "boolean"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "streamingBlocked": {
            "type": "boolean"
          },
          "activation": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SeasonResponse": {
        "type": "object",
        "properties": {
          "episodeCount": {
            "type": "integer",
            "format": "int32"
          },
          "studio": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "tvShowId": {
            "type": "string"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "localizedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "seasonId": {
            "type": "string"
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "season": {
            "type": "string"
          },
          "startYear": {
            "type": "integer",
            "format": "int32"
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "availableDate": {
            "type": "string",
            "format": "date-time"
          },
          "endYear": {
            "type": "integer",
            "format": "int32"
          },
          "episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetResponse"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SimpleDateParam": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "originalValue": {
            "type": "string"
          }
        }
      },
      "SimpleLocalizedResponse": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageResponse"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "Sprites": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "vtt": {
            "type": "string"
          },
          "offsetInMs": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StreamInfo": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "end": {
            "type": "integer",
            "format": "int64"
          },
          "static": {
            "type": "boolean"
          },
          "live": {
            "type": "boolean"
          },
          "event": {
            "type": "boolean"
          },
          "programId": {
            "type": "string"
          },
          "nextProgramId": {
            "type": "string"
          },
          "nextAssetId": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "startPadding": {
            "type": "integer",
            "format": "int32"
          },
          "endPadding": {
            "type": "integer",
            "format": "int32"
          },
          "persistent": {
            "type": "boolean"
          },
          "timeShift": {
            "type": "boolean"
          },
          "maxResolution": {
            "type": "string"
          },
          "ssai": {
            "type": "boolean"
          }
        }
      },
      "string": {
        "type": "string",
        "description": "A string values"
      },
      "StripeCard": {
        "type": "object",
        "properties": {
          "brand": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "exp_month": {
            "type": "integer",
            "format": "int32"
          },
          "exp_year": {
            "type": "integer",
            "format": "int32"
          },
          "last4": {
            "type": "string"
          }
        }
      },
      "StripePaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "card": {
            "$ref": "#/components/schemas/StripeCard"
          }
        }
      },
      "StripeSetupIntentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        }
      },
      "SubtitleResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        }
      },
      "SubtitleTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "tagValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagValuesResponse"
            }
          },
          "type": {
            "type": "string"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TagValuesResponse": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "string"
          }
        }
      },
      "TimeResponse": {
        "required": [
          "epochMillis",
          "iso8601"
        ],
        "type": "object",
        "properties": {
          "epochMillis": {
            "type": "integer",
            "description": "Time as Epoch milliseconds",
            "format": "int64"
          },
          "iso8601": {
            "type": "string",
            "description": "Time as UTC ISO 8601",
            "format": "date-time"
          }
        }
      },
      "Track": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bitrate": {
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "hlsName": {
            "type": "string"
          },
          "dashLang": {
            "type": "string"
          },
          "dashRole": {
            "type": "string"
          },
          "dashChannels": {
            "type": "string"
          }
        }
      },
      "TrackInfo": {
        "type": "object",
        "properties": {
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "targetBitrate": {
            "type": "string"
          }
        }
      },
      "TrackSizes": {
        "type": "object",
        "properties": {
          "subtitleTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubtitleTrackInfo"
            }
          },
          "videoTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoTrackInfo"
            }
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioTrackInfo"
            }
          }
        }
      },
      "UpdatePaymentMethodRequest": {
        "type": "object",
        "properties": {
          "expiryMonth": {
            "type": "integer",
            "format": "int32"
          },
          "expiryYear": {
            "type": "integer",
            "format": "int32"
          },
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "UpdatePrederredPaymentMethodRequest": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "UPHAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "LIVE_EVENT",
              "AD",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "season": {
            "type": "string"
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "trackSizes": {
            "$ref": "#/components/schemas/TrackSizes"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "live": {
            "type": "boolean"
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeasonResponse"
            }
          },
          "geoCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "runtime": {
            "type": "integer",
            "format": "int32"
          },
          "popularityScores": {
            "$ref": "#/components/schemas/Map"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "seasonId": {
            "type": "string"
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPublication"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCollectionReference"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ValidateCredentialsRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The password to verify if it's the correct one."
          }
        }
      },
      "ValidateCredentialsResponse": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "If the password was valid or not."
          }
        }
      },
      "VideoTrack": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bitrate": {
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "width": {
            "type": "integer",
            "format": "int64"
          },
          "height": {
            "type": "integer",
            "format": "int64"
          },
          "hlsName": {
            "type": "string"
          },
          "dashLang": {
            "type": "string"
          },
          "dashRole": {
            "type": "string"
          },
          "dashChannels": {
            "type": "string"
          }
        }
      },
      "VideoTrackInfo": {
        "type": "object",
        "properties": {
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "targetBitrate": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WatchedTvShowResponse": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/UPHAsset"
          },
          "startedWatching": {
            "type": "boolean"
          },
          "lastViewedOffset": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-key": {
        "type": "http",
        "description": "Get a sessionToken with any of the [Authentication](#/Authentication) endpoints.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}