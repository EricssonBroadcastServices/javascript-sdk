<%
const { utils, route, methodName, partial, query, queryParamValue, config } = it;
const { requestBodyInfo, responseBodyInfo, specificArgNameResolver } = route;
const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
const { parameters, path, method, payload, formData, security, requestParams } = route.request;
const { type, errorType, contentTypes } = route.response;
const { HTTP_CLIENT, RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;
const routeDocs = includeFile("../base/route-docs", { config, route, utils });
const pathParams = parameters.filter(({ name }) => !["customer", "businessUnit"].includes(name));
const pathParamsNames = _.map(pathParams, "name");
let normalizeDate = false;

const isFetchTemplate = config.httpClientType === HTTP_CLIENT.FETCH;

const requestConfigParam = {
    name: "headers",
    optional: true,
    type: 'RequestParams',
    defaultValue: "{}",
}

function argToTmpl({ name, optional, type, defaultValue, description }) {
    if (name === "date" && type === "string" && description.toLowerCase().includes("yyyy-mm-dd")) {
        type = "Date";
        description = description.replace(/\s*\(?(format)?\:?\s*yyyy-mm-dd\)?\.?\s*/i, "");
        normalizeDate = true;
    }
    const comment = description ? `/** ${description} */\n` : "";
    return `${comment}${name}${!defaultValue && optional ? '?' : ''}: ${type}${defaultValue ? ` = ${defaultValue}` : ''},`;
}

const rawWrapperArgs = config.extractRequestParams ?
    _.compact([
        requestParams && {
          name: pathParams.length ? `{ ${_.join(pathParamsNames, ", ")}, ...${queryName} }` : queryName,
          optional: false,
          type: getInlineParseContent(requestParams),
        },
        ...(!requestParams ? pathParams : []),
        payload,
        requestConfigParam,
    ]) :
    _.compact([
        ...pathParams,
        query,
        payload,
        requestConfigParam,
    ])

const wrapperArgs = _
    // Sort by optionality
    .sortBy(rawWrapperArgs, [o => o.optional])
    .map(argToTmpl)
    .join("\n")


let processedPath = path.replace("${customer}", "${ctx.customer}").replace("${businessUnit}", "${ctx.businessUnit}");
if (normalizeDate) {
    processedPath = processedPath.replace("${date}", "${date.toISOString().substring(0, 10)}")
}
%>
/**
<%~ routeDocs.lines %>

 */
 export async function <%~ route.routeName.usage + (partial ? "Partial<T = any>" : "") %>(
    <%~ wrapperArgs %>
) {
    // @ts-ignore
    const ctx = (this[Symbol.for("_rbm_ctx_")] || this.context || this) as ServiceContext;
    return request<<%~ partial ? "T" : type %>>({
      method: "<%~ _.upperCase(method) %>",
      url: new URL(`<%~ processedPath %>`, ctx.baseUrl),
      headers: <%~ _.get(requestConfigParam, "name") %>,
      <% if (query) { %>query: <%~ queryParamValue %>,<% } %>
      <% if (payload?.name) { %>body: <%~ payload.name %>,<% } %>
    })
}
