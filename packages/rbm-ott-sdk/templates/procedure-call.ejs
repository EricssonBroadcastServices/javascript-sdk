<%
const { utils, route, methodName, isPartial, config } = it;
const { responseBodyInfo, specificArgNameResolver } = route;
const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
const { parameters, path, method, query, payload, formData, requestParams } = route.request;
const { type, errorType, contentTypes } = route.response;
const { HTTP_CLIENT, RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;
const routeDocs = includeFile("../base/route-docs", { config, route, utils });
const pathParams = parameters.filter(({ name }) => !["customer", "businessUnit"].includes(name));
const pathParamNames = _.map(pathParams, "name");
const body = route.requestBodyInfo || {};

let normalizeDate = false;
const paramNames = [...pathParamNames];
const defaultParams = {};
const renamedParams = {};

// The method interface flattens the params from the path, query and body, so we need to ensure we don't duplicate params
function checkParamName(name, type) {
  if (paramNames.includes(name)) {
    const paramAlias = `new${name.charAt(0).toUpperCase()}${name.slice(1)}`;
    if (paramNames.includes(paramAlias)) {
      throw new Error(`${_.upperCase(method)} parameter "${name}" in ${type} is already used for ${path} and "${paramAlias}" is also used.`);
    } else {
      console.warn(`⚠️    Duplicate ${_.upperCase(method)} parameter "${name}" in ${type} for ${path}. Assuming this is due to overwriting an index/id. Renaming to "${paramAlias}".`)
    }
    renamedParams[`new${name.charAt(0).toUpperCase()}${name.slice(1)}`] = name;
    paramNames.push(paramAlias);
    return paramAlias;
  }
  paramNames.push(name);
  return name;
}

// pass and wrap the "_data" rest argument with the default params and rename dupilcated params back.
function getRestParamsWithDefaults() {
  const defaults = Object.entries({ ...defaultParams, ...renamedParams });
  if (!defaults.length) {
    return "_data";
  }
  return `{ ${defaults.map(([k, v]) => `${k}: ${v}`).join(", ")}, ..._data }`;
}

// format argument data to interface
function argToTmpl({ name, optional, type, ...data }) {
  // Change the type for yyyy-mm-dd date params to actual javascript date (limited to path params for now)
  if (name === "date" && pathParamNames.includes(name) && type === "string" && data?.description.toLowerCase().includes("yyyy-mm-dd")) {
    type = "Date";
    data.description = data.description.replace(/\s*\(?(format)?\:?\s*yyyy-mm-dd\)?\.?\s*/i, "");
    normalizeDate = true;
  }
  const comment = includeFile('./base/object-field-jsdoc.ejs', { ...it, field: data });
  const optionalAnnotation = optional ? "?" : "";
  return `${comment}${name}${optionalAnnotation}: ${type};`;
}

if (payload && query) {
  // The logic to flatten the params assume either payload or query, not both.
  throw new Error(`"${route.namespace}.${methodName}" has both a payload and query`);
}

// We removed the fieldSet, excludeFields and includeFields query arguments for all routes,
// because with them we can not know the type we return
// For this reason we create two methods for these routes (marked with partial true)
// We also change the default for fieldSet to ALL for all of them.
const queryParams = (route.queryObjectSchema?.$parsed?.content || []).flatMap(({ name, value, type, isRequired, ...param }) => {
  if (name === "fieldSet") {
    param.default = isPartial ? "PARTIAL" : "ALL";
    defaultParams.fieldSet = JSON.stringify(param.default); // JSON.stringify to add quotes
  }
  if (isPartial || !["fieldSet", "excludeFields", "includeFields"].includes(name)) {
    return [{ name: checkParamName(name, "query"), optional: !isRequired, type: value, ...param }];
  }
  return [];
});

const bodyParams = Object.entries(body.schema?.properties || {}).map(([name, param]) => ({
  name: checkParamName(name, "body"),
  optional: !body.schema.required?.includes(name),
  ...param,
  type: param.$parsed?.content,
}));

const methodArgs = _.sortBy([
  ...pathParams,
  ...queryParams,
  ...bodyParams,
  {
    name: "headers",
    description: "Optional headers",
    type: "HeadersInit",
    optional: true
  }
], [o => o.optional])

const hasRequiredParams = methodArgs.some(({optional}) => !optional);
const methodInterface = methodArgs.map(argToTmpl).join("\n");
const explodeParams = [..._.map(pathParams, "name"), ...Object.keys(renamedParams)].map(name => `${name}, `).join("");
const restParams = (query || payload) ? ", ..._data" : "";

let processedPath = path.replace("${customer}", "${ctx.customer}").replace("${businessUnit}", "${ctx.businessUnit}");
if (normalizeDate) {
  processedPath = processedPath.replace("${date}", "${date.toISOString().substring(0, 10)}")
}
%>
/**
<%~ routeDocs.lines %>

 */
export async function <%~ methodName + (isPartial ? "<T = any>" : "") %>({<%~ explodeParams %>headers<%~ restParams %>}: {
  <%~ methodInterface %>

}<%~ !hasRequiredParams ? " = {}": "" %>) {
  // @ts-ignore
  const ctx = (this.context || this) as ServiceContext;
  return request({
    method: "<%~ _.upperCase(method) %>",
    url: `${ctx.baseUrl}<%~ processedPath %>`,
    headers,
    ctx,
    <%~ query ? `query: ${getRestParamsWithDefaults()},` : "" %>
    <%~ payload ? `body: ${getRestParamsWithDefaults()},` : "" %>
  }).then(response => response.json() as Promise<<%~ isPartial ? "T" : type %>>)
}

