{
  "openapi": "3.0.1",
  "info": {
    "title": "Exposure API Reference",
    "description": "![RedBee](https://redbee-fsly-vod.cdn.redbee.live/imagescaler002/redbee/redbeetv/configimages/d04bb721-fb45-4f9e-9216-9c3a219ef322.png?format=webp&h=50)\n\n### Red Bee Media Pulse Exposure API \n\n#### Authentication\n\nMany endpoints require an `Authorization` header:\n\n`Authorization: Bearer <sessionToken> `\n\nIn the **Swagger UI**,  use the **green Authorize** function below to set the session token.\n\nThe `<sessionToken>` is acquired using one of the Login or Session creation endpoints in the [Authentication](#/Authentication) resource section.\n\nIn some endpoints an API-key is required in the `EMP-Auth` header.\n\n`EMP-Auth: Basic <keyId:keySecret>` \n\n`<keyId:keySecret>` is to be Base64Encoded\n\nAPI keys can be created using the customer portal: [https://redbee.live/portal](https://redbee.live/portal).\n\nOlder API keys can also be used in the same way as previous.\n\n#### Data formats\n\nRequest and response bodies are always JSON encoded.\n\nIn request and response bodies, dates and times are ISO 8601 encoded, e.g. `2022-02-22T22:22:22+00:00`, while in query parameters epoch millis are used.\n\n#### Customer and Business Unit\n\nMost endpoints requires `customer` and `businessUnit` in the path. You can instantiate this documentation for a specific customer and businessUnit using this8 URL:\n\n[https://exposure.api.redbee.live/docs/customer/{customer}/businessunit/{businessUnit}/](https://exposure.api.redbee.live/docs/customer/{customer}/businessunit/{businessUnit}/)\n\n#### Eventsink\n\nThe endpoints to report Player analytics events are found here: [https://eventsink.api.redbee.live/docs](https://eventsink.api.redbee.live/docs).\n\n#### Other documentation   \n\nGeneral information of the service can be found at [https://redbee.live/docs/](https://redbee.live/docs/).\n"
  },
  "servers": [
    {
      "url": "https://exposure.api.redbee.live",
      "description": "Production"
    }
  ],
  "paths": {
    "/docs/api-docs/{api}": {
      "get": {
        "tags": [
          "open api"
        ],
        "summary": "Get API definition",
        "description": "[OpenApi 3](https://www.openapis.org/) specification of this API",
        "operationId": "getApiDocs",
        "parameters": [
          {
            "name": "api",
            "in": "path",
            "description": "Select API",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "exposure",
                "management"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/{fileId}/origin/{host}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Gets a JSON configuration file.",
        "description": "Uses the host parameter to figure out the business unit.",
        "operationId": "getConfigFileCustomDomainInPath",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The file to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "path",
            "description": "The host that will be mapped to a business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFile"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/asset/{assetId}/mrss": {
      "get": {
        "tags": [
          "mrss"
        ],
        "summary": "Get MRSS for a customer",
        "description": "Retrieve MRSS for a customer with optional parameters.",
        "operationId": "getMRssForCu",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "in": "query",
            "description": "The session parameter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useAds",
            "in": "query",
            "description": "Whether to use ads",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useBumper",
            "in": "query",
            "description": "Whether to use a bumper",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "materialId",
            "in": "query",
            "description": "The material ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/asset/{assetId}/mrss": {
      "get": {
        "tags": [
          "mrss"
        ],
        "summary": "Get MRSS for a specific business unit",
        "description": "Retrieve MRSS for a specific business unit with optional parameters.",
        "operationId": "getMRssForBu",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "in": "query",
            "description": "The session parameter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useAds",
            "in": "query",
            "description": "Whether to use ads",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useBumper",
            "in": "query",
            "description": "Whether to use a bumper",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "materialId",
            "in": "query",
            "description": "The material ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/auth/anonymous": {
      "post": {
        "tags": [
          "anonymous login"
        ],
        "summary": "Creates an anonymous session.",
        "description": "Use the v2 version.",
        "operationId": "anonymousSessionV1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAnonymousSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAnonymousSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAnonymousSessionResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login with username and password.",
        "description": "Use v3 version",
        "operationId": "loginV1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLoginRequestV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "authentication"
        ],
        "summary": "Log out.",
        "operationId": "logout_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/auth/session": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Please use v2 version.",
        "operationId": "validateSessionToken_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSessionResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "replaced by v2 post /auth/externalusersession",
        "operationId": "session",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCreateSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCreateSessionResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/config/{fileName}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Get a configuration file.",
        "operationId": "getConfigFile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFile"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "File not found": {
                    "description": "File not found",
                    "value": "{\"message\"=\"FILE_NOT_FOUND\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Lists assets.",
        "description": "Main endpoint for listing/searching for assets. Make sure that calls to this endpoint are called with a limited set of parameter permutations to allow responses to be served from a cache.",
        "operationId": "getAssets",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "MOVIE",
                "TV_SHOW",
                "EPISODE",
                "CLIP",
                "TV_CHANNEL",
                "AD",
                "LIVE_EVENT",
                "COLLECTION",
                "PODCAST",
                "PODCAST_EPISODE",
                "EVENT",
                "OTHER"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to filter by. In the elasticsearch query string query format, I.E: \"tagsIds:action AND localized.en-us.title:armageddon\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "playableWithinHours",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "WEB",
                "MOBILE",
                "TABLET",
                "APPLE_TV",
                "SMART_TV",
                "CONSOLE",
                "STB"
              ]
            }
          },
          {
            "name": "deviceQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publicationQuery",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "missingFieldsFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programsOnChannelIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeTvShow",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "publicationStartsWithinDays",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "publicationEndsWithinDays",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetList"
                }
              }
            }
          },
          "400": {
            "description": "User error.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Invalid query.": {
                    "description": "Invalid query.",
                    "value": "{\"message\"=\"INVALID_QUERY\"}"
                  },
                  "Unknown business unit": {
                    "description": "Business unit not found.",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get an asset by asset id or slug.",
        "operationId": "getAsset",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSeasons",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Asset not found": {
                    "description": "Asset not found",
                    "value": "{\"message\"=\"UNKNOWN_ASSET\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/collectionentries": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get the entries of a collection.",
        "operationId": "getCollectionEntries",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "Collection id. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "WEB",
                "MOBILE",
                "TABLET",
                "APPLE_TV",
                "SMART_TV",
                "CONSOLE",
                "STB"
              ]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/next": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get the next episode of a tv show.",
        "operationId": "getNextEpisode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "No next episode.": {
                    "description": "No next episode.",
                    "value": "{\"message\"=\"NO_EPISODE_FOUND\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/previous": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get the previous episode of a tv show.",
        "operationId": "getPreviousEpisode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "No previous episode.": {
                    "description": "No previous episode.",
                    "value": "{\"message\"=\"NO_EPISODE_FOUND\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/season": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get seasons of a tv show.",
        "operationId": "getSeasonsForTvShow",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeasonList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Unknown season": {
                    "description": "Unknown season",
                    "value": "{\"message\"=\"UNKNOWN_SEASON\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/season/{season}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get a season of a tv show.",
        "operationId": "getSeason",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "season",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeason"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Unknown season": {
                    "description": "Unknown season",
                    "value": "{\"message\"=\"UNKNOWN_SEASON\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/season/{season}/episode": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get episodes for a season.",
        "operationId": "getEpisodes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "season",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Unknown season": {
                    "description": "Unknown season",
                    "value": "{\"message\"=\"UNKNOWN_SEASON\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{assetId}/thumbnail": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get a thumbnail for an asset.",
        "description": "The thumbnail will be generated from the video belonging to the asset and based on  provided time.  This endpoint will always return a 307 redirect to another url where the thumbnail is actually available.",
        "operationId": "getAssetThumbnail",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to use when creating the thumbnail. It can have two different formats. It can be a wall clock time like '2021-02-02T10:53:35.400Z'. This assumes that the asset has a wall clock time. It can also be a duration, like PT30M20S, and then it will be used as an actual time in th video.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "w",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "h",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful."
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Business unit not found.",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Asset not found": {
                    "description": "Asset not found",
                    "value": "{\"message\"=\"UNKNOWN_ASSET\"}"
                  },
                  "Invalid duration": {
                    "description": "The provided time is not a valid duration.",
                    "value": "{\"message\"=\"INVALID_TIME_DURATION\"}"
                  },
                  "Invalid wall time clock time": {
                    "description": "The provided time is not a valid wall clock time.",
                    "value": "{\"message\"=\"INVALID_TIME_WALL_CLOCK\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{collectionId}/collectionentries/{referenceEntryId}/next": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get the next entry of a collection.",
        "operationId": "getNextCollectionEntry",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceEntryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "WEB",
                "MOBILE",
                "TABLET",
                "APPLE_TV",
                "SMART_TV",
                "CONSOLE",
                "STB"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "No next entry found.": {
                    "description": "No next entry found.",
                    "value": "{\"message\"=\"NO_ENTRY_FOUND\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/asset/{collectionId}/collectionentries/{referenceEntryId}/previous": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "Get the previous entry of a collection.",
        "operationId": "getPreviousCollectionEntry",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceEntryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "WEB",
                "MOBILE",
                "TABLET",
                "APPLE_TV",
                "SMART_TV",
                "CONSOLE",
                "STB"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAsset"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "No previous entry found.": {
                    "description": "No previous entry found.",
                    "value": "{\"message\"=\"NO_ENTRY_FOUND\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/autocomplete/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Does prefix autocomplete for a query.",
        "operationId": "autocomplete",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/epg/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Searches the epg for a query.",
        "operationId": "searchEpg",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "The query to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The millis to get from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The millis to get to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The locale to search in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The sort parameter in the format of first,-second. Defaults to sorting by\n                       relevance.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "PARTIAL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEpgSearchHits"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Title search V1.",
        "operationId": "search",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Comma separated list of types.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/search/suggestions/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Gets spelling suggestions for a key.",
        "operationId": "getSuggestions",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/season": {
      "get": {
        "tags": [
          "season"
        ],
        "operationId": "getSeasons",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "seasonIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ParentalRatingsFilter"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeasonList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/content/season/{seasonId}": {
      "get": {
        "tags": [
          "season"
        ],
        "summary": "Get a season by id or slug.",
        "operationId": "getSeasonById",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEpisodes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSeason"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Unknown season": {
                    "description": "Unknown season",
                    "value": "{\"message\"=\"UNKNOWN_SEASON\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/document": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "Get Document.",
        "description": "Get the requested document.",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "end_user_consent",
                "end_user_cookie_policy",
                "end_user_privacy_policy",
                "end_user_terms_and_conditions",
                "custom_document",
                "END_USER_CONSENT",
                "END_USER_COOKIE_POLICY",
                "END_USER_PRIVACY_POLICY",
                "END_USER_TERMS_AND_CONDITIONS",
                "CUSTOM_DOCUMENT"
              ]
            }
          },
          {
            "name": "customDocumentName",
            "in": "query",
            "description": "Custom name if documentId == custom_document",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferredLanguage",
            "in": "query",
            "description": "Use user language. If not stated system default is used.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiHtmlDocument"
                }
              }
            }
          },
          "4xx": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "The the business unit cannot be found.": {
                    "description": "The the business unit cannot be found.",
                    "value": "{\n  \"httpCode\" : 404,\n  \"message\" : \"UNKNOWN_BUSINESS_UNIT\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/epg/{channelId}/onnow": {
      "get": {
        "tags": [
          "epg"
        ],
        "operationId": "onNow",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelEPGResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/export/asset": {
      "get": {
        "tags": [
          "xport"
        ],
        "summary": "Get all assets.",
        "description": "This request is privileged and thus needs server to server authentication.",
        "operationId": "exportAssets",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "description": "The asset type to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "MOVIE",
                "TV_SHOW",
                "EPISODE",
                "CLIP",
                "TV_CHANNEL",
                "AD",
                "LIVE_EVENT",
                "COLLECTION",
                "PODCAST",
                "PODCAST_EPISODE",
                "EVENT",
                "OTHER"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Created time (epoch millis) to start listing from.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "description": "The pre-shared API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetListBulk"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/location": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Get location.",
        "description": "Get location information based on caller IP-address.",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Referer",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/mrss/adrolls": {
      "get": {
        "tags": [
          "mrss"
        ],
        "summary": "Get AdRoll configuration",
        "description": "Retrieve AdRoll configuration for a specific business unit.",
        "operationId": "getAdRollConfig",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The tenant ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "The channel ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdRollConfig"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Get key value pair of preferences for a user.",
        "operationId": "getPreferences",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserPreferenceResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "preferences"
        ],
        "summary": "Set key value pair of preferences for a user.",
        "operationId": "setPreferences",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSetUserPreferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "TOO_MANY_PREFERENCES": {
                    "description": "TOO_MANY_PREFERENCES",
                    "value": "{\"message\"=\"TOO_MANY_PREFERENCES\"}"
                  },
                  "TOO_LONG_PREFERENCES": {
                    "description": "TOO_LONG_PREFERENCES",
                    "value": "{\"message\"=\"TOO_LONG_PREFERENCES\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/asset": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Gets an asset list for a user.",
        "operationId": "getAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAssetListItemResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "UNKNOWN_LIST": {
                    "description": "UNKNOWN_LIST",
                    "value": "{\"message\"=\"UNKNOWN_LIST\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/asset/{assetId}": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Gets an item from the asset list.",
        "operationId": "getFromAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAssetListItemResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "UNKNOWN_LIST": {
                    "description": "UNKNOWN_LIST",
                    "value": "{\"message\"=\"UNKNOWN_LIST\"}"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "preferences"
        ],
        "summary": "Adds an item to the asset list",
        "operationId": "addToAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAssetListItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "TOO_MANY_PREFERENCES": {
                    "description": "TOO_MANY_PREFERENCES",
                    "value": "{\"message\"=\"TOO_MANY_PREFERENCES\"}"
                  },
                  "TOO_LONG_PREFERENCES": {
                    "description": "TOO_LONG_PREFERENCES",
                    "value": "{\"message\"=\"TOO_LONG_PREFERENCES\"}"
                  },
                  "Asset not found": {
                    "description": "Asset not found",
                    "value": "{\"message\"=\"UNKNOWN_ASSET\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "UNKNOWN_LIST": {
                    "description": "UNKNOWN_LIST",
                    "value": "{\"message\"=\"UNKNOWN_LIST\"}"
                  },
                  "Asset not found": {
                    "description": "Asset not found",
                    "value": "{\"message\"=\"UNKNOWN_ASSET\"}"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Limit reached.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "LIMIT_REACHED": {
                    "description": "LIMIT_REACHED",
                    "value": "{\"message\"=\"LIMIT_REACHED\"}"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "preferences"
        ],
        "summary": "Deletes an item from the asset list.",
        "operationId": "deleteFromAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "UNKNOWN_LIST": {
                    "description": "UNKNOWN_LIST",
                    "value": "{\"message\"=\"UNKNOWN_LIST\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/tag": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Get a tag list for a user.",
        "operationId": "getTagList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPreferencesListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "UNKNOWN_LIST": {
                    "description": "UNKNOWN_LIST",
                    "value": "{\"message\"=\"UNKNOWN_LIST\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/tag/{id}": {
      "post": {
        "tags": [
          "preferences"
        ],
        "summary": "Adds an item to a list.",
        "operationId": "addToList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The list item id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAssetListItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "403": {
            "description": "TOO_MANY_PREFERENCES. If the body exceed the configured max number of preferences.<br>TOO_LONG_PREFERENCES. If any item in the body is longer than the max configured length.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          },
          "409": {
            "description": "LIMIT_REACHED. If the maximum number of items in the list have been reached.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request",
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "preferences"
        ],
        "summary": "Deletes an item from a list.",
        "operationId": "deleteFromList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "description": "The name of the list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "NO_SESSION_TOKEN. If the session token is missing.<br>INVALID_SESSION_TOKEN. If the session token is provided but not valid.",
            "content": {}
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT. If the business unit is not found.<br>UNKNOWN_LIST. If the list is not configured.",
            "content": {}
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/preferences/list/{list}/tag/{tagId}": {
      "post": {
        "tags": [
          "preferences"
        ],
        "summary": "Add a tag to a list.",
        "operationId": "addToTagList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAssetListItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "UNKNOWN_LIST": {
                    "description": "UNKNOWN_LIST",
                    "value": "{\"message\"=\"UNKNOWN_LIST\"}"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "preferences"
        ],
        "summary": "Deletes an item from a list.",
        "operationId": "deleteFromTagList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "UNKNOWN_LIST": {
                    "description": "UNKNOWN_LIST",
                    "value": "{\"message\"=\"UNKNOWN_LIST\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/tag": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "List tags.",
        "operationId": "listTags",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTagList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Tag not found": {
                    "description": "Tag not found",
                    "value": "{\"message\"=\"UNKNOWN_TAG\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/tag/{tagId}": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Get tag.",
        "operationId": "getTagById",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTagType"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Tag not found": {
                    "description": "Tag not found",
                    "value": "{\"message\"=\"UNKNOWN_TAG\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/tag/asset": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Lists all unique tags of a given scheme that are referenced by at least one asset.",
        "operationId": "getUniqueTagsFromAssets",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "MOVIE",
                "TV_SHOW",
                "EPISODE",
                "CLIP",
                "TV_CHANNEL",
                "AD",
                "LIVE_EVENT",
                "COLLECTION",
                "PODCAST",
                "PODCAST_EPISODE",
                "EVENT",
                "OTHER"
              ]
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ParentalRatingsFilter"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTagList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Tag not found": {
                    "description": "Tag not found",
                    "value": "{\"message\"=\"UNKNOWN_TAG\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/time": {
      "get": {
        "tags": [
          "time"
        ],
        "summary": "Get time.",
        "description": "Gets the current server UTC time.",
        "operationId": "time_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeResponse"
                }
              }
            }
          },
          "4xx": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "The the business unit cannot be found.": {
                    "description": "The the business unit cannot be found.",
                    "value": "{\n  \"httpCode\" : 404,\n  \"message\" : \"UNKNOWN_BUSINESS_UNIT\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/userplayhistory/continue/tvshow/{tvshowid}": {
      "get": {
        "tags": [
          "userplayhistory"
        ],
        "summary": "EXPERIMENTAL Get the episode in progress",
        "operationId": "getEpisodeInProgress",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tvshowid",
            "in": "path",
            "description": "The tvShowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/WatchedTvShowResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization Error:\nNO_SESSION_TOKEN - If the session token is missing\nINVALID_SESSION_TOKEN - If the session token is provided but not valid",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          },
          "404": {
            "description": "Not found: UNKNOWN_BUSINESS_UNIT - If the business unit is not found.UNKNOWN_ASSET. If the asset with id tvShowId cannot be found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/userplayhistory/lastviewed/asset/{assetId}": {
      "delete": {
        "tags": [
          "userplayhistory"
        ],
        "summary": "Deletes an asset from the last viewed asset list",
        "operationId": "deleteFromLastViewedAssetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authorization Error:\nNO_SESSION_TOKEN - If the session token is missing\nINVALID_SESSION_TOKEN - If the session token is provided but not valid",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT - If the business unit is not found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/businessunit/{businessUnit}/userplayhistory/lastviewedoffset": {
      "get": {
        "tags": [
          "userplayhistory"
        ],
        "summary": "Gets last viewed offset for assets for a user",
        "operationId": "getLastViewedOffsetList",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Return all bookmarks for the account and not only the ones for current user. Default value false.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "name": "assetIds",
            "in": "query",
            "description": "The asset ids to filter by",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "required": false,
            "schema": {
              "type": "string",
              "default": "200"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLastViewedOffsetList"
                }
              }
            }
          },
          "401": {
            "description": "Authorization Error:\nNO_SESSION_TOKEN - If the session token is missing\nINVALID_SESSION_TOKEN - If the session token is provided but not valid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT - If the business unit is not found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v1/customer/{customer}/config": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Lists existing configuration files on customer level.",
        "operationId": "getConfigFilesCu",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFilesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customer}/config/{fileName}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Get a customer level configuration file.",
        "operationId": "getConfigFileCu",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigFile"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "File not found": {
                    "description": "File not found",
                    "value": "{\"message\"=\"FILE_NOT_FOUND\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/channel/onnow": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Get active channel statuses",
        "description": "Status of a channel includes whether it is available (in the case of virtual channels) and the currently playing assets. This endpoint only considers active channels.",
        "operationId": "getActiveChannels",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minutesForward",
            "in": "query",
            "description": "Include future assets that start sooner than this many minutes ahead. Default value 0 returns only the currently playing asset of each channel",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of channels per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number. Currently only supports one page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sortingLocale",
            "in": "query",
            "description": "Sort by the sorting title property of the given locale",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiActiveChannels"
                }
              }
            }
          },
          "404": {
            "description": "Not found:\nUNKNOWN_BUSINESS_UNIT - If the business unit is not found.\nCHANNEL_STATUS_NOT_FOUND - Channel is personalized or the channel type could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/channel/onnow/{channelId}": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets the status of a specific channel",
        "operationId": "getChannelStatus",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minutesForward",
            "in": "query",
            "description": "Include future assets that start sooner than this many minutes ahead. Default value 0 returns only the currently playing asset of each channel",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelStatus"
                }
              }
            }
          },
          "404": {
            "description": "Not found:\nUNKNOWN_BUSINESS_UNIT - If the business unit is not found.\nCHANNEL_STATUS_NOT_FOUND - Channel is personalized or the channel type could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/recommend/continue": {
      "get": {
        "tags": [
          "recommender"
        ],
        "summary": "Get list of assets to continue watching",
        "operationId": "continueWatching",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetTypes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The authorization header in the format 'Bearer sessionToken'",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiContinueUph2Assets"
                }
              }
            }
          },
          "401": {
            "description": "Authorization Error:\nNO_SESSION_TOKEN - If the session token is missing\nINVALID_SESSION_TOKEN - If the session token is provided but not valid.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT - If the business unit is not found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/recommend/user": {
      "get": {
        "tags": [
          "recommender"
        ],
        "summary": "Get recommendations for a user",
        "operationId": "getUserRecommendations",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ParentalRatingsFilter"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Only include assets not geoblocked by given country",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The authorization header in the format 'Bearer sessionToken'",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRecommendedAssets"
                }
              }
            }
          },
          "401": {
            "description": "Authorization Error:\nNO_SESSION_TOKEN - If the session token is missing\nINVALID_SESSION_TOKEN - If the session token is provided but not valid",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT - If the business unit is not found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/recommend/watchNext/{assetId}": {
      "get": {
        "tags": [
          "recommender"
        ],
        "summary": "Watch next",
        "description": "Gets a list of assets to watch next in for example a playlist. Not depending on user. Can be used for not logged in.",
        "operationId": "getWatchNext",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The assetId that you have just played",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "If we should only return assets that have publications on this service",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ParentalRatingsFilter"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Only include assets not geoblocked by given country",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRecommendedWatchNext"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_BUSINESS_UNIT - If the business unit is not found.",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer/{customerUnit}/businessunit/{businessUnit}/systemConfig": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get system configuration for a business unit.",
        "operationId": "getSystemConfig",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSystemConfig"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/adobePrimetimeLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login an Adobe Primetime media token.",
        "operationId": "loginPrimetime",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPrimetimeAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/anonymous": {
      "post": {
        "tags": [
          "anonymous login"
        ],
        "summary": "Creates an anonymous session.",
        "description": "May provide anonymous access to the service.",
        "operationId": "anonymousSessionV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAnonymousSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAnonymousSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAnonymousSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/externalusersession": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Creates a session for an external user - a user known only by the caller",
        "description": "This request is privileged and thus needs server to server authentication.",
        "operationId": "externalUserSession",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiExternalUserSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCreateSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/firebaseLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login using a Firebase access token.",
        "operationId": "loginFirebase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFirebaseAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/gigyaLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login using a Gigya JWT.",
        "operationId": "loginGigya",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGigyaAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login with username and password.",
        "description": "Use the v2 version.",
        "operationId": "loginV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "authentication"
        ],
        "summary": "Log out.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromAllDevice",
            "in": "query",
            "description": "If true all sessions are ended.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oauth/auth": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Part of OAuth Login",
        "description": "Limited availability, not for general use.",
        "operationId": "getOauthAuth",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oauth/redir": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Part of OAuth Login",
        "description": "Limited availability, not for general use.",
        "operationId": "getOauthRedir",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oauthLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login using OAuth.",
        "description": "Limited availability, not for general use.",
        "operationId": "loginOauth",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiOauthAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/oidcLogin": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Performs a login using either: * an ID token (obtained using the Implicit flow with Form Post) * or a code and an optional code_verifier (obtained using the Authorization Code with PKCE flow)",
        "operationId": "loginOpenIdConnect",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiOidcAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "MISSING_TOKEN": {
                    "description": "Either jwt or code must be set in the request payload"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/session": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Validate session.",
        "description": "Checks if the session is still valid. If the session is marked \"overTheDeviceLimit\" ths session is valid but may only be used to list and delete devices. By deleting another device the \"overTheDeviceLimit\" will be cleared.",
        "operationId": "validateSessionToken",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSessionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Creates a session for a API-Key user",
        "description": "This request is privileged and thus needs server to server authentication.",
        "operationId": "sessionV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiApiKeyUserSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/auth/session/delete": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Deletes all sessions created by or for a user.",
        "description": "This request is privileged and thus needs server to server authentication.",
        "operationId": "deleteSessionsV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EMP-Auth",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDeleteUsersSessionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/config/{fileName}": {
      "get": {
        "tags": [
          "customerconfig"
        ],
        "summary": "Get the content of a configuration file.",
        "operationId": "getConfigContent",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonNode"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "File not found": {
                    "description": "File not found",
                    "value": "{\"message\"=\"FILE_NOT_FOUND\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/content/search/query": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "EXPERIMENTAL - List assets - same query params as search",
        "operationId": "searchV2NoQuery",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The comma separates list of asset types to filter on.",
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tag ids to filter on.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "durationLower",
            "in": "query",
            "description": "Filter for material duration. Lower limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "durationUpper",
            "in": "query",
            "description": "Filter for material duration. Upper limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtitles",
            "in": "query",
            "description": "Subtitle filter. Comma separated list of languages.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "Filter on parental rating (format of COUNTRY:RATING,COUNTRY:RATING2)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "description": "If we should only return assets that are at the moment published",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "description": "Filter on allowed in country.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyDownloadable",
            "in": "query",
            "description": "Only return assets that has downloadBlocked set to false in a publication.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "The set of fields to include by default.",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of fields to add to the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of fields to remove from the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/content/search/query/": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Search V2 with empty query",
        "description": "I.e. list assets with same query params as search.",
        "operationId": "searchV2NoQuery",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "durationLower",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "durationUpper",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtitles",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyDownloadable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/content/search/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Search V2",
        "description": "Free text query in selected fields in assets.",
        "operationId": "searchV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Comma separated list of types.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "durationLower",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "durationUpper",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtitles",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyDownloadable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/device": {
      "get": {
        "tags": [
          "devices"
        ],
        "summary": "List devices",
        "operationId": "getDevices",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDevicesResponseV2"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/device/{deviceId}": {
      "delete": {
        "tags": [
          "devices"
        ],
        "summary": "Delete another device.",
        "description": "Log out from another specified device.",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/download": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Download Asset",
        "description": "Initiate the download of an asset for offline play.",
        "operationId": "download",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "Is Proxy. FOR INTERNAL USE",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Download"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadcompleted": {
      "post": {
        "tags": [
          "downloads"
        ],
        "summary": "Register a completed download of an asset",
        "description": "Register that a download of an asset has been completed.",
        "operationId": "downloadCompleted",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDownload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadinfo": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get download info",
        "description": "Retrieve download information for a specific asset.",
        "operationId": "downloadInfo",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "Is Proxy. FOR INTERNAL USE",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadrenewed": {
      "post": {
        "tags": [
          "downloads"
        ],
        "summary": "Register license renewed for a downloaded asset",
        "description": "Register that a downloaded asset's license has been renewed.",
        "operationId": "downloadRenewed",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDownload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloads": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get information for all downloads for an asset done by an account",
        "description": "Retrieve information about all downloads for a specific asset completed by an account.",
        "operationId": "getDownloadsForAsset",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDownload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "downloads"
        ],
        "summary": "Unregister all downloads for an asset done by an account",
        "description": "Unregister all downloads for a specific asset completed by an account.",
        "operationId": "deleteDownloadsForAsset",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/downloadverified": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Verify a download",
        "description": "Verifies that an asset is still valid for offline play and get when publication ends.",
        "operationId": "downloadVerified",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "Is Proxy. FOR INTERNAL USE",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadVerified"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/entitle": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "Entitle a user.",
        "description": "Entitle the user to access the asset",
        "operationId": "entitle",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "The payment provider",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "Is Proxy. FOR INTERNAL USE",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "INVALID_JSON": {
                    "description": "INVALID_JSON",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"INVALID_JSON\"\n}"
                  },
                  "JSON_DOES_NOT_FOLLOW_CONTRACT": {
                    "description": "JSON_DOES_NOT_FOLLOW_CONTRACT",
                    "value": "{\n  \"httpCode\" : 422,\n  \"message\" : \"JSON_DOES_NOT_FOLLOW_CONTRACT\"\n}"
                  },
                  "NO_SESSION_TOKEN": {
                    "description": "NO_SESSION_TOKEN",
                    "value": "{\n  \"httpCode\" : 401,\n  \"message\" : \"NO_SESSION_TOKEN\"\n}"
                  },
                  "INVALID_SESSION_TOKEN": {
                    "description": "INVALID_SESSION_TOKEN",
                    "value": "{\n  \"httpCode\" : 401,\n  \"message\" : \"INVALID_SESSION_TOKEN\"\n}"
                  },
                  "FORBIDDEN": {
                    "description": "FORBIDDEN",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"FORBIDDEN\"\n}"
                  },
                  "NOT_AVAILABLE": {
                    "description": "NOT_AVAILABLE",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"NOT_AVAILABLE\"\n}"
                  },
                  "BLOCKED": {
                    "description": "BLOCKED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"BLOCKED\"\n}"
                  },
                  "GEO_BLOCKED": {
                    "description": "GEO_BLOCKED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"GEO_BLOCKED\"\n}"
                  },
                  "CONCURRENT_STREAMS_LIMIT_REACHED": {
                    "description": "CONCURRENT_STREAMS_LIMIT_REACHED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"CONCURRENT_STREAMS_LIMIT_REACHED\"\n}"
                  },
                  "NOT_PUBLISHED": {
                    "description": "NOT_PUBLISHED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"NOT_PUBLISHED\"\n}"
                  },
                  "NOT_ENTITLED": {
                    "description": "NOT_ENTITLED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"NOT_ENTITLED\"\n}"
                  },
                  "UNKNOWN_BUSINESS_UNIT": {
                    "description": "UNKNOWN_BUSINESS_UNIT",
                    "value": "{\n  \"httpCode\" : 404,\n  \"message\" : \"UNKNOWN_BUSINESS_UNIT\"\n}"
                  },
                  "UNKNOWN_ASSET": {
                    "description": "UNKNOWN_ASSET",
                    "value": "{\n  \"httpCode\" : 404,\n  \"message\" : \"UNKNOWN_ASSET\"\n}"
                  },
                  "INTERNAL_TIMEOUT": {
                    "description": "INTERNAL_TIMEOUT",
                    "value": "{\n  \"httpCode\" : 500,\n  \"message\" : \"INTERNAL_TIMEOUT\"\n}"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/{assetId}/play": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "Do a play call.",
        "description": "If the entitlement checks pass it will return the information needed to initialize the player.",
        "operationId": "play",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The id of the asset to play",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Adobe-Primetime-MediaToken",
            "in": "header",
            "description": "Adobe primetime short-lived media token. Used for verification against Adobe Primetime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "User agent",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Origin",
            "in": "header",
            "description": "Origin",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "persistent",
            "in": "query",
            "description": "To be used if we can deliver both persistent and non-persistent licenses for one business unit",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "timeShift",
            "in": "query",
            "description": "Use this if we can deliver a time shift for smooth. DO NOT USE unless you are told so.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "live",
            "in": "query",
            "description": "Use this if you really want to play live and do not care about the EPG even if one exists. DO NOT USE unless you are told so.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxResolution",
            "in": "query",
            "description": "Use this to filter out higher bitrates. Note that this requires backend configuration for your organization.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audioOnly",
            "in": "query",
            "description": "Use this with value true if you only want to include audio tracks in the response.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxFrameRate",
            "in": "query",
            "description": "Use this if you want to include only video tracks with a max frame rate.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "forwardedFor",
            "in": "query",
            "description": "Provides the end user IP if there is a proxy in between.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Use this to provide a start time when playing a channel. Should be used when there is no EPG available. Format: ISO_DATE_TIME example 2021-01-31T00:00:00Z. Experimental, do not use unless told so.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "Use this to provide an end time when playing a channel. Should be used when there is no EPG available. Format: ISO_DATE_TIME example 2021-01-31T00:00:00Z. Experimental, do not use unless told so.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "Provide GPS-based geo-location for location-based ad targeting (optional) e.g. latitude=33.543682. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Provide GPS-based geo-location for location-based ad targeting (optional) e.g. longitude=-86.779633. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "consent",
            "in": "query",
            "description": "A consent string passed from various Consent Management Platforms (CMP’s). Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceMake",
            "in": "query",
            "description": "Manufacturer of device such as Apple or Samsung. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gdprOptin",
            "in": "query",
            "description": "DEPRECATED: gdpr is now set automatically. A flag for European Union traffic consenting to advertising. Used for SSAI.",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mute",
            "in": "query",
            "description": "Indicate whether the player is muted or not. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ifa",
            "in": "query",
            "description": "User device ID. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ifaType",
            "in": "query",
            "description": "Ifa type. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "User id. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Screen Resolution (width). Used for SSAI.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Screen Resolution (height). Used for SSAI.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "appBundle",
            "in": "query",
            "description": "App bundle. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appName",
            "in": "query",
            "description": "App name. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appStoreUrl",
            "in": "query",
            "description": "App store URL. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageUrl",
            "in": "query",
            "description": "Page Url. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Channel Partner. Domain where player is embedded. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autoplay",
            "in": "query",
            "description": "Auto play. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deviceType",
            "in": "query",
            "description": "Device type. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceModel",
            "in": "query",
            "description": "Device model. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccpaConsent",
            "in": "query",
            "description": "A flag for US consent for advertising. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "supportedFormats",
            "in": "query",
            "description": "A comma-separated priority list for supported formats for playback, first value has the highest priority. Supported values are hls, dash, mss, mp3, aac. First value will always be used for SSAI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supportedDrms",
            "in": "query",
            "description": "A comma-separated list for supported DRM providers for playback. Supported values are widevine, fairplay, playready.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limitAdTracking",
            "in": "query",
            "description": "True if the user opted-out of ad tracking. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "materialProfile",
            "in": "query",
            "description": "Provide material profile if you want to play a version used for a specific purpose. You need to know what profile to use.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custom",
            "in": "query",
            "description": "A comma-separated list for sending additional custom non-SDK supported SSAI parameters. Used for SSAI.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time in the number of seconds in the playback manifest.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End time in the number of seconds in the playback manifest.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "INVALID_JSON": {
                    "description": "INVALID_JSON",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"INVALID_JSON\"\n}"
                  },
                  "INVALID_START_TIME": {
                    "description": "INVALID_START_TIME",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"INVALID_START_TIME\"\n}"
                  },
                  "INVALID_END_TIME": {
                    "description": "INVALID_END_TIME",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"INVALID_END_TIME\"\n}"
                  },
                  "END_TIME_WITHOUT_START_TIME_IS_NOT_ALLOWED": {
                    "description": "END_TIME_WITHOUT_START_TIME_IS_NOT_ALLOWED",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"END_TIME_WITHOUT_START_TIME_IS_NOT_ALLOWED\"\n}"
                  },
                  "START_TIME_MUST_BE_BEFORE_END_TIME": {
                    "description": "START_TIME_MUST_BE_BEFORE_END_TIME",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"START_TIME_MUST_BE_BEFORE_END_TIME\"\n}"
                  },
                  "START_TIME_OLD": {
                    "description": "START_TIME_OLD",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"START_TIME_OLD\"\n}"
                  },
                  "START_TIME_OLD_WHEN_NO_END_TIME": {
                    "description": "START_TIME_OLD_WHEN_NO_END_TIME",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"START_TIME_OLD_WHEN_NO_END_TIME\"\n}"
                  },
                  "START_TIME_IN_THE_FUTURE": {
                    "description": "START_TIME_IN_THE_FUTURE",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"START_TIME_IN_THE_FUTURE\"\n}"
                  },
                  "START_END_TIME_DURATION_TOO_LONG": {
                    "description": "START_END_TIME_DURATION_TOO_LONG",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"START_END_TIME_DURATION_TOO_LONG\"\n}"
                  },
                  "JSON_DOES_NOT_FOLLOW_CONTRACT": {
                    "description": "JSON_DOES_NOT_FOLLOW_CONTRACT",
                    "value": "{\n  \"httpCode\" : 422,\n  \"message\" : \"JSON_DOES_NOT_FOLLOW_CONTRACT\"\n}"
                  },
                  "NO_SESSION_TOKEN": {
                    "description": "NO_SESSION_TOKEN",
                    "value": "{\n  \"httpCode\" : 401,\n  \"message\" : \"NO_SESSION_TOKEN\"\n}"
                  },
                  "INVALID_SESSION_TOKEN": {
                    "description": "INVALID_SESSION_TOKEN",
                    "value": "{\n  \"httpCode\" : 401,\n  \"message\" : \"INVALID_SESSION_TOKEN\"\n}"
                  },
                  "FORBIDDEN": {
                    "description": "FORBIDDEN",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"FORBIDDEN\"\n}"
                  },
                  "NOT_AVAILABLE": {
                    "description": "NOT_AVAILABLE",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"NOT_AVAILABLE\"\n}"
                  },
                  "BLOCKED": {
                    "description": "BLOCKED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"BLOCKED\"\n}"
                  },
                  "GEO_BLOCKED": {
                    "description": "GEO_BLOCKED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"GEO_BLOCKED\"\n}"
                  },
                  "CONCURRENT_STREAMS_LIMIT_REACHED": {
                    "description": "CONCURRENT_STREAMS_LIMIT_REACHED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"CONCURRENT_STREAMS_LIMIT_REACHED\"\n}"
                  },
                  "NOT_PUBLISHED": {
                    "description": "NOT_PUBLISHED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"NOT_PUBLISHED\"\n}"
                  },
                  "NOT_ENTITLED": {
                    "description": "NOT_ENTITLED",
                    "value": "{\n  \"httpCode\" : 403,\n  \"message\" : \"NOT_ENTITLED\"\n}"
                  },
                  "INVALID_ADOBE_AUTH": {
                    "description": "INVALID_ADOBE_AUTH",
                    "value": "{\n  \"httpCode\" : 401,\n  \"message\" : \"INVALID_ADOBE_AUTH\"\n}"
                  },
                  "UNKNOWN_BUSINESS_UNIT": {
                    "description": "UNKNOWN_BUSINESS_UNIT",
                    "value": "{\n  \"httpCode\" : 404,\n  \"message\" : \"UNKNOWN_BUSINESS_UNIT\"\n}"
                  },
                  "UNKNOWN_ASSET": {
                    "description": "UNKNOWN_ASSET",
                    "value": "{\n  \"httpCode\" : 404,\n  \"message\" : \"UNKNOWN_ASSET\"\n}"
                  },
                  "INTERNAL_TIMEOUT": {
                    "description": "INTERNAL_TIMEOUT",
                    "value": "{\n  \"httpCode\" : 500,\n  \"message\" : \"INTERNAL_TIMEOUT\"\n}"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/accountproduct": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "Get account products for a given organization unit",
        "description": "Returns two lists: 'entitled' and 'notEntitled' products for a given organization unit. The 'entitled' list contains products the account has access to, while the 'notEntitled' list contains products the account has no access to.",
        "operationId": "accountProducts",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The authorization header in the format 'Bearer sessionToken'",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountProducts"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/availabilitykey": {
      "get": {
        "tags": [
          "entitlements"
        ],
        "summary": "Get availability keys for a given account",
        "description": "This endpoint retrieves availability keys for a given account.",
        "operationId": "availabilityKeys",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "The time to be used when checking entitlement.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityKeys"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/entitlement/downloads": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get information about all downloads done by an account",
        "description": "Retrieve information about all downloads completed by an account.",
        "operationId": "getDownloadsForAccount",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDownload"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "downloads"
        ],
        "summary": "Unregister all downloads done by an account",
        "description": "Unregister all downloads completed by an account.",
        "operationId": "deleteDownloadsForAccount",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/epg/{channelId}/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get epg data for a channel.",
        "description": "Slugs supported.",
        "operationId": "getEpgForChannel",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 30,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 30,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelEPGResponse"
                }
              }
            }
          },
          "400": {
            "description": "User error.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Result window too large": {
                    "description": "Result window too large. The pageSize * pageNumber was larger than the max. Usually the product of the two cannot be larger than 20000.",
                    "value": "{\"message\"=\"RESULT_WINDOW_TOO_LARGE\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid request.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Date outside the EPG window": {
                    "description": "Date outside the EPG window",
                    "value": "{\"message\"=\"DATE_REQUESTED_OUTSIDE_VALID_WINDOW\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/epg/{channelId}/program/{programId}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get a program by id.",
        "operationId": "getProgramV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "400": {
            "description": "User error.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Result window too large": {
                    "description": "Result window too large. The pageSize * pageNumber was larger than the max. Usually the product of the two cannot be larger than 20000.",
                    "value": "{\"message\"=\"RESULT_WINDOW_TOO_LARGE\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Program not found": {
                    "description": "Program not found.",
                    "value": "{\"message\"=\"UNKNOWN_PROGRAM\"}"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid request.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Date outside the EPG window": {
                    "description": "Requested date is outside the EPG window.",
                    "value": "{\"message\"=\"DATE_REQUESTED_OUTSIDE_VALID_WINDOW\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/epg/{channelId}/program/{programId}/next": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get the next program.",
        "description": "...on the same channel relative to a program",
        "operationId": "getNextProgramV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Program not found": {
                    "description": "The program reference was not found.",
                    "value": "{\"message\"=\"UNKNOWN_PROGRAM\"}"
                  },
                  "No next program.": {
                    "description": "No next program.",
                    "value": "{\"message\"=\"NO_NEXT_PROGRAM\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/epg/{channelId}/xmltv": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get XMLTV EPG data",
        "description": "Retrieve XMLTV EPG data for a specific channel with optional parameters.",
        "operationId": "getXmlTvEpg",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "The number of days backward to retrieve EPG data",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "The number of days forward to retrieve EPG data",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tv"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/epg/{channelIds}/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get epg data for set of channels.",
        "operationId": "getEpgForChannels",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "path",
            "description": "Comma separated list of channel ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 30,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 30,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiChannelEPGResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "User error.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Result window too large": {
                    "description": "Result window too large. The pageSize * pageNumber was larger than the max. Usually the product of the two cannot be larger than 20000.",
                    "value": "{\"message\"=\"RESULT_WINDOW_TOO_LARGE\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid request.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Date outside the EPG window": {
                    "description": "Requested date is outside the EPG window.",
                    "value": "{\"message\"=\"DATE_REQUESTED_OUTSIDE_VALID_WINDOW\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/epg/asset/{assetId}/next": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get the next program relative to asset.",
        "operationId": "getNextProgramForAssetV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Program not found": {
                    "description": "The program reference was not found.",
                    "value": "{\"message\"=\"UNKNOWN_PROGRAM\"}"
                  },
                  "No next program.": {
                    "description": "No next program.",
                    "value": "{\"message\"=\"NO_NEXT_PROGRAM\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/epg/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Get epg data for all channels.",
        "description": "This endpoint finds all published programs and partitions them in channel buckets. Only channels has programs in the page that has been requested will have a bucket.",
        "operationId": "getEpg",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "required": false,
            "schema": {
              "maximum": 30,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "required": false,
            "schema": {
              "maximum": 30,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiChannelEPGResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "User error.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Result window too large": {
                    "description": "Result window too large. The pageSize * pageNumber was larger than the max. Usually the product of the two cannot be larger than 20000.",
                    "value": "{\"message\"=\"RESULT_WINDOW_TOO_LARGE\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid request.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Date outside the EPG window": {
                    "description": "Date outside the EPG window",
                    "value": "{\"message\"=\"DATE_REQUESTED_OUTSIDE_VALID_WINDOW\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/event/date/{date}": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Get events.",
        "operationId": "getEventsV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 30,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "hideEnded",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEventList"
                }
              }
            }
          },
          "400": {
            "description": "User error.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Result window too large": {
                    "description": "Result window too large. The pageSize * pageNumber was larger than the max. Usually the product of the two cannot be larger than 20000.",
                    "value": "{\"message\"=\"RESULT_WINDOW_TOO_LARGE\"}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/label/filter": {
      "get": {
        "tags": [
          "account labels"
        ],
        "summary": "Get current accounts labelFilter",
        "description": "This can be used in special applications to e.g. get appropriate product offerings",
        "operationId": "getAccountLabels",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLabelFilter"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/paymentmethods": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get stored payment methods",
        "operationId": "getStoredPaymentMethods",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethods"
                }
              }
            }
          },
          "403": {
            "description": "FEATURE_NOT_ENABLED_FOR_BUSINESS_UNIT the business unit is not integrated with a payment provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethods"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Add payment method",
        "operationId": "addPaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPaymentMethodResponse"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION the business unit's CRM is not supported with this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddPaymentMethodResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/paymentmethods/{paymentMethodId}": {
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Update payment method",
        "operationId": "updatePaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "The id of the stored payment method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdatePaymentMethodRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethod"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION the business unit's CRM is not supported with this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaymentMethod"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete payment method",
        "operationId": "deleteStoredPaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "The id of the stored payment method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "403": {
            "description": "FEATURE_NOT_ENABLED_FOR_BUSINESS_UNIT the business unit is not integrated with a payment provider"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/paymentmethods/preferred": {
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Update the preferred payment method",
        "operationId": "updatePreferredPaymentMethod",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdatePrederredPaymentMethodRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonAccount"
                }
              }
            }
          },
          "403": {
            "description": "BUSINESS_UNITS_CRM_DOES_NOT_SUPPORT_OPERATION the business unit's CRM is not supported with this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/account/purchases": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all purchases for account including transactions",
        "operationId": "getAccountPurchases",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiStorePurchaseTransaction"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/account/transactions": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all transactions for account",
        "operationId": "getAccountTransactions",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductOfferingTransactions"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/account/transactions/productoffering": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all transactions for account paired with product offerings",
        "operationId": "getAccountTransactionsWithProductOffering",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductOfferingTransactionsProductOfferingPairList"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productoffering/country/{countryCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings available in the specified country, also includes global product offerings.",
        "operationId": "getOfferings",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "description": "The country code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSelectAssetProducts",
            "in": "query",
            "description": "Filter on product offerings that requires assetId upon purchase",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStoreProductOfferings"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productoffering/label/{labelFilter}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings available for this account's labels. This endpoint is to be only used if labels are used, which will be far from normal.",
        "operationId": "getOfferingByLabel",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labelFilter",
            "in": "path",
            "description": "The label filter id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStoreProductOfferings"
                }
              }
            }
          },
          "404": {
            "description": "LABEL_FILTER_NOT_FOUND The provided labelFilterId was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStoreProductOfferings"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productoffering/label/{labelFilterId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings available for this account's labels.",
        "description": "This endpoint is to be only used if labels are used, which will be far from normal.",
        "operationId": "getOfferingsByLabels",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labelFilterId",
            "in": "path",
            "description": "The labelFilterId received with the Label Resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStoreProductOfferings"
                }
              }
            }
          },
          "404": {
            "description": "LABEL_FILTER_NOT_FOUND The provided labelFilterId was not found",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productofferings/country/{countryCode}/voucher/{voucherCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get country product offerings available for the specific voucher code",
        "description": "The end point will not reduce the offerings if they have unique products, for example:\nProduct offering 1 - Products: Animated Movies, Country: SE\nProduct offering 2 - Products: Sci-Fi Movies, Country: Global\n\nProduct offering 1 & 2 and will be returned.",
        "operationId": "getCountryOfferingsByVoucher",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "description": "The country code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStorePromotionProductOfferings"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/productofferings/voucher/{voucherCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings available for the specific voucher code. EXPERIMENTAL",
        "operationId": "getOfferingsByVoucher",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherCode",
            "in": "path",
            "description": "The voucher code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiStorePromotionProductOfferings"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get currently active purchases of the user's account",
        "operationId": "getAccountPurchases2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeOfferingDetails",
            "in": "query",
            "description": "Include offering details in response",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductOfferingPurchases"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/{productOfferingId}": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Purchase a productOffering",
        "operationId": "purchaseProductOffering",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productOfferingId",
            "in": "path",
            "description": "The product offering to purchase",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "TO_MANY_DEVICES Session is over device limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/{purchaseId}/verify": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Verify a purchase of a productOffering",
        "description": "Verify a purchase of a productOffering if a \"AUTHORIZED/REJECTED\"-status is not given directly. E.g. a redirect flow, where the purchaser has to authenticate to the card issuer. Also, used to send additional data from the shopper if that's required.",
        "operationId": "verifyPayment",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchased id to verify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "TO_MANY_DEVICES Session is over device limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPurchaseResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/assets": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get all active asset purchases for account",
        "operationId": "getAccountAssetPurchases",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAsset"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/initialize": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Returns valid payment types and price after any discount",
        "description": "EXPERIMENTAL Called to before initiating a new payment. Returns valid payment types and price after any discount. * Note: The behaviour and the result can change during the time.",
        "operationId": "initialize",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiInitialisePayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInitializePaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "TO_MANY_DEVICES Session is over device limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInitializePaymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/store/purchase/subscriptions/{purchaseId}": {
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Cancel a subscription purchase, no more renewals will be done.",
        "operationId": "cancelPurchaseSubscription",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchased subscription to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/system/config": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Configuration.",
        "description": "Gets the system confiuration for specified country.",
        "operationId": "getSystemConfigV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "countryCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSystemConfig"
                }
              }
            }
          },
          "4xx": {
            "description": "Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown country code": {
                    "description": "Unknown country code",
                    "value": "{\n  \"httpCode\" : 400,\n  \"message\" : \"UNKNOWN_COUNTRY_CODE\"\n}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/activation/confirm/{code}": {
      "put": {
        "tags": [
          "activation code - device pairing"
        ],
        "summary": "Confirms an activation code.",
        "description": "Confirm the code on the web.",
        "operationId": "confirmActivationCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/changeEmail": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change email address.",
        "description": "Use v3 version.",
        "operationId": "changeEmail_2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangeEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/changePassword": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change password.",
        "description": "Use v3 version.",
        "operationId": "changePassword_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChangePasswordResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/delete": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Delete personal data.",
        "description": "Use the v3 version",
        "operationId": "deleteDetails_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true,
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/details": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user details.",
        "operationId": "getDetails",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user details.",
        "operationId": "updateDetails",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserDetailsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/password/reset/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Request a reset of the user's password.",
        "description": "Will send a reset link in a email to the user's email address. Will always succeed even if the username is not found",
        "operationId": "resetPasswordV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/profile": {
      "get": {
        "tags": [
          "user profiles"
        ],
        "summary": "Get user profiles",
        "operationId": "getProfiles",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserProfiles"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "user profiles"
        ],
        "summary": "Add a user profile",
        "operationId": "addProfile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserProfileCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserProfiles"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/profile/{userId}": {
      "put": {
        "tags": [
          "user profiles"
        ],
        "summary": "Update a user profile",
        "operationId": "updateProfile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserDetailsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user profiles"
        ],
        "summary": "Delete a user profile",
        "operationId": "deleteProfile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/profile/{userId}/select": {
      "get": {
        "tags": [
          "user profiles"
        ],
        "summary": "Select, or switch to, a user profile",
        "description": "The current session token will be replaced.",
        "operationId": "selectProfile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Signup",
        "description": "Use v3 version.",
        "operationId": "signup_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserSelfServiceCreateRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserSignupResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/signup/confirm/{token}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Confirms a created user.",
        "description": "If the body is present with a deviceRegistration, the user will be logged in.",
        "operationId": "confirmUserWithTokenV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserSignupConfirm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfirmAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/user/signup/password/{token}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Set password.",
        "description": "Use v3 version.",
        "operationId": "setPassword_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSetPasswordWithTokenRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/userActivation/activationCode": {
      "get": {
        "tags": [
          "activation code - device pairing"
        ],
        "summary": "Creates an activation code.",
        "description": "Create and display code on big screen.",
        "operationId": "createActivationCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiActivationCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiActivationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customer}/businessunit/{businessUnit}/userActivation/consume": {
      "post": {
        "tags": [
          "activation code - device pairing"
        ],
        "summary": "Consumes an activation code.",
        "description": "Logs in the big screen with a confirmed code.",
        "operationId": "consumeActivationCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiActivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Code not yet confirmed. Try again after a few seconds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for a specific channel.",
        "description": "<p>\n Programs sorted ascending on startTime by default.\n <p>",
        "operationId": "getEpgForChannelV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel to get EPG for. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "description": "The sort order.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelEPGResponse"
                }
              }
            }
          },
          "422": {
            "description": "DATE_REQUESTED_OUTSIDE_VALID_WINDOW. If the date requested is outside the valid EPG window.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/program/{programId}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets a specific program for a channel by id.",
        "operationId": "getProgramV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "in": "path",
            "description": "The id of the program.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "UNKNOWN_PROGRAM. If the program cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/program/{programId}/next": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets next program for a specific program for a channel.",
        "operationId": "getNextProgramv2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "in": "path",
            "description": "The id of the program.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "PROGRAM_NOT_FOUND. If the program cannot be found.<br>NEXT_PROGRAM_NOT_FOUND. If the next program cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelId}/xmltv": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for a specific channel in XML TV format.",
        "description": "<p>",
        "operationId": "getXmlTvEpgForChannel",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of the channel to get EPG for. Slugs supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannelEPGResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/{channelIds}/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for a specific set of channels.",
        "description": "<p>\n Programs sorted ascending on startTime by default.",
        "operationId": "getEpgForChannelsV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelIds",
            "in": "path",
            "description": "The comma separated list of the ids the channels to get EPG for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "description": "The sort order.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiChannelEPGResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "DATE_REQUESTED_OUTSIDE_VALID_WINDOW. If the date requested is outside the valid EPG window.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/asset/{assetId}/next": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets next program for a specific asset.",
        "description": "If the asset has been showed multiple times there is a unspecified logic to select one program.",
        "operationId": "getNextProgramForAsset2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "The asset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProgramResponse"
                }
              }
            }
          },
          "404": {
            "description": "PROGRAM_NOT_FOUND. If the program cannot be found.<br>NEXT_PROGRAM_NOT_FOUND. If the next program cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v2/customer/{customerUnit}/businessunit/{businessUnit}/epg/date/{date}": {
      "get": {
        "tags": [
          "epg"
        ],
        "summary": "Gets epg data for all channels.",
        "description": "<p>\n This endpoint finds all published programs and partitions them in channel buckets. Only channels has programs\n in the page that has been requested will have a bucket.\n <p>\n Programs sorted ascending on startTime by default.",
        "operationId": "getEpgV2",
        "parameters": [
          {
            "name": "customerUnit",
            "in": "path",
            "description": "The customer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "The date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "daysBackward",
            "in": "query",
            "description": "Days back compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "daysForward",
            "in": "query",
            "description": "Days forward compared to midnight of the date to get EPG for.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to show per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number. Note that pageNumber * pageSize cannot exceed 10000 or an error will occur.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startDateSort",
            "in": "query",
            "description": "The sort order. Note that pageNumber * pageSize cannot exceed 10000 or an error will occur.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiChannelEPGResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Result window is too large. If the pageSize * pageNumber is greater than 10000.",
            "content": {}
          },
          "422": {
            "description": "DATE_REQUESTED_OUTSIDE_VALID_WINDOW. If the date requested is outside the valid EPG window.",
            "content": {}
          }
        }
      }
    },
    "/v2/location": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Get location.",
        "description": "Get location information based on caller IP-address.",
        "operationId": "get",
        "parameters": [
          {
            "name": "Referer",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLocation"
                }
              }
            }
          }
        }
      }
    },
    "/v2/time": {
      "get": {
        "tags": [
          "time"
        ],
        "summary": "Get time.",
        "description": "Gets the current server UTC time.",
        "operationId": "time",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/config/{configId}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get the top level config object.",
        "description": "This endpoint uses the hostname instead of explicit customer/business unit pair to identify the business unit.",
        "operationId": "getWLConfig",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Comma separated list of filters. I.e: \"type:value,type2:value2\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfig"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "File not found": {
                    "description": "File not found",
                    "value": "{\"message\"=\"INVALID_FILTERS\"}"
                  },
                  "Configuration not found": {
                    "description": "Configuration not found",
                    "value": "{\"message\"=\"Not found\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/config/{configId}/component/{componentId}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get component.",
        "operationId": "getWLComponentV2",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Comma separated list of filters. I.e: \"type:value,type2:value2\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiComponent"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "File not found": {
                    "description": "File not found",
                    "value": "{\"message\"=\"INVALID_FILTERS\"}"
                  },
                  "Configuration not found": {
                    "description": "Configuration not found",
                    "value": "{\"message\"=\"Not found\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/file/{folder}/{fileName}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "operationId": "getFile",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v2/whitelabel/customer/{customer}/businessunit/{businessUnit}/filters": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get the filters to use in calls to the client configuration endpoints.",
        "description": "This response also includes the user location so there is no need to make an extra call to fetch that.",
        "operationId": "getComponentFilters",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiComponentFilters"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/whitelabel/origin/{host}/config/{configId}": {
      "get": {
        "tags": [
          "clientconfig"
        ],
        "summary": "Get the top level config object, hostname version.",
        "description": "This endpoint uses the hostname instead of explicit customer/business unit pair to identify the business unit.",
        "operationId": "getWlConfig",
        "parameters": [
          {
            "name": "host",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Comma separated list of filters. I.e: \"type:value,type2:value2\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodPreview",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfig"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  },
                  "Domain not found.": {
                    "description": "Domain not found.",
                    "value": "{\"message\"=\"Custom domain not found.\"}"
                  },
                  "File not found": {
                    "description": "File not found",
                    "value": "{\"message\"=\"INVALID_FILTERS\"}"
                  },
                  "Configuration not found": {
                    "description": "Configuration not found",
                    "value": "{\"message\"=\"Not found\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/auth/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login with username and password.",
        "operationId": "loginV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAuthRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/asset/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Asset search V3.",
        "description": "Prefix search on asset titles.",
        "operationId": "searchAssetsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/asset/title/autocomplete/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Autocomplete of asset titles.",
        "operationId": "autocompleteAssetTitleV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ParentalRatingsFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem2"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/participant/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "operationId": "searchParticipantsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "success",
            "content": {}
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Multi search V3.",
        "description": "Prefix search on assets and tags.",
        "operationId": "searchV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Comma separated list of types.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "MOVIE,TV_SHOW"
            }
          },
          {
            "name": "schemes",
            "in": "query",
            "description": "The schemes of tags to search. If no schemes, tags will not be searched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parentalRatings",
            "in": "query",
            "description": "The parental rating filter in the format of COUNTRY:RATING,COUNTRY:RATING2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "allowedCountry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMultiSearchResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/tag/query/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Tag search V3.",
        "description": "Prefix search on tag titles.",
        "operationId": "searchTagsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "fieldSet",
            "in": "query",
            "description": "Field set to return.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ALL",
              "enum": [
                "NONE",
                "PARTIAL",
                "ALL"
              ]
            }
          },
          {
            "name": "includeFields",
            "in": "query",
            "description": "Comma separated list of field names to include in response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeFields",
            "in": "query",
            "description": "Comma separated list of field names to exclude from response.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTagSearchList"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/content/search/tag/title/autocomplete/{query}": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Autocomplete V3 of asset titles.",
        "operationId": "autocompleteTagTitleV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAutocompleteItem2"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/API Error message"
                },
                "examples": {
                  "Unknown business unit": {
                    "description": "Unknown business unit",
                    "value": "{\"message\"=\"UNKNOWN_BUSINESS_UNIT\"}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/appstore/purchase/{purchaseId}/verify": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Verify a App Store purchase",
        "description": "Verifies that the purchase was successful and makes entilement if so.",
        "operationId": "verifyAppStorePurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchase id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAppStorePurchaseVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseVerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseVerifyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/appstore/purchase/init/{productOfferingId}": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Initialize a App Store purchase",
        "description": "Set up a purchase of specified Product Offering, using App Store. If the Product Offerings field productRequiresSelectAsset is true then a assetId must be provided.",
        "operationId": "initializeAppStorePurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productOfferingId",
            "in": "path",
            "description": "Id of product offering to purchase",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAppStorePurchaseInitializeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseInitializeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAppStorePurchaseInitializeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/googleplay/purchase/{purchaseId}/verify": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Verify a Google Play purchase",
        "description": "Verifies that the purchase was successful and makes entilement if so.",
        "operationId": "verifyGooglePlayPurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "purchaseId",
            "in": "path",
            "description": "The purchase id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGooglePlayPurchaseVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseVerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseVerifyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/googleplay/purchase/init/{productOfferingId}": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Initialize a Google Play purchase",
        "description": "Set up a purchase of specified Product Offering, using Google Play. If the Product Offerings field productRequiresSelectAsset is true then a assetId must be provided.",
        "operationId": "initializeGooglePlayPurchase",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productOfferingId",
            "in": "path",
            "description": "Id of product offering to purchase",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGooglePlayPurchaseInitializeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseInitializeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGooglePlayPurchaseInitializeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/store/productoffering/country/{countryCode}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get product offerings.",
        "description": "Get available product offerings for location and payment service",
        "operationId": "getOfferingsV3",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "description": "The customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "description": "The business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "path",
            "description": "Current location ISO 3166 alpha-2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSelectAssetProducts",
            "in": "query",
            "description": "Include product offerings that requires AssetId at purchase",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "paymentProvider",
            "in": "query",
            "description": "Supported payment service provider",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Payment provider",
              "enum": [
                "stripe",
                "appstore",
                "googleplay",
                "external"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiStoreProductOffering"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/attributes": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Set user attributes.",
        "description": "Attributes NOT in the provided list will be untouched",
        "operationId": "setAttributes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiUserAttributeRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/changeEmail": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change email address.",
        "description": "Change email address that is not used as username.",
        "operationId": "changeEmail",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangeEmailRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/changeEmailAndUsername": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change email address and username.",
        "description": "Change email address that is also used as username.",
        "operationId": "changeEmail_1",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangeEmailAndUserNameV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/changePassword": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change password.",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiChangePwdV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChangePasswordResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/delete": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Delete personal data.",
        "description": "The account will be anonymonized and not be possible to use.",
        "operationId": "deleteDetails",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCredentialsV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode": {
      "get": {
        "tags": [
          "pin codes"
        ],
        "summary": "Get pin codes.",
        "operationId": "getPinCodes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPinCodeResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "pin codes"
        ],
        "summary": "Create a pin code.",
        "description": "The id will be generated. If yoy want to specify the id, then instead create the code using the Update end point.",
        "operationId": "createPinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPinCodeResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode/pin/{pincodeId}": {
      "put": {
        "tags": [
          "pin codes"
        ],
        "summary": "Update (or Create) a pin code.",
        "operationId": "setPinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pincodeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiPinCodeResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "pin codes"
        ],
        "summary": "Delete a pin code.",
        "operationId": "deletePinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pincodeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode/pin/{pincodeId}/validate": {
      "post": {
        "tags": [
          "pin codes"
        ],
        "summary": "Validate a pin code.",
        "description": "Returns a list of application specified grants if successfully validated, else an empty list [].",
        "operationId": "validatePinCode",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pincodeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/pincode/validate": {
      "post": {
        "tags": [
          "pin codes"
        ],
        "summary": "Validate a pin towards all pin codes.",
        "description": "Returns a list of application specified grants if successfully validated, else an empty list [].",
        "operationId": "validatePinCodes",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiPinCodeValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer-key": []
          }
        ]
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Signup.",
        "description": "If unConfirmed == true, then the user will receive an email with a confirmation link. Else if unConfirmed == false the user is logged in and session details are in the responseSets the users password using a token received at invitation signup (without password) or password reset",
        "operationId": "signup",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserSignupRequestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserSignupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/customer/{customer}/businessunit/{businessUnit}/user/signup/password/{token}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Set password.",
        "description": "Sets the users password using a token received at invitation signup (without password) or password reset",
        "operationId": "setPassword",
        "parameters": [
          {
            "name": "customer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessUnit",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSetPwdWithTokenV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountDownload": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDownload"
            }
          }
        }
      },
      "AccountProducts": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string"
          },
          "entitled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "notEntitled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "entitleExposure": {
            "type": "boolean"
          }
        }
      },
      "Actor": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "actor"
        }
      },
      "AdClips": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "titleId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "duration": {
            "type": "number",
            "format": "double"
          },
          "impressionUrlTemplates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trackingEvents": {
            "$ref": "#/components/schemas/AdTrackingEvents"
          },
          "videoClicks": {
            "$ref": "#/components/schemas/AdVideoClicks"
          }
        }
      },
      "AdMarker": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "type": "string"
          }
        }
      },
      "AdRoll": {
        "type": "object",
        "properties": {
          "defaultDuration": {
            "type": "string"
          },
          "customParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AdRollConfig": {
        "type": "object",
        "properties": {
          "pre": {
            "$ref": "#/components/schemas/AdRoll"
          },
          "mid": {
            "$ref": "#/components/schemas/AdRoll"
          },
          "post": {
            "$ref": "#/components/schemas/AdRoll"
          }
        }
      },
      "Ads": {
        "type": "object",
        "properties": {
          "stitcher": {
            "type": "string"
          },
          "stitcherSession": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "insertionDuration": {
            "type": "integer",
            "format": "int32"
          },
          "insertionMaxCount": {
            "type": "integer",
            "format": "int32"
          },
          "adMarkers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdMarker"
            }
          },
          "clips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdClips"
            }
          }
        }
      },
      "AdTrackingEvents": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "firstQuartile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "midpoint": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thirdQuartile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdVideoClicks": {
        "type": "object",
        "properties": {
          "clickThroughUrl": {
            "type": "string"
          },
          "clickTrackingUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Algorithm": {
        "type": "object",
        "properties": {
          "algorithmName": {
            "type": "string",
            "enum": [
              "CLEAR",
              "PBKDF2",
              "NO_PASSWORD"
            ]
          },
          "pbkdf2Iterations": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Analytics": {
        "type": "object",
        "properties": {
          "postInterval": {
            "type": "integer",
            "format": "int32"
          },
          "bucket": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "percentage": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnalyticsBatch": {
        "required": [
          "DispatchTime"
        ],
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "string"
          },
          "BusinessUnit": {
            "type": "string"
          },
          "ClientIp": {
            "type": "string"
          },
          "ClockOffset": {
            "type": "integer",
            "format": "int32"
          },
          "Customer": {
            "type": "string"
          },
          "DispatchTime": {
            "type": "integer",
            "format": "int64"
          },
          "Payload": {
            "type": "string"
          },
          "SessionId": {
            "type": "string"
          },
          "UserId": {
            "type": "string"
          }
        }
      },
      "API Error message": {
        "type": "object",
        "properties": {
          "httpCode": {
            "type": "integer",
            "description": "HTTP Code",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "extendedMessage": {
            "type": "string",
            "description": "Extended error message"
          }
        }
      },
      "ApiAccessConfig": {
        "required": [
          "accessModel",
          "consentManagement",
          "loginMethods",
          "passwordPolicy",
          "signupMinimumAge",
          "signupModel"
        ],
        "type": "object",
        "properties": {
          "accessModel": {
            "type": "string",
            "description": "How users gain access",
            "enum": [
              "open",
              "login",
              "pay"
            ]
          },
          "signupMinimumAge": {
            "type": "integer",
            "description": "Minimum age in years of user signing up to the service",
            "format": "int32"
          },
          "passwordPolicy": {
            "$ref": "#/components/schemas/ApiPasswordPolicy"
          },
          "loginMethods": {
            "type": "object",
            "description": "Login methods"
          },
          "signupModel": {
            "type": "string",
            "description": "How to become a user",
            "enum": [
              "provisioned",
              "unconfirmed",
              "confirmed"
            ]
          },
          "consentManagement": {
            "$ref": "#/components/schemas/ApiConsentManagement"
          }
        },
        "description": "User access configuration"
      },
      "ApiAction": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "verb": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ApiActivationCodeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiActivationRequest": {
        "required": [
          "activationCode",
          "device"
        ],
        "type": "object",
        "properties": {
          "activationCode": {
            "type": "string"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiActivationRequestV2": {
        "required": [
          "activationCode",
          "device"
        ],
        "type": "object",
        "properties": {
          "activationCode": {
            "type": "string",
            "description": "6 characters drawn from set 123456789ABCDEF as received from create end-point."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiActiveChannels": {
        "type": "object",
        "properties": {
          "apiChannelStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelStatus"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiAddPaymentMethodResponse": {
        "type": "object",
        "properties": {
          "stripe": {
            "$ref": "#/components/schemas/StripeSetupIntentResponse"
          }
        }
      },
      "ApiAnalyticsConfig": {
        "required": [
          "analyticsPercentage"
        ],
        "type": "object",
        "properties": {
          "analyticsBaseUrl": {
            "type": "string",
            "description": "If stated this is the base URL for analytics events, if not stated the base URL for Exposure API is to be used"
          },
          "analyticsPercentage": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Probability in percentage that the player shall send analytics events",
            "format": "int32"
          }
        },
        "description": "Analytics reporting configuration"
      },
      "ApiAnonymousSessionRequest": {
        "required": [
          "device",
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "A unique ID of the device."
          }
        }
      },
      "ApiAnonymousSessionResponse": {
        "required": [
          "expirationDateTime",
          "sessionToken"
        ],
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The (bearer) session token to use in subsequent requests."
          },
          "expirationDateTime": {
            "type": "string",
            "description": "The ISO 8601 time when the session expires.",
            "format": "date-time"
          }
        }
      },
      "ApiApiKeyUserSessionRequest": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the user."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "description": "When should the session expire. If omitted system default is applied.",
            "format": "date-time"
          },
          "sessionUser": {
            "type": "boolean",
            "description": "To be true in very special cases and then you will now."
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "true if consent to collect personal information is given. null == false"
          }
        }
      },
      "ApiAppStoreConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Apple App Store enabled"
          }
        },
        "description": "Apple app store configuration"
      },
      "ApiAppStorePurchaseInitializeRequest": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Single asset id that the purchase will entitle. Requires that the product offering requires \"direct asset purchases\"."
          }
        }
      },
      "ApiAppStorePurchaseInitializeResponse": {
        "type": "object",
        "properties": {
          "appAccountToken": {
            "type": "string",
            "description": "To used as appAccountToken",
            "format": "uuid"
          },
          "purchaseId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "ApiAppStorePurchaseVerifyRequest": {
        "required": [
          "transaction"
        ],
        "type": "object",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "As received in the App Store Purchase."
          }
        }
      },
      "ApiAppStorePurchaseVerifyResponse": {
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected",
              "cancelled"
            ]
          }
        }
      },
      "ApiAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiExternalReference"
            }
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLinkedEntity"
            }
          },
          "live": {
            "type": "boolean"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedData"
            }
          },
          "seoData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedSeoData"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiMedia"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiParentalRating"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPerson"
            }
          },
          "popularityScores": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPublication"
            }
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "studio": {
            "type": "string"
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "runtime": {
            "type": "integer",
            "format": "int64"
          },
          "season": {
            "type": "string"
          },
          "seasonId": {
            "type": "string"
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSeason"
            }
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTag"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "tvShow": {
            "$ref": "#/components/schemas/ApiTvShowInfo"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "AD",
              "LIVE_EVENT",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "trackSizes": {
            "$ref": "#/components/schemas/ApiTrackSizes"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "channelFeatures": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIRTUAL",
                "VC_CURATED",
                "VC_PERSONALIZED",
                "VC_SCHEDULED",
                "EPG"
              ]
            }
          },
          "overlayWidgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiOverlayWidget"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "markerPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiMarkerPoint"
            }
          },
          "cuePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiMarkerPoint"
            }
          },
          "event": {
            "$ref": "#/components/schemas/Event"
          },
          "program": {
            "$ref": "#/components/schemas/ApiProgram"
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProgram"
            }
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCollectionReference"
            }
          },
          "assetFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSystemTag"
            }
          }
        }
      },
      "ApiAssetAction": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAction"
          },
          {
            "type": "object",
            "properties": {
              "assetId": {
                "type": "string"
              },
              "slugs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ApiAssetList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiAssetListBulk": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "lastCreatedEpochMillis": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiAssetListItemRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiAssetListItemResponse": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "assetId": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiAssetQueryUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiAssetRights": {
        "type": "object",
        "properties": {
          "activation": {
            "type": "string",
            "format": "date-time"
          },
          "airplayBlocked": {
            "type": "boolean"
          },
          "amcDebugLogEnabled": {
            "type": "boolean"
          },
          "analyticsEnabled": {
            "type": "boolean"
          },
          "downloadBlocked": {
            "type": "boolean"
          },
          "downloadMaxSecondsAfterDownload": {
            "type": "integer",
            "format": "int32"
          },
          "downloadMaxSecondsAfterPlay": {
            "type": "integer",
            "format": "int32"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "ffEnabled": {
            "type": "boolean"
          },
          "fourGBlocked": {
            "type": "boolean"
          },
          "jailbrokenBlocked": {
            "type": "boolean"
          },
          "locationEnabled": {
            "type": "boolean"
          },
          "maxAds": {
            "type": "integer",
            "format": "int32"
          },
          "maxBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "maxFileSize": {
            "type": "integer",
            "format": "int64"
          },
          "maxPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "format": "int32"
          },
          "maxResWidth": {
            "type": "integer",
            "format": "int32"
          },
          "minBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "minPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "playCount": {
            "type": "integer",
            "format": "int32"
          },
          "rwEnabled": {
            "type": "boolean"
          },
          "sessionShiftEnabled": {
            "type": "boolean"
          },
          "streamingBlocked": {
            "type": "boolean"
          },
          "threeGBlocked": {
            "type": "boolean"
          },
          "wifiBlocked": {
            "type": "boolean"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "hdmiblocked": {
            "type": "boolean"
          }
        }
      },
      "ApiAudioTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "trackInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTrackInfo"
            }
          }
        }
      },
      "ApiAuthenticationRequest": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "sessionUser": {
            "type": "boolean"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean"
          }
        }
      },
      "ApiAuthRequestV3": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the user."
          },
          "password": {
            "type": "string",
            "description": "User's password."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "true if consent to collect personal information is given. null == false"
          }
        }
      },
      "ApiAutocompleteItem": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "ApiAutocompleteItem2": {
        "type": "object",
        "properties": {
          "hitText": {
            "type": "string"
          },
          "hitFieldValue": {
            "type": "string"
          }
        }
      },
      "ApiBookkeeperAccount": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiBookkeeperAsset"
            }
          }
        }
      },
      "ApiBookkeeperAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiBookkeeperDownload"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiBookkeeperDownload": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "clientIp": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceModelId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "ApiCardSummary": {
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "Type of card, e.g visa"
          },
          "expiryMonth": {
            "type": "string",
            "description": "Expiry month e.g. \"10\""
          },
          "expiryYear": {
            "type": "string",
            "description": "Expiry month e.g. \"2022\""
          },
          "last4": {
            "type": "string",
            "description": "Last of digits of card number"
          },
          "origin": {
            "type": "string",
            "description": "Origin of the card E.g. Google Pay, Apple Pay. If empty, consider the origin to be the payment provider"
          }
        },
        "description": "Summary of card details"
      },
      "ApiCencConfigurationResponse": {
        "type": "object",
        "properties": {
          "com.microsoft.playready": {
            "type": "string"
          },
          "com.widevine.alpha": {
            "type": "string"
          }
        }
      },
      "ApiChangeEmailAndUserNameV3": {
        "required": [
          "newEmailAddressAndUsername",
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The user's password. It is used to protecty from accidential or malicious account hi-jacking."
          },
          "newEmailAddressAndUsername": {
            "type": "string",
            "description": "The user's new email address. It lill also replace the old username."
          }
        }
      },
      "ApiChangeEmailRequest": {
        "required": [
          "credentials"
        ],
        "type": "object",
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "newEmailAddress": {
            "type": "string"
          }
        }
      },
      "ApiChangeEmailRequestV3": {
        "type": "object",
        "properties": {
          "newEmailAddress": {
            "type": "string",
            "description": "The user's new email address."
          }
        }
      },
      "ApiChangePasswordRequest": {
        "required": [
          "device",
          "newCredentials",
          "oldCredentials"
        ],
        "type": "object",
        "properties": {
          "newCredentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "oldCredentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "logoutOnAllDevices": {
            "type": "boolean"
          }
        }
      },
      "ApiChangePasswordResponse": {
        "required": [
          "loginResponse"
        ],
        "type": "object",
        "properties": {
          "loginResponse": {
            "$ref": "#/components/schemas/ApiLoginResponse"
          }
        }
      },
      "ApiChangePwdV3": {
        "required": [
          "device",
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "The user's new password. Must follow the system's configured policy."
          },
          "oldPassword": {
            "type": "string",
            "description": "The user's old password."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "logoutOnAllDevices": {
            "type": "boolean",
            "description": "If true the user, including any of the account's profiles, will be logged out from all devices."
          }
        }
      },
      "ApiChannelAsset": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiChannelEPGResponse": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProgramResponse"
            }
          },
          "totalHitsAllChannels": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiChannelEpgUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiChannelStatus": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "active": {
            "type": "boolean"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelAsset"
            }
          }
        }
      },
      "ApiCollectionReference": {
        "type": "object",
        "properties": {
          "collectionId": {
            "type": "string"
          }
        }
      },
      "ApiComponent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiComponentBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "created": {
                "type": "string",
                "format": "date-time"
              },
              "changed": {
                "type": "string",
                "format": "date-time"
              },
              "name": {
                "type": "string"
              },
              "appType": {
                "type": "string"
              },
              "appSubType": {
                "type": "string"
              },
              "presentation": {
                "$ref": "#/components/schemas/ApiPresentation"
              },
              "otherPresentations": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ApiPresentation"
                }
              },
              "actions": {
                "type": "object",
                "additionalProperties": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiAssetAction"
                    },
                    {
                      "$ref": "#/components/schemas/ApiComponentAction"
                    },
                    {
                      "$ref": "#/components/schemas/ApiExternalUrlAction"
                    },
                    {
                      "$ref": "#/components/schemas/ApiSimpleAction"
                    }
                  ]
                }
              },
              "contentUrl": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAssetQueryUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiChannelEpgUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiContinueWatchingUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiEpgUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiFavouritesUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiLiveEventsUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiRecentlyWatchedUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiRecommendedUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiSingleAssetUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiTagTypeUrl"
                  },
                  {
                    "$ref": "#/components/schemas/ApiTvodUrl"
                  }
                ]
              },
              "content": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiPresentationFromAssetContent"
                  }
                ]
              },
              "contentPreferencesUrl": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTagFeedUrl"
                  }
                ]
              },
              "components": {
                "$ref": "#/components/schemas/Components"
              },
              "parameters": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ApiComponentAction": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAction"
          },
          {
            "type": "object",
            "properties": {
              "componentId": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ApiComponentBase": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ApiComponentFilters": {
        "type": "object",
        "properties": {
          "locationKnown": {
            "type": "boolean"
          },
          "countryCode": {
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Result"
            }
          }
        }
      },
      "ApiComponentReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiComponentBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "appType": {
                "type": "string"
              },
              "appSubType": {
                "type": "string"
              },
              "referenceId": {
                "type": "string"
              },
              "referenceUrl": {
                "type": "string"
              },
              "parameters": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "images": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              },
              "hasAuthorizedContent": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiConfig": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "presentation": {
            "$ref": "#/components/schemas/ApiPresentation"
          },
          "components": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiComponent"
                  },
                  {
                    "$ref": "#/components/schemas/ApiComponentReference"
                  }
                ]
              }
            }
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "theme": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "systemConfig": {
            "$ref": "#/components/schemas/ApiSystemConfig"
          }
        }
      },
      "ApiConfigFile": {
        "type": "object",
        "properties": {
          "businessUnit": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "customer": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "systemConfig": {
            "$ref": "#/components/schemas/ApiSystemConfig"
          }
        }
      },
      "ApiConfigFilesResponse": {
        "type": "object",
        "properties": {
          "businessUnit": {
            "type": "string"
          },
          "customer": {
            "type": "string"
          },
          "fileNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiConfirmAccountData": {
        "type": "object",
        "properties": {
          "deviceRegistration": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiConfirmAccountResponse": {
        "type": "object",
        "properties": {
          "loginResponse": {
            "$ref": "#/components/schemas/ApiLoginResponse"
          }
        }
      },
      "ApiConsentManagement": {
        "required": [
          "didomi"
        ],
        "type": "object",
        "properties": {
          "didomi": {
            "$ref": "#/components/schemas/Didomi"
          }
        },
        "description": "Consent management"
      },
      "ApiConsentManagement-Didomi": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "noticeId": {
            "type": "string"
          },
          "tvNoticeId": {
            "type": "string"
          },
          "appNoticeId": {
            "type": "string"
          }
        }
      },
      "ApiContent": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ApiContentPreferencesUrl": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ApiContentUrl": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ApiContinueUph2Assets": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiContinueWatchingAsset"
            }
          }
        }
      },
      "ApiContinueWatchingAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "LIVE_EVENT",
              "AD",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "season": {
            "type": "string"
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "trackSizes": {
            "$ref": "#/components/schemas/TrackSizes"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "live": {
            "type": "boolean"
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeasonResponse"
            }
          },
          "geoCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "runtime": {
            "type": "integer",
            "format": "int32"
          },
          "popularityScores": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "seasonId": {
            "type": "string"
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPublication"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCollectionReference"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userData": {
            "$ref": "#/components/schemas/ApiUserAssetData"
          }
        }
      },
      "ApiContinueWatchingUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiCreateSessionRequest": {
        "required": [
          "accountId",
          "deviceId",
          "expiration",
          "userId"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "anonymous": {
            "type": "boolean"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "ApiCreateSessionResponse": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "The session (bearer) token to use for subsequent requests."
          },
          "expirationDateTime": {
            "type": "string",
            "description": "The time when the session expires.",
            "format": "date-time"
          }
        }
      },
      "ApiCredentials": {
        "required": [
          "passwordTuples"
        ],
        "type": "object",
        "properties": {
          "passwordTuples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordTuple"
            }
          }
        },
        "description": "Value is ignored"
      },
      "ApiCredentialsV3": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Value is ignored.",
            "deprecated": true
          }
        },
        "description": "Value is ignored"
      },
      "ApiDeleteUsersSessionsRequest": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's (login) username."
          }
        }
      },
      "ApiDevice": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "deviceModelId": {
            "type": "string",
            "description": "Not used any longer",
            "deprecated": true
          },
          "type": {
            "type": "string",
            "description": "The type of device",
            "enum": [
              "WEB",
              "MOBILE",
              "TABLET",
              "APPLE_TV",
              "SMART_TV",
              "CONSOLE",
              "STB"
            ]
          }
        }
      },
      "ApiDeviceRegistration": {
        "required": [
          "deviceId",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "A unique ID of this device, used for logins from the device."
          },
          "name": {
            "type": "string",
            "description": "The user's name of the device"
          },
          "type": {
            "type": "string",
            "description": "The type of device",
            "enum": [
              "WEB",
              "MOBILE",
              "TABLET",
              "APPLE_TV",
              "SMART_TV",
              "CONSOLE",
              "STB"
            ]
          }
        }
      },
      "ApiDeviceResponseV2": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "Device id."
          },
          "deviceName": {
            "type": "string",
            "description": "Device name."
          },
          "deviceType": {
            "type": "string",
            "description": "Device types."
          },
          "deviceCreated": {
            "type": "string",
            "description": "When the device was first created.",
            "format": "date-time"
          },
          "sessionCreated": {
            "type": "string",
            "description": "When the session was created.",
            "format": "date-time"
          },
          "sessionExpires": {
            "type": "string",
            "description": "When the session expires.",
            "format": "date-time"
          },
          "currentDevice": {
            "type": "boolean",
            "description": "True if this device is teh device used to list this device.."
          },
          "aboveDeviceLimit": {
            "type": "boolean",
            "description": "If true to many devices are logged in and this session can not be used to play. Normally this will not happen."
          }
        }
      },
      "ApiDeviceRights": {
        "type": "object",
        "properties": {
          "manufacturer": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "rights": {
            "$ref": "#/components/schemas/ApiAssetRights"
          }
        }
      },
      "ApiDevicesResponseV2": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDeviceResponseV2"
            }
          }
        }
      },
      "ApiDownloadInfoResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          },
          "durationInMs": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "audios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoTrack"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiDownloadResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "formats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFormatDownload"
            }
          },
          "playSessionId": {
            "type": "string"
          },
          "playToken": {
            "type": "string"
          },
          "playTokenExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "playTokenExpirationReason": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          },
          "durationInMs": {
            "type": "integer",
            "format": "int64"
          },
          "materialId": {
            "type": "string"
          },
          "materialVersion": {
            "type": "integer",
            "format": "int32"
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "cdn": {
            "$ref": "#/components/schemas/CDN"
          },
          "analytics": {
            "$ref": "#/components/schemas/Analytics"
          }
        }
      },
      "ApiEDRMConfigurationResponse": {
        "type": "object",
        "properties": {
          "adParameter": {
            "type": "string",
            "description": "The ad parameter to use."
          },
          "ownerId": {
            "type": "string",
            "description": "The id of the owner of the media."
          },
          "requestUrl": {
            "type": "string",
            "description": "The url of the server to use."
          },
          "userToken": {
            "type": "string",
            "description": "The user token."
          }
        }
      },
      "ApiEntitlementResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The ID of the asset for TVOD."
          },
          "externalAssetId": {
            "type": "string",
            "description": "The external ID of the asset for TVOD."
          },
          "orderId": {
            "type": "string",
            "description": "The id of the order this entitlement is part of."
          },
          "packageId": {
            "type": "string",
            "description": "The id of the package."
          },
          "paymentDone": {
            "type": "boolean",
            "description": "The flag to show if payment is done."
          },
          "productId": {
            "type": "string",
            "description": "The id of the product."
          },
          "type": {
            "type": "string",
            "description": "The type of the entitlement.",
            "enum": [
              "FVOD",
              "SVOD",
              "TVOD",
              "AVOD",
              "INTERNAL"
            ]
          },
          "validFrom": {
            "type": "string",
            "description": "The start date of the validity of the entitlement.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "The end date of the validity of the entitlement.",
            "format": "date-time"
          }
        }
      },
      "ApiEpgSearchHits": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelEPGResponse"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiEpgUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiEvent": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "assetId": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiEventList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiEvent"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiExchangeTokenRequest": {
        "required": [
          "crmToken",
          "device",
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "crmToken": {
            "type": "string",
            "description": "The CRM token to exchange."
          }
        }
      },
      "ApiExternalPaymentConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "External payments enabled"
          },
          "externalPaymentUrl": {
            "type": "string",
            "description": "External payments url"
          }
        },
        "description": "External payments configuration"
      },
      "ApiExternalReference": {
        "type": "object",
        "properties": {
          "locator": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ApiExternalUrlAction": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAction"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "localizedUrl": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ApiExternalUserSessionRequest": {
        "required": [
          "accountId",
          "device",
          "expiration"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Will be used as accountId and, if userId is not provided, as userId."
          },
          "userId": {
            "type": "string",
            "description": "Optional userId, if not provided accountId will be used also as userId."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "description": "When the session should expire.",
            "format": "date-time"
          }
        }
      },
      "ApiFacebookLoginRequest": {
        "required": [
          "accessToken",
          "device",
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "rememberMe": {
            "type": "boolean",
            "description": "If the session should have a longer lifetime."
          },
          "accessToken": {
            "type": "string",
            "description": "Facebook access token (oauth2)."
          }
        }
      },
      "ApiFairplayConfigurationResponse": {
        "type": "object",
        "properties": {
          "certificateUrl": {
            "type": "string"
          },
          "licenseAcquisitionUrl": {
            "type": "string"
          },
          "secondaryMediaLocator": {
            "type": "string"
          }
        }
      },
      "ApiFavouritesUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiFirebaseAuthenticationRequest": {
        "required": [
          "device",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's login name, 'firebase..<uid>"
          },
          "email": {
            "type": "string",
            "description": "The user's email address, if provided it may be used. The email could also be taken from he access token."
          },
          "displayName": {
            "type": "string",
            "description": "The user's display name, if provided it may be used. The name could also be taken from he access token's name field."
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Ignored.",
            "deprecated": true
          },
          "providerId": {
            "type": "string",
            "description": "Ignored.",
            "deprecated": true
          },
          "accessToken": {
            "type": "string",
            "description": "Firebase access token."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "expiration": {
            "type": "string",
            "description": "When should the session expire. If omitted system default is applied.",
            "format": "date-time"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used at first login when creating the user."
          }
        }
      },
      "ApiFrontendFeatures": {
        "required": [
          "searchLocales",
          "shouldAlwaysUseAnonymousLogin"
        ],
        "type": "object",
        "properties": {
          "shouldAlwaysUseAnonymousLogin": {
            "type": "boolean",
            "description": "Should device always login anonymous."
          },
          "customLandingPageUrl": {
            "type": "string",
            "description": "Custom landing page url"
          },
          "customSignupPageUrl": {
            "type": "string",
            "description": "Custom signup page url"
          },
          "customAccountPageUrl": {
            "type": "string",
            "description": "Custom account page url"
          },
          "customPasswordResetPageUrl": {
            "type": "string",
            "description": "Custom password reset page url"
          },
          "searchLocales": {
            "type": "array",
            "description": "Search languages",
            "items": {
              "type": "string",
              "description": "Search languages"
            }
          }
        },
        "description": "Frontend features configuration"
      },
      "ApiGigyaAuthenticationRequest": {
        "required": [
          "device",
          "jwt"
        ],
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "description": "The Gigya JWT."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used at first login when creating the user."
          }
        }
      },
      "ApiGooglePlayConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Google play enabled"
          }
        },
        "description": "Google play configuration"
      },
      "ApiGooglePlayPurchaseInitializeRequest": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Single asset id that the purchase will entitle. Requires that the product offering requires \"direct asset purchases\"."
          }
        }
      },
      "ApiGooglePlayPurchaseInitializeResponse": {
        "type": "object",
        "properties": {
          "obfuscatedAccountId": {
            "type": "string",
            "description": "To used as obfuscatedAccountId"
          },
          "obfuscatedProfileId": {
            "type": "string",
            "description": "To used as obfuscatedProfileId"
          },
          "purchaseId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "ApiGooglePlayPurchaseVerifyRequest": {
        "required": [
          "purchaseToken"
        ],
        "type": "object",
        "properties": {
          "purchaseToken": {
            "type": "string",
            "description": "As received in the Google Play Purchase."
          }
        }
      },
      "ApiGooglePlayPurchaseVerifyResponse": {
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected",
              "cancelled"
            ]
          }
        }
      },
      "ApiHtmlDocument": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ApiImage": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE",
              "SQUARE",
              "UNKNOWN"
            ]
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiInitialisePayment": {
        "type": "object",
        "properties": {
          "productOfferingId": {
            "type": "string",
            "description": "id of the product offering to get methods and price for."
          },
          "voucherCode": {
            "type": "string",
            "description": "Optional voucher code."
          }
        }
      },
      "ApiInitializePaymentResponse": {
        "type": "object",
        "properties": {
          "stripe": {
            "$ref": "#/components/schemas/ApiStripePaymentMethodsAndPrice"
          }
        }
      },
      "ApiIsEntitledResponse": {
        "type": "object",
        "properties": {
          "paymentDone": {
            "type": "boolean",
            "description": "The status of the payment."
          },
          "status": {
            "type": "string",
            "description": "The status of the entitlement.",
            "enum": [
              "SUCCESS",
              "NOT_ENTITLED",
              "GEO_BLOCKED",
              "DOWNLOAD_BLOCKED",
              "DEVICE_BLOCKED",
              "LICENSE_EXPIRED",
              "NOT_AVAILABLE_IN_FORMAT",
              "CONCURRENT_STREAMS_LIMIT_REACHED",
              "NOT_ENABLED",
              "GAP_IN_EPG",
              "EPG_PLAY_MAX_HOURS",
              "ANONYMOUS_IP_BLOCKED"
            ]
          }
        }
      },
      "ApiLabelFilter": {
        "required": [
          "labelFilterId"
        ],
        "type": "object",
        "properties": {
          "labelFilterId": {
            "type": "string"
          }
        }
      },
      "ApiLastViewedAssetList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          }
        }
      },
      "ApiLastViewedOffset": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "lastViewedOffset": {
            "type": "integer",
            "format": "int64"
          },
          "lastViewedTime": {
            "type": "integer",
            "format": "int64"
          },
          "liveTime": {
            "type": "integer",
            "format": "int64"
          },
          "programId": {
            "type": "string"
          }
        }
      },
      "ApiLastViewedOffsetList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLastViewedOffset"
            }
          }
        }
      },
      "ApiLinkedEntity": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "linkType": {
            "type": "string"
          }
        }
      },
      "ApiLiveEventsUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiLocaleConfig": {
        "required": [
          "defaultLocale",
          "displayLocales"
        ],
        "type": "object",
        "properties": {
          "currencies": {
            "type": "array",
            "description": "Currencies",
            "items": {
              "type": "string",
              "description": "Currencies"
            }
          },
          "displayLocales": {
            "type": "array",
            "description": "Supported display languages",
            "items": {
              "type": "string",
              "description": "Supported display languages"
            }
          },
          "defaultLocale": {
            "type": "string",
            "description": "Default display language"
          }
        },
        "description": "Locale configuration"
      },
      "ApiLocalizedData": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiImage"
            }
          },
          "locale": {
            "type": "string"
          },
          "extendedDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "sortingTitle": {
            "type": "string"
          },
          "tinyDescription": {
            "type": "string"
          },
          "article": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ApiLocalizedPersonData": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          }
        }
      },
      "ApiLocalizedSeoData": {
        "type": "object",
        "properties": {
          "seoDescription": {
            "type": "string"
          },
          "seoTitle": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "ApiLocalizedTag": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "article": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiImage"
            }
          }
        }
      },
      "ApiLocation": {
        "required": [
          "locationKnown"
        ],
        "type": "object",
        "properties": {
          "locationKnown": {
            "type": "boolean",
            "description": "true if location is known."
          },
          "countryCode": {
            "type": "string",
            "description": "ISO country code or null if unknown."
          }
        }
      },
      "ApiLoginRequest": {
        "required": [
          "device",
          "deviceId",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "rememberMe": {
            "type": "boolean",
            "description": "If the session should have a longer lifetime."
          },
          "password": {
            "type": "string",
            "description": "The password of the user."
          },
          "username": {
            "type": "string",
            "description": "The username to login."
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "TRUE: Consent to collect personal information is given.\n FALSE or null: consent is not given now. This may be fine if consent already is given."
          }
        }
      },
      "ApiLoginRequestV1": {
        "required": [
          "device",
          "deviceId",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string"
          }
        }
      },
      "ApiLoginResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The user's accountId."
          },
          "userId": {
            "type": "string",
            "description": "The user's userId."
          },
          "accountStatus": {
            "type": "string",
            "description": "Historical artifact. Always \"OK\"",
            "deprecated": true
          },
          "crmToken": {
            "type": "string",
            "description": "The token of the underlying CRM to use if talking directly to the CRM."
          },
          "expirationDateTime": {
            "type": "string",
            "description": "When the session expires.",
            "format": "date-time"
          },
          "sessionToken": {
            "type": "string",
            "description": "The (bearer) session token to use in subsequent requests."
          },
          "informationCollectionConsentGiven": {
            "type": "string",
            "format": "date-time"
          },
          "informationCollectionConsentRequiredDate": {
            "type": "string",
            "format": "date-time"
          },
          "language": {
            "type": "string",
            "description": "use data in userProfile.",
            "deprecated": true
          },
          "isOverDeviceLimit": {
            "type": "boolean",
            "description": "If true to many devices are logged in and this session can not be used to play. Normally this will not happen."
          },
          "child": {
            "type": "boolean",
            "description": "use data in userProfile.",
            "deprecated": true
          },
          "profileType": {
            "type": "string",
            "description": "use data in userProfile.",
            "deprecated": true
          },
          "userProfile": {
            "$ref": "#/components/schemas/ApiUserProfile"
          }
        }
      },
      "ApiMarkerPoint": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "endOffset": {
            "type": "integer",
            "format": "int64"
          },
          "thumbnail": {
            "type": "string"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSimpleLocalizedData"
            }
          }
        }
      },
      "ApiMedia": {
        "type": "object",
        "properties": {
          "drm": {
            "type": "string"
          },
          "durationMillis": {
            "type": "integer",
            "format": "int64"
          },
          "format": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "mediaId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "programId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiMultiSearchResponse": {
        "type": "object",
        "properties": {
          "assetHits": {
            "$ref": "#/components/schemas/ApiSearchList"
          },
          "tagHits": {
            "$ref": "#/components/schemas/ApiTagSearchList"
          },
          "participantHits": {
            "$ref": "#/components/schemas/ApiParticipantSearchList"
          }
        }
      },
      "ApiOauthAuthenticationRequest": {
        "required": [
          "device",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": " OAuth access token."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used at first login when creating the user."
          }
        }
      },
      "ApiOAuthLoginRequest": {
        "required": [
          "accessToken",
          "device",
          "deviceId",
          "type"
        ],
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/ApiDevice"
          },
          "deviceId": {
            "type": "string",
            "description": "The device id."
          },
          "rememberMe": {
            "type": "boolean",
            "description": "If the session should have a longer lifetime."
          },
          "accessToken": {
            "type": "string",
            "description": "OAuth access token (oauth2)."
          },
          "type": {
            "type": "string",
            "description": "The OAuth provider type."
          }
        }
      },
      "ApiOidcAuthenticationRequest": {
        "required": [
          "device"
        ],
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "description": "ID token"
          },
          "code": {
            "type": "string",
            "description": "code from the Authorization Code flow"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used at first login when creating the user."
          },
          "code_verifier": {
            "type": "string",
            "description": "challenge used in the Authorization Code with PKCE flow"
          },
          "redirect_uri": {
            "type": "string",
            "description": "a valid redirect URI configured on the OP"
          }
        }
      },
      "ApiOverlayWidget": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "ApiParentalRating": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "rating": {
            "type": "string"
          },
          "scheme": {
            "type": "string"
          }
        }
      },
      "ApiParticipant": {
        "type": "object",
        "properties": {
          "participantId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "dateOfDeath": {
            "type": "string",
            "format": "date"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedPersonData"
            }
          }
        }
      },
      "ApiParticipantSearchList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiParticipantsSearch"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiParticipantsSearch": {
        "type": "object",
        "properties": {
          "participant": {
            "$ref": "#/components/schemas/ApiParticipant"
          }
        }
      },
      "ApiPasswordHashConfig": {
        "type": "object",
        "properties": {
          "sharedRandom": {
            "type": "string"
          },
          "algorithms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Algorithm"
            }
          }
        }
      },
      "ApiPasswordPolicy": {
        "required": [
          "minimumGroups",
          "minimumLength"
        ],
        "type": "object",
        "properties": {
          "minimumLength": {
            "type": "integer",
            "description": "Minimum number of characters in passwords",
            "format": "int32"
          },
          "minimumGroups": {
            "type": "integer",
            "description": "Minimum number character groups used, eg. alfa, ALFA, 0..9, separators",
            "format": "int32"
          }
        },
        "description": "Password policy"
      },
      "ApiPaymentConfig": {
        "required": [
          "appstore",
          "external",
          "googleplay",
          "stripe",
          "vouchers"
        ],
        "type": "object",
        "properties": {
          "appstore": {
            "$ref": "#/components/schemas/ApiAppStoreConfig"
          },
          "external": {
            "$ref": "#/components/schemas/ApiExternalPaymentConfig"
          },
          "googleplay": {
            "$ref": "#/components/schemas/ApiGooglePlayConfig"
          },
          "stripe": {
            "$ref": "#/components/schemas/ApiStripeConfig"
          },
          "vouchers": {
            "$ref": "#/components/schemas/ApiVouchersConfig"
          }
        },
        "description": "Payments configuration"
      },
      "ApiPaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the payment method"
          },
          "cardSummary": {
            "$ref": "#/components/schemas/ApiCardSummary"
          },
          "preferred": {
            "type": "boolean"
          }
        }
      },
      "ApiPaymentMethods": {
        "type": "object",
        "properties": {
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPaymentMethod"
            }
          }
        }
      },
      "ApiPerson": {
        "type": "object",
        "properties": {
          "function": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "dateOfDeath": {
            "type": "string",
            "format": "date"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedPersonData"
            }
          }
        }
      },
      "ApiPinCodeResponse": {
        "required": [
          "grants",
          "modified",
          "pinId"
        ],
        "type": "object",
        "properties": {
          "pinId": {
            "type": "string",
            "description": "the PIN's pincodeId."
          },
          "grants": {
            "type": "array",
            "description": "List of application specified grants.",
            "items": {
              "type": "string",
              "description": "List of application specified grants."
            }
          },
          "modified": {
            "type": "string",
            "description": "When was the pin last modified."
          }
        }
      },
      "ApiPinCodeSetRequest": {
        "required": [
          "grants",
          "inClear"
        ],
        "type": "object",
        "properties": {
          "inClear": {
            "type": "string",
            "description": "PIN in clear text."
          },
          "grants": {
            "type": "array",
            "description": "List of application specified grants, the grants has no semantics in the backend. These grants will be returned if the PIN is successfully verified.",
            "items": {
              "type": "string",
              "description": "List of application specified grants, the grants has no semantics in the backend. These grants will be returned if the PIN is successfully verified."
            }
          }
        }
      },
      "ApiPinCodeValidationRequest": {
        "required": [
          "inClear"
        ],
        "type": "object",
        "properties": {
          "inClear": {
            "type": "string",
            "description": "PIN in clear text."
          }
        }
      },
      "ApiPlayRequest": {
        "required": [
          "drm",
          "format"
        ],
        "type": "object",
        "properties": {
          "drm": {
            "type": "string",
            "description": "The requested DRM. The token will be adapted according to this parameter.",
            "enum": [
              "PLAYREADY",
              "EDRM",
              "EDRM_FAIRPLAY",
              "CENC",
              "UNENCRYPTED",
              "FAIRPLAY"
            ]
          },
          "format": {
            "type": "string",
            "description": "The requested format. The server will make sure that the asset is available in this format.",
            "enum": [
              "DASH",
              "SMOOTHSTREAMING",
              "HLS",
              "MP4",
              "SYNDICATED",
              "MP3",
              "AAC"
            ]
          }
        }
      },
      "ApiPlayResponse": {
        "type": "object",
        "properties": {
          "airplayBlocked": {
            "type": "boolean",
            "description": "If airplay is blocked"
          },
          "cencConfig": {
            "$ref": "#/components/schemas/ApiCencConfigurationResponse"
          },
          "edrmConfig": {
            "$ref": "#/components/schemas/ApiEDRMConfigurationResponse"
          },
          "entitlementType": {
            "type": "string",
            "description": "The type of entitlement that granted access to this play.",
            "enum": [
              "TVOD",
              "SVOD",
              "FVOD",
              "AVOD"
            ]
          },
          "fairplayConfig": {
            "$ref": "#/components/schemas/ApiFairplayConfigurationResponse"
          },
          "widevineConfig": {
            "$ref": "#/components/schemas/ApiWidevineConfigurationResponse"
          },
          "ffEnabled": {
            "type": "boolean",
            "description": "If fast forward is enabled"
          },
          "lastViewedOffset": {
            "type": "integer",
            "description": "Last viewed offset",
            "format": "int64"
          },
          "lastViewedTime": {
            "type": "integer",
            "description": "Last viewed time",
            "format": "int64"
          },
          "licenseActivation": {
            "type": "string",
            "description": "The datetime of activation of the drm license.",
            "format": "date-time"
          },
          "licenseExpiration": {
            "type": "string",
            "description": "The datetime of expiration of the drm license.",
            "format": "date-time"
          },
          "licenseExpirationReason": {
            "type": "string",
            "description": "The reason of expiration of the drm license.",
            "enum": [
              "SUCCESS",
              "NOT_ENTITLED",
              "GEO_BLOCKED",
              "DOWNLOAD_BLOCKED",
              "DEVICE_BLOCKED",
              "LICENSE_EXPIRED",
              "NOT_AVAILABLE_IN_FORMAT",
              "CONCURRENT_STREAMS_LIMIT_REACHED",
              "NOT_ENABLED",
              "GAP_IN_EPG",
              "EPG_PLAY_MAX_HOURS",
              "ANONYMOUS_IP_BLOCKED"
            ]
          },
          "live": {
            "type": "boolean",
            "description": "If this is a live entitlement."
          },
          "liveTime": {
            "type": "integer",
            "description": "Live time",
            "format": "int64"
          },
          "maxBitrate": {
            "type": "integer",
            "description": "Max bitrate to use",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "description": "Max height resolution",
            "format": "int32"
          },
          "mdnRequestRouterUrl": {
            "type": "string",
            "description": "MDN Request Router Url"
          },
          "mediaLocator": {
            "type": "string",
            "description": "The information needed to locate the media. FOR EDRM this will be the media uid, for other formats it's the URL\n of the media."
          },
          "adMediaLocator": {
            "type": "string",
            "description": "Media locator to used for add servers SDKs"
          },
          "minBitrate": {
            "type": "integer",
            "description": "Min bitrate to use",
            "format": "int32"
          },
          "playSessionId": {
            "type": "string",
            "description": "Unique id of this playback session, all analytics events for this session should be reported on with this id"
          },
          "playToken": {
            "type": "string",
            "description": "Play token to use for either PlayReady or MRR.\n Will be empty if the status is not SUCCESS."
          },
          "playTokenExpiration": {
            "type": "string",
            "description": "The expiration of the the play token. The player needs to be initialized and done the play call before this.",
            "format": "date-time"
          },
          "productId": {
            "type": "string",
            "description": "Identity of the product that permitted playback of the asset"
          },
          "rwEnabled": {
            "type": "boolean",
            "description": "If rewind is enabled"
          },
          "timeshiftEnabled": {
            "type": "boolean",
            "description": "If timeshift is disabled"
          }
        }
      },
      "ApiPreferencesListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiPreferencesListResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPreferencesListItem"
            }
          },
          "query": {
            "type": "string"
          }
        }
      },
      "ApiPresentation": {
        "type": "object",
        "properties": {
          "fallback": {
            "$ref": "#/components/schemas/PresentationItem"
          },
          "localized": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PresentationItem"
            }
          }
        }
      },
      "ApiPresentationFromAssetContent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContent"
          },
          {
            "type": "object",
            "properties": {
              "presentation": {
                "$ref": "#/components/schemas/ApiPresentation"
              },
              "errorMessage": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ApiPrimetimeAuthenticationRequest": {
        "required": [
          "device",
          "mediaToken"
        ],
        "type": "object",
        "properties": {
          "mediaToken": {
            "type": "string",
            "description": "The Adobe Primetime AuthZ media token."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          },
          "language": {
            "type": "string",
            "description": "The user's preferred language. Only used at first login when creating the user."
          }
        }
      },
      "ApiProductOfferingPurchase": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "businessUnitId": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "description": "Time of purchase. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "transactionId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "description": "Start of entitlement. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "description": "End of entitlement. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "deprecated": true
          },
          "purchaseId": {
            "type": "string",
            "description": "Id of this purchase."
          },
          "renewAt": {
            "type": "string",
            "description": "If present, next time for renewal. ISO 8601 Date and time.",
            "format": "date-time"
          },
          "productOfferingId": {
            "type": "string",
            "description": "Id of the purchased product offering."
          },
          "apiStoreProductOffering": {
            "$ref": "#/components/schemas/ApiStoreProductOffering"
          },
          "status": {
            "type": "string",
            "enum": [
              "REJECTED",
              "PENDING",
              "FULFILLED"
            ]
          },
          "activated": {
            "type": "boolean",
            "description": "Indicates that the user has started to watch the content."
          }
        }
      },
      "ApiProductOfferingPurchases": {
        "type": "object",
        "properties": {
          "consumedProductOfferingDiscounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "purchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProductOfferingPurchase"
            }
          }
        }
      },
      "ApiProductOfferingTransactions": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreTransaction"
            }
          }
        }
      },
      "ApiProductOfferingTransactionsProductOfferingPair": {
        "type": "object",
        "properties": {
          "transactions": {
            "$ref": "#/components/schemas/ApiStoreTransaction"
          },
          "productOffering": {
            "$ref": "#/components/schemas/ApiStoreProductOffering"
          }
        }
      },
      "ApiProductOfferingTransactionsProductOfferingPairList": {
        "type": "object",
        "properties": {
          "transactionsProductOfferingPairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiProductOfferingTransactionsProductOfferingPair"
            }
          }
        }
      },
      "ApiProgram": {
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "programId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          }
        }
      },
      "ApiProgramResponse": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "assetId": {
            "type": "string"
          },
          "blackout": {
            "type": "boolean"
          },
          "catchup": {
            "type": "boolean"
          },
          "catchupBlocked": {
            "type": "boolean"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "channelId": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "programId": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "vodAvailable": {
            "type": "boolean"
          }
        }
      },
      "ApiPublication": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDeviceRights"
            }
          },
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publicationDate": {
            "type": "string",
            "format": "date-time"
          },
          "publicationId": {
            "type": "string"
          },
          "rights": {
            "$ref": "#/components/schemas/ApiAssetRights"
          },
          "services": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "toDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiPurchaseRequest": {
        "type": "object",
        "properties": {
          "stripePurchase": {
            "$ref": "#/components/schemas/ApiStripePurchaseRequest"
          },
          "voucherCode": {
            "type": "string",
            "description": "Voucher code that should be applied to the purchase"
          },
          "assetId": {
            "type": "string",
            "description": "Single asset id that the purchase will entitle.\nRequires that the product offering requires \"direct asset purchases\""
          },
          "storePaymentMethod": {
            "type": "boolean",
            "description": "Store payment method for future usage.\nThe details is stored within the used payment provider."
          }
        }
      },
      "ApiPurchaseResponse": {
        "type": "object",
        "properties": {
          "purchaseId": {
            "type": "string",
            "deprecated": true
          },
          "purchase": {
            "$ref": "#/components/schemas/ApiStorePurchase"
          },
          "apiStripePurchaseResponse": {
            "$ref": "#/components/schemas/ApiStripePurchaseResponse"
          }
        }
      },
      "ApiPurchaseVerificationRequest": {
        "type": "object"
      },
      "ApiQueryParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "deprecated": true
      },
      "ApiRecentlyWatchedUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiRecommendedAssets": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          }
        }
      },
      "ApiRecommendedUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiRecommendedWatchNext": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          }
        }
      },
      "ApiSearch": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ApiAsset"
          },
          "highlightedDescription": {
            "type": "string"
          },
          "highlightedTitle": {
            "type": "string"
          }
        }
      },
      "ApiSearchList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSearch"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiSeason": {
        "type": "object",
        "properties": {
          "availableDate": {
            "type": "string",
            "format": "date-time"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "endYear": {
            "type": "integer",
            "format": "int32"
          },
          "episodeCount": {
            "type": "integer",
            "format": "int32"
          },
          "episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAsset"
            }
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiExternalReference"
            }
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLinkedEntity"
            }
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedData"
            }
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "season": {
            "type": "string"
          },
          "seasonId": {
            "type": "string"
          },
          "startYear": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTag"
            }
          },
          "tvShowId": {
            "type": "string"
          }
        }
      },
      "ApiSeasonList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSeason"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiSentryConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "If Sentry is to be enabled"
          },
          "sampleRate": {
            "type": "number",
            "description": "How much reporting to do. 0.0 - 1.0.  0.0 report nothing, 0.5 means report every second session etc.",
            "format": "double"
          }
        },
        "description": "Sentry configuaration"
      },
      "ApiSessionResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The user's accountId."
          },
          "userId": {
            "type": "string",
            "description": "The user's userId."
          },
          "crmToken": {
            "type": "string",
            "description": "The token of the underlying CRM to use if talking directly to the CRM."
          },
          "overTheDeviceLimit": {
            "type": "boolean",
            "description": "If true to many devices are logged in and this session can not be used to play. Normally this will not happen."
          },
          "configReloadQueryParameter": {
            "$ref": "#/components/schemas/ApiQueryParameter"
          },
          "userProfile": {
            "$ref": "#/components/schemas/ApiUserProfile"
          }
        }
      },
      "ApiSetPasswordWithTokenRequestV2": {
        "required": [
          "credentials"
        ],
        "type": "object",
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean"
          }
        }
      },
      "ApiSetPwdWithTokenV3": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The user's new, or first password. Must follow the system's configured policy."
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "If true consent to information collection is given now. If false or null no consent given now."
          }
        }
      },
      "ApiSetUserPreferenceRequest": {
        "required": [
          "preferences"
        ],
        "type": "object",
        "properties": {
          "preferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ApiSimpleAction": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAction"
          }
        ]
      },
      "ApiSimpleLocalizedData": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/ApiImage"
          }
        }
      },
      "ApiSingleAssetUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiStoreAppStoreReference": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          }
        }
      },
      "ApiStoreDiscount": {
        "type": "object",
        "properties": {
          "discountedOfferingPrice": {
            "$ref": "#/components/schemas/ApiStoreProductOfferingPrice"
          }
        }
      },
      "ApiStoreGooglePlayReference": {
        "type": "object",
        "properties": {
          "skuId": {
            "type": "string"
          }
        }
      },
      "ApiStoreLocalizedMetaData": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ApiStoreLocalizedName": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ApiStoreLocalizedTitle": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "ApiStorePrice": {
        "type": "object",
        "properties": {
          "priceClassId": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "vatIncluded": {
            "type": "boolean"
          },
          "vatPercentage": {
            "type": "number",
            "format": "double"
          },
          "rentalLength": {
            "type": "string",
            "enum": [
              "NO_RENTAL",
              "PT24H",
              "PT48H",
              "PT72H",
              "PT96H",
              "PT120H",
              "PT144H",
              "PT168H",
              "PT720H"
            ]
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "NO_RECURRENCE",
              "P1Y",
              "P6M",
              "P3M",
              "P1M",
              "P7D"
            ]
          }
        }
      },
      "ApiStorePriceTag": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount in minor units of the currency. e.g. 10 EUR is 1000, while 100 JPY is 100",
            "format": "int64"
          },
          "fractionDigits": {
            "type": "integer",
            "description": "Number of fraction digits of the currency as specified by ISO 4217, e.g. for EUR 2 and for JPY 0",
            "format": "int32"
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 Currency Code"
          }
        },
        "description": "Price after any discount"
      },
      "ApiStoreProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "productType": {
            "type": "string",
            "enum": [
              "PACKAGE",
              "SVOD",
              "TVOD",
              "AVOD",
              "FVOD"
            ]
          },
          "preRequisiteProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProduct"
            }
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStorePrice"
            }
          },
          "subProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProduct"
            }
          }
        }
      },
      "ApiStoreProductOffering": {
        "type": "object",
        "properties": {
          "productOfferingId": {
            "type": "string",
            "description": "Product Offering Id"
          },
          "recurrence": {
            "type": "string",
            "description": "Recurrence interval, ISO 8601 Duration",
            "nullable": true
          },
          "rentalLength": {
            "type": "string",
            "description": "Rental length, ISO 8601 Duration"
          },
          "rentalExpiryWindow": {
            "type": "string",
            "description": "Rental expiry window, ISO 8601 Duration",
            "nullable": true
          },
          "localizedMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreLocalizedMetaData"
            }
          },
          "accountProductId": {
            "type": "string"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "offeringPrice": {
            "$ref": "#/components/schemas/ApiStoreProductOfferingPrice"
          },
          "googlePlayReference": {
            "$ref": "#/components/schemas/ApiStoreGooglePlayReference"
          },
          "appStoreReference": {
            "$ref": "#/components/schemas/ApiStoreAppStoreReference"
          },
          "entitlementStart": {
            "type": "string",
            "description": "If present the time at which entitlement starts, if not present entitlement starts ar time of purchase, ISO 8601 Date and time",
            "format": "date-time",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/ApiStoreProductOfferingDiscount"
          },
          "productRequiresSelectAsset": {
            "type": "boolean",
            "description": "if true, purchase of single asset. The assetId must be provided in the purchase",
            "nullable": true
          },
          "productOfferingType": {
            "type": "string",
            "description": "Type of offering: purchase, rental, event, subscription"
          },
          "paymentMethodTypes": {
            "type": "array",
            "description": "If present, this is a list of stripe payment method types that are allowed with this offering",
            "items": {
              "type": "string",
              "description": "If present, this is a list of stripe payment method types that are allowed with this offering"
            }
          },
          "id": {
            "type": "string",
            "description": "Product Offering Id",
            "deprecated": true
          }
        }
      },
      "ApiStoreProductOfferingDiscount": {
        "type": "object",
        "properties": {
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "numberOfRecurringPayments": {
            "type": "integer",
            "format": "int32"
          },
          "freePeriod": {
            "type": "object",
            "properties": {
              "years": {
                "type": "integer",
                "format": "int32"
              },
              "months": {
                "type": "integer",
                "format": "int32"
              },
              "days": {
                "type": "integer",
                "format": "int32"
              },
              "zero": {
                "type": "boolean"
              },
              "negative": {
                "type": "boolean"
              },
              "units": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "durationEstimated": {
                      "type": "boolean"
                    },
                    "duration": {
                      "type": "object",
                      "properties": {
                        "seconds": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "zero": {
                          "type": "boolean"
                        },
                        "nano": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "negative": {
                          "type": "boolean"
                        },
                        "positive": {
                          "type": "boolean"
                        }
                      }
                    },
                    "timeBased": {
                      "type": "boolean"
                    },
                    "dateBased": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "chronology": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "calendarType": {
                    "type": "string"
                  },
                  "isoBased": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "description": "The one-time discounted price on a product offering",
        "nullable": true
      },
      "ApiStoreProductOfferingPrice": {
        "type": "object",
        "properties": {
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "countryCode": {
            "type": "string",
            "description": "In which country this offering is valid, if not present anywhere\nFormat: ISO 3166-1 alpha-2, if not present the offering is available globally"
          },
          "vat": {
            "$ref": "#/components/schemas/ApiStoreVat"
          }
        }
      },
      "ApiStoreProductOfferings": {
        "type": "object",
        "properties": {
          "productOfferings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProductOffering"
            }
          }
        }
      },
      "ApiStorePromotion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customer": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "discount": {
            "$ref": "#/components/schemas/ApiStoreDiscount"
          },
          "productOfferingIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fullDiscountVoucher": {
            "type": "boolean"
          }
        }
      },
      "ApiStorePromotionProductOfferings": {
        "type": "object",
        "properties": {
          "productOfferings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreProductOffering"
            }
          },
          "promotion": {
            "$ref": "#/components/schemas/ApiStorePromotion"
          }
        }
      },
      "ApiStorePurchase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/ApiStoreProduct"
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time"
          },
          "renewAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "REJECTED",
              "PENDING",
              "FULFILLED"
            ]
          },
          "purchaseStatus": {
            "type": "string",
            "enum": [
              "REJECTED",
              "PENDING",
              "FULFILLED"
            ]
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreTransaction"
            }
          }
        }
      },
      "ApiStorePurchaseTransaction": {
        "type": "object",
        "properties": {
          "productOfferingId": {
            "type": "string"
          },
          "productOfferingType": {
            "type": "string",
            "description": "Type of offering: purchase, rental, event, subscription"
          },
          "localizedProductOffering": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreLocalizedName"
            }
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time"
          },
          "renewAt": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreTransaction"
            }
          },
          "voucherCode": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "localizedAsset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiStoreLocalizedTitle"
            }
          }
        }
      },
      "ApiStoreTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "deprecated": true
          },
          "transactionId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected",
              "cancelled"
            ]
          },
          "paymentProviderRequestId": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "completedTime": {
            "type": "string"
          },
          "refunded": {
            "type": "boolean"
          },
          "paymentProviderTransactionId": {
            "type": "string"
          },
          "paymentProviderType": {
            "type": "string"
          },
          "productOfferingId": {
            "type": "string"
          },
          "receiptUrl": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ApiStoreVat": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "description": "The percentage of the price to paid a VAT, e.g. 12.5",
            "format": "double"
          },
          "included": {
            "type": "boolean",
            "description": "If the VAT is part of the product offering price"
          }
        }
      },
      "ApiStripeConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Stripe enabled"
          },
          "stripePublicKey": {
            "type": "string",
            "description": "Stripe public key"
          }
        },
        "description": "Stripe configuration"
      },
      "ApiStripePaymentMethodsAndPrice": {
        "type": "object",
        "properties": {
          "methodTypes": {
            "type": "array",
            "description": "One entry for each relevant payment method type, such as \"card\", \"ideal\"",
            "items": {
              "$ref": "#/components/schemas/ApiStripePaymentMethodTypeAndPrice"
            }
          },
          "wallets": {
            "type": "array",
            "description": "One entry for each relevant wallet, such as \"apple\", \"google\"",
            "items": {
              "$ref": "#/components/schemas/ApiStripeWalletAndPrice"
            }
          }
        },
        "description": "If Stripe is enabled."
      },
      "ApiStripePaymentMethodTypeAndPrice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name e.g card or ideal"
          },
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "recurring": {
            "type": "boolean",
            "description": "Will payment be recurring"
          }
        },
        "description": "One entry for each relevant payment method type, such as \"card\", \"ideal\""
      },
      "ApiStripePurchaseRequest": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string"
          }
        },
        "description": "Purchase using Stripe as payment platform.\nCreates an stripe intent.\nRequires that Stripe is configured for the customer/business unit."
      },
      "ApiStripePurchaseResponse": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "If setupCard == false the clientSecret is paymentIntent clientSecret. If setupCard == true the clientSecret is setupIntent clientSecret"
          },
          "setupCard": {
            "type": "boolean",
            "description": "If true setup card else payment"
          },
          "stripeCustomerId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "paymentMethodTypes": {
            "type": "array",
            "description": "\"card\" [, \"ideal\"]   Are the currently supported types",
            "items": {
              "type": "string",
              "description": "\"card\" [, \"ideal\"]   Are the currently supported types"
            }
          }
        }
      },
      "ApiStripeWalletAndPrice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of wallet e.g apple or google"
          },
          "price": {
            "$ref": "#/components/schemas/ApiStorePriceTag"
          },
          "recurring": {
            "type": "boolean",
            "description": "Will payment be recurring"
          }
        },
        "description": "One entry for each relevant wallet, such as \"apple\", \"google\""
      },
      "ApiSubtitleTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiSystemConfig": {
        "required": [
          "access",
          "analytics",
          "frontendFeatures",
          "localization",
          "payments",
          "production",
          "sentry"
        ],
        "type": "object",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/ApiAccessConfig"
          },
          "analytics": {
            "$ref": "#/components/schemas/ApiAnalyticsConfig"
          },
          "frontendFeatures": {
            "$ref": "#/components/schemas/ApiFrontendFeatures"
          },
          "localization": {
            "$ref": "#/components/schemas/ApiLocaleConfig"
          },
          "payments": {
            "$ref": "#/components/schemas/ApiPaymentConfig"
          },
          "playerUrl": {
            "type": "string",
            "description": "Url to player"
          },
          "production": {
            "type": "boolean",
            "description": "True if production environment"
          },
          "sentry": {
            "$ref": "#/components/schemas/ApiSentryConfig"
          }
        }
      },
      "ApiSystemTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSystemTagImage"
            }
          }
        }
      },
      "ApiSystemTagImage": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "selectors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiTag": {
        "type": "object",
        "properties": {
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "tagValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagValues"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ApiTagFeedUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentPreferencesUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiTagList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagType"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiTagSearch": {
        "type": "object",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/ApiTagType"
          },
          "highlightedTitle": {
            "type": "string"
          }
        }
      },
      "ApiTagSearchList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagSearch"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "suggestion": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiTagType": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTagType"
            }
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedTag"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scheme": {
            "type": "string"
          },
          "tagId": {
            "type": "string"
          }
        }
      },
      "ApiTagTypeUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiTagValues": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "string"
          }
        }
      },
      "ApiTrackInfo": {
        "type": "object",
        "properties": {
          "targetBitrate": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiTrackSizes": {
        "type": "object",
        "properties": {
          "audioTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiAudioTrackInfo"
            }
          },
          "videoTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiVideoTrackInfo"
            }
          },
          "subtitleTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSubtitleTrackInfo"
            }
          }
        }
      },
      "ApiTvodUrl": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiContentUrl"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authorized": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiTvShowInfo": {
        "type": "object",
        "properties": {
          "localizedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLocalizedData"
            }
          }
        }
      },
      "ApiUpdatePaymentMethodRequest": {
        "type": "object",
        "properties": {
          "expiryMonth": {
            "type": "integer",
            "format": "int32"
          },
          "expiryYear": {
            "type": "integer",
            "format": "int32"
          },
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "ApiUpdatePrederredPaymentMethodRequest": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "ApiUserAssetData": {
        "type": "object",
        "properties": {
          "playHistory": {
            "$ref": "#/components/schemas/ApiUserAssetPlayHistory"
          }
        }
      },
      "ApiUserAssetPlayHistory": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "lastViewedOffset": {
            "type": "integer",
            "format": "int64"
          },
          "lastViewedTime": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "programId": {
            "type": "string"
          }
        }
      },
      "ApiUserAttributeRequest": {
        "required": [
          "attributeId"
        ],
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "string",
            "description": "attributeId"
          },
          "value": {
            "type": "object",
            "description": "New value, null -> use default."
          }
        }
      },
      "ApiUserAttributeResponse": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "string",
            "description": "attributeId"
          },
          "type": {
            "type": "string",
            "description": "boolean:  value range null/undefined, false, true, email: valid email address, string: any string, integer: integer number e.g 1, real: Real/decimal number e.g 1.1, enum: a value defined by enums."
          },
          "requiredAtSignup": {
            "type": "boolean",
            "description": "If true the user must provide a value, whicgh mayt be the default value."
          },
          "defaultValue": {
            "type": "object",
            "description": "The attributes default value."
          },
          "value": {
            "type": "object",
            "description": "The value set by the user."
          },
          "enums": {
            "type": "array",
            "description": "If type = \"enum™\": The enums value set.",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributesEnumValue"
            }
          },
          "range": {
            "$ref": "#/components/schemas/ApiUserAttributesRange"
          },
          "valueSet": {
            "type": "boolean",
            "description": "If true the attribute has been set, potentially with a null/undefined value, in which case the default value is used."
          },
          "localized": {
            "type": "array",
            "description": "Localized metadata.",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributesLocalizedMetadata"
            }
          }
        }
      },
      "ApiUserAttributesEnumValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Used as value of the enum."
          },
          "localized": {
            "type": "array",
            "description": "Localized metadata.",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributesLocalizedMetadata"
            }
          }
        },
        "description": "If type = \"enum™\": The enums value set."
      },
      "ApiUserAttributesLocalizedMetadata": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "description": "Localized metadata."
      },
      "ApiUserAttributesRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "object"
          },
          "max": {
            "type": "object"
          }
        },
        "description": "if type = \"integer\" or \"real\" and any range is specified: min and max values."
      },
      "ApiUserCapabilities": {
        "type": "object",
        "properties": {
          "canChangePassword": {
            "type": "boolean"
          },
          "canChangeUserNameAndEmail": {
            "type": "boolean"
          },
          "canChangeEmail": {
            "type": "boolean"
          },
          "canManageAccount": {
            "type": "boolean"
          },
          "canManageDevices": {
            "type": "boolean"
          },
          "canManagePayments": {
            "type": "boolean"
          },
          "canManagePurchases": {
            "type": "boolean"
          }
        }
      },
      "ApiUserDetailsResponse": {
        "required": [
          "attributes",
          "capabilities",
          "language",
          "username"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "defaultLanguage": {
            "type": "string",
            "deprecated": true
          },
          "child": {
            "type": "boolean"
          },
          "profileType": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "capabilities": {
            "$ref": "#/components/schemas/ApiUserCapabilities"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributeResponse"
            }
          }
        }
      },
      "ApiUserDetailsUpdateRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name used e.g. as email display name, null if not changed"
          },
          "language": {
            "type": "string",
            "description": "Preferred language, null if not changed."
          },
          "child": {
            "type": "boolean",
            "description": "True if user is a child."
          },
          "profileType": {
            "type": "string",
            "description": "Application defined value. Can be used e.g. to carry mapping to parental rating configuration, null if not changed"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Application defined map String->String. Can be used for arbitrary application specific data, null if not changed"
            },
            "description": "Application defined map String->String. Can be used for arbitrary application specific data, null if not changed"
          }
        }
      },
      "ApiUserPreferenceResponse": {
        "type": "object",
        "properties": {
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "preferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ApiUserProfile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's (login) name."
          },
          "displayName": {
            "type": "string",
            "description": "Display name (full name)."
          },
          "created": {
            "type": "string",
            "description": "Created at.",
            "format": "date-time"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address."
          },
          "userId": {
            "type": "string",
            "description": "User Id."
          },
          "profileType": {
            "type": "string",
            "description": "Application defined value. Can be used e.g. to carry mapping to parental rating configuration."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Application defined map String->String. Can be used for arbitrary application specific data"
            },
            "description": "Application defined map String->String. Can be used for arbitrary application specific data"
          },
          "active": {
            "type": "boolean",
            "description": "True if this user profile is the active user (the user fetching this info."
          },
          "owner": {
            "type": "boolean",
            "description": "True if user is owner of the account."
          },
          "emailAddressRequired": {
            "type": "boolean",
            "description": "True if the user must have an email address. Check User attribute primary-email-address instead.",
            "deprecated": true
          },
          "language": {
            "type": "string",
            "description": "Language code of the user's preferred language"
          },
          "capabilities": {
            "$ref": "#/components/schemas/ApiUserCapabilities"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUserAttributeResponse"
            }
          }
        }
      },
      "ApiUserProfileCreateRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "child": {
            "type": "boolean"
          },
          "profileType": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          }
        }
      },
      "ApiUserProfiles": {
        "type": "object",
        "properties": {
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUserProfile"
            }
          },
          "pinCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPinCodeResponse"
            }
          }
        }
      },
      "ApiUserSelfServiceCreateRequestV2": {
        "required": [
          "credentials",
          "device",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "mobile": {
            "type": "string",
            "deprecated": true
          },
          "language": {
            "type": "string"
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean"
          },
          "credentials": {
            "$ref": "#/components/schemas/ApiCredentials"
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiUserSelfServiceCreateResponse": {
        "type": "object",
        "properties": {
          "unConfirmed": {
            "type": "boolean",
            "description": "If TRUE the user need to confirm creation bu following email/sms instructions\n If FALSE the account is good to go."
          },
          "loginResponse": {
            "$ref": "#/components/schemas/ApiLoginResponse"
          }
        }
      },
      "ApiUserSignupConfirm": {
        "type": "object",
        "properties": {
          "deviceRegistration": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiUserSignupRequestV3": {
        "required": [
          "device",
          "displayName",
          "emailAddress",
          "password"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The user's real name."
          },
          "emailAddress": {
            "type": "string",
            "description": "The user's email address. Will also be used as username."
          },
          "language": {
            "type": "string",
            "description": "Preferred language. If not set fall back to business unit's default language. iso 639-1 language code."
          },
          "informationCollectionConsentGivenNow": {
            "type": "boolean",
            "description": "If true consent to information collection is given now. If false or null no consent given now."
          },
          "password": {
            "type": "string",
            "description": "The user's password. Must follow the system's configured policy."
          },
          "device": {
            "$ref": "#/components/schemas/ApiDeviceRegistration"
          }
        }
      },
      "ApiUserSignupResponse": {
        "required": [
          "unConfirmed"
        ],
        "type": "object",
        "properties": {
          "unConfirmed": {
            "type": "boolean",
            "description": "If true the user need to confirm creation bu following email instructions. If false the account is good to go"
          },
          "loginResponse": {
            "$ref": "#/components/schemas/ApiLoginResponse"
          }
        }
      },
      "ApiVerifiedResponse": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiVideoTrackInfo": {
        "type": "object",
        "properties": {
          "targetBitrate": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiVouchersConfig": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Vouchers enabled"
          }
        },
        "description": "Vouchers configuration"
      },
      "ApiWidevineConfigurationResponse": {
        "type": "object",
        "properties": {
          "certificateUrl": {
            "type": "string"
          }
        }
      },
      "AssetDownload": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Download"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AssetResponse": {
        "type": "object",
        "properties": {
          "studio": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "LIVE_EVENT",
              "AD",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "publicCustomData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "mrrCluster": {
            "type": "string"
          },
          "originalTitle": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionReferenceResponse"
            }
          },
          "systemTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "season": {
            "type": "string"
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "trackSizes": {
            "$ref": "#/components/schemas/TrackSizes"
          },
          "isLive": {
            "type": "boolean"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "geoCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "adminDisplayName": {
            "type": "string"
          },
          "runtime": {
            "type": "integer",
            "format": "int32"
          },
          "localizedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "seasonId": {
            "type": "string"
          },
          "materials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialResponse"
            }
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramListEntryResponse"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "popularity": {
            "$ref": "#/components/schemas/Popularity"
          },
          "ingestFlow": {
            "type": "string"
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "overlayWidgetLayoutId": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/EventDataResponse"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "popularityScores": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetId": {
            "type": "string"
          },
          "channelFeatures": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIRTUAL",
                "VC_CURATED",
                "VC_PERSONALIZED",
                "VC_SCHEDULED",
                "EPG"
              ]
            }
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicationResponse"
            }
          }
        }
      },
      "Audio": {
        "type": "object",
        "properties": {
          "present": {
            "type": "string"
          },
          "stereo": {
            "type": "string"
          }
        },
        "xml": {
          "name": "audio"
        }
      },
      "AudioTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "trackInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackInfo"
            }
          }
        }
      },
      "AvailabilityKeys": {
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "availabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currentAvailabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "futureAvailabilityKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "entitleExposure": {
            "type": "boolean"
          }
        }
      },
      "Bookmarks": {
        "type": "object",
        "properties": {
          "lastViewedOffset": {
            "type": "integer",
            "format": "int64"
          },
          "liveTime": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "CDN": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          }
        }
      },
      "Channel": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "array",
            "xml": {
              "name": "display-name"
            },
            "items": {
              "$ref": "#/components/schemas/DisplayName"
            }
          },
          "icon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Icon"
            }
          },
          "url": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "channel"
        }
      },
      "CollectionReferenceResponse": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "collectionId": {
            "type": "string"
          }
        }
      },
      "Components": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiComponent"
              },
              {
                "$ref": "#/components/schemas/ApiComponentReference"
              }
            ]
          }
        }
      },
      "ContractRestrictions": {
        "type": "object",
        "properties": {
          "airplayEnabled": {
            "type": "boolean"
          },
          "ffEnabled": {
            "type": "boolean"
          },
          "maxBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "format": "int32"
          },
          "minBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "rwEnabled": {
            "type": "boolean"
          },
          "timeshiftEnabled": {
            "type": "boolean"
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "country"
        }
      },
      "Credits": {
        "type": "object",
        "properties": {
          "director": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Actor"
            }
          },
          "writer": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "adapter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "producer": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "composer": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "editor": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "presenter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commentator": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "guest": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "xml": {
          "name": "credits"
        }
      },
      "Desc": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "desc"
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "os": {
            "type": "string"
          },
          "rights": {
            "$ref": "#/components/schemas/Rights"
          },
          "model": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "WEB",
              "MOBILE",
              "TABLET",
              "APPLE_TV",
              "SMART_TV",
              "CONSOLE",
              "STB"
            ]
          },
          "manufacturer": {
            "type": "string"
          }
        }
      },
      "Didomi": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "API Key"
          },
          "noticeId": {
            "type": "string",
            "description": "Notice Id"
          },
          "tvNoticeId": {
            "type": "string",
            "description": "TV Notice Id"
          },
          "appNoticeId": {
            "type": "string",
            "description": "App Notice Id"
          }
        },
        "description": "Didomi consent management"
      },
      "DisplayName": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "display-name"
        }
      },
      "Download": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "clientIp": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "deviceModelId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "DownloadInfo": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          },
          "durationInMs": {
            "type": "integer",
            "format": "int64"
          },
          "requestId": {
            "type": "string"
          },
          "audios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoTrack"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Track"
            }
          },
          "downloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DownloadVerified": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "DRMLicense": {
        "type": "object",
        "properties": {
          "licenseActivation": {
            "type": "integer",
            "format": "int64"
          },
          "licenseExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "licenseExpirationReason": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "NOT_ENTITLED",
              "GEO_BLOCKED",
              "VPN_BLOCKED",
              "DOWNLOAD_BLOCKED",
              "DEVICE_BLOCKED",
              "LICENSE_EXPIRED",
              "NOT_AVAILABLE_IN_FORMAT",
              "CONCURRENT_STREAMS_LIMIT_REACHED",
              "NOT_ENABLED",
              "GAP_IN_EPG",
              "EPG_PLAY_MAX_HOURS",
              "ANONYMOUS_IP_BLOCKED"
            ]
          },
          "com.apple.fps": {
            "$ref": "#/components/schemas/DrmUrls"
          },
          "com.microsoft.playready": {
            "$ref": "#/components/schemas/DrmUrls"
          },
          "com.widevine.alpha": {
            "$ref": "#/components/schemas/DrmUrls"
          }
        }
      },
      "DrmUrls": {
        "type": "object",
        "properties": {
          "certificateUrl": {
            "type": "string"
          },
          "licenseServerUrl": {
            "type": "string"
          }
        }
      },
      "EmptyResponse": {
        "type": "object"
      },
      "EntitleResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "formats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFormatEntitle"
            }
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationStart": {
            "type": "string",
            "format": "date-time"
          },
          "publicationEnd": {
            "type": "string",
            "format": "date-time"
          },
          "entitlementId": {
            "type": "string"
          },
          "entitlementStart": {
            "type": "string",
            "format": "date-time"
          },
          "entitlementEnd": {
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "streamInfo": {
            "$ref": "#/components/schemas/StreamInfo"
          },
          "status": {
            "type": "string"
          },
          "entitleExposure": {
            "type": "boolean"
          }
        }
      },
      "EpgInfo": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "entitlementCheck": {
            "type": "boolean"
          }
        }
      },
      "EpisodeNum": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "system": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "episode-num"
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EventDataResponse": {
        "type": "object",
        "properties": {
          "publicStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "publicEndTime": {
            "type": "string",
            "format": "date-time"
          },
          "channelId": {
            "type": "string"
          }
        }
      },
      "ExternalReferenceResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "locator": {
            "type": "string"
          }
        }
      },
      "Filters": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filters-Filter"
            }
          }
        }
      },
      "Filters-Filter": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Icon": {
        "type": "object",
        "properties": {
          "src": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "width": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "height": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "icon"
        }
      },
      "Iframe": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "orientation": {
            "type": "string"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ImageResponse": {
        "type": "object",
        "properties": {
          "orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE",
              "SQUARE",
              "UNKNOWN"
            ]
          },
          "copyright": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "caption": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "JsonAccount": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "ownerUserId": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stripeCustomerId": {
            "type": "string"
          },
          "stripeLiveMode": {
            "type": "boolean"
          },
          "preferredPaymentMethod": {
            "type": "string"
          },
          "monitoringAccount": {
            "type": "boolean"
          },
          "stripePaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StripePaymentMethod"
            }
          }
        }
      },
      "JsonNode": {
        "type": "object"
      },
      "Keyword": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "keyword"
        }
      },
      "Language": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "language"
        }
      },
      "LastChance": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "last-chance"
        }
      },
      "Length": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "units": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "length"
        }
      },
      "LinkedEntityResponse": {
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string"
          },
          "linkType": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          }
        }
      },
      "LocalizedDataResponse": {
        "type": "object",
        "properties": {
          "shortDescription": {
            "type": "string"
          },
          "tinyDescription": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            }
          },
          "extendedDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "sortingTitle": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "seoTitle": {
            "type": "string"
          },
          "seoDescription": {
            "type": "string"
          },
          "longFormDescription": {
            "type": "string"
          }
        }
      },
      "LocalizedPersonDataResponse": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "Map": {
        "type": "object",
        "description": "A key value Map"
      },
      "Marker": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "adMarkerType": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "MarkerPointResponse": {
        "type": "object",
        "properties": {
          "thumbnail": {
            "type": "boolean"
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleLocalizedResponse"
            }
          },
          "type": {
            "type": "string"
          },
          "markerTimeEnd": {
            "type": "string"
          },
          "markerTime": {
            "type": "string"
          }
        }
      },
      "MaterialResponse": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "profile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "markerPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkerPointResponse"
            }
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "adMarkers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          }
        }
      },
      "MediaFormat": {
        "type": "object",
        "properties": {
          "drm": {
            "$ref": "#/components/schemas/DRMLicense"
          },
          "format": {
            "type": "string",
            "enum": [
              "DASH",
              "SMOOTHSTREAMING",
              "HLS",
              "MP4",
              "SYNDICATED",
              "MP3",
              "AAC"
            ]
          },
          "mediaLocator": {
            "type": "string"
          },
          "orgMediaLocator": {
            "type": "string"
          },
          "vastUrl": {
            "type": "string"
          },
          "liveDelay": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MediaFormatDownload": {
        "type": "object",
        "properties": {
          "drm": {
            "$ref": "#/components/schemas/DRMLicense"
          },
          "format": {
            "type": "string",
            "enum": [
              "DASH",
              "SMOOTHSTREAMING",
              "HLS",
              "MP4",
              "SYNDICATED",
              "MP3",
              "AAC"
            ]
          },
          "mediaLocator": {
            "type": "string"
          }
        }
      },
      "MediaFormatEntitle": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "DASH",
              "SMOOTHSTREAMING",
              "HLS",
              "MP4",
              "SYNDICATED",
              "MP3",
              "AAC"
            ]
          }
        }
      },
      "MediaResponse": {
        "type": "object",
        "properties": {
          "bitrates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubtitleResponse"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "format": {
            "type": "string"
          },
          "keyId": {
            "type": "string"
          },
          "mediaId": {
            "type": "string"
          },
          "mediaLocator": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "ingestionProfile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "drm": {
            "type": "string"
          },
          "programId": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "New": {
        "type": "object",
        "xml": {
          "name": "new"
        }
      },
      "Object": {
        "type": "object",
        "description": "An object"
      },
      "OrigLanguage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "orig-language"
        }
      },
      "ParentalRatingResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "scheme": {
            "type": "string"
          },
          "rating": {
            "type": "string"
          }
        }
      },
      "ParentalRatingsFilter": {
        "type": "object",
        "properties": {
          "ratings": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "PasswordTuple": {
        "type": "object",
        "properties": {
          "algorithm": {
            "$ref": "#/components/schemas/Algorithm"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PersonResponse": {
        "type": "object",
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "localizedPersonData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedPersonDataResponse"
            }
          },
          "role": {
            "type": "string"
          },
          "function": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "dateOfDeath": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "PlayResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "ads": {
            "$ref": "#/components/schemas/Ads"
          },
          "analytics": {
            "$ref": "#/components/schemas/Analytics"
          },
          "assetId": {
            "type": "string"
          },
          "audioOnly": {
            "type": "boolean"
          },
          "bookmarks": {
            "$ref": "#/components/schemas/Bookmarks"
          },
          "cdn": {
            "$ref": "#/components/schemas/CDN"
          },
          "concurrentSessionsCount": {
            "type": "integer",
            "format": "int32"
          },
          "contractRestrictions": {
            "$ref": "#/components/schemas/ContractRestrictions"
          },
          "deviceId": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "durationInMs": {
            "type": "integer",
            "format": "int64"
          },
          "durationInMilliseconds": {
            "type": "integer",
            "format": "int64"
          },
          "entitlementType": {
            "type": "string",
            "enum": [
              "TVOD",
              "SVOD",
              "FVOD",
              "AVOD"
            ]
          },
          "epg": {
            "$ref": "#/components/schemas/EpgInfo"
          },
          "formats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFormat"
            }
          },
          "materialId": {
            "type": "string"
          },
          "materialVersion": {
            "type": "integer",
            "format": "int32"
          },
          "materialProfile": {
            "type": "string"
          },
          "playSessionId": {
            "type": "string"
          },
          "playToken": {
            "type": "string"
          },
          "playTokenExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "playTokenExpirationReason": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "publicationId": {
            "type": "string"
          },
          "publishingType": {
            "type": "string"
          },
          "sprites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sprites"
            }
          },
          "streamInfo": {
            "$ref": "#/components/schemas/StreamInfo"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtitle"
            }
          },
          "requestId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "entitleExposure": {
            "type": "boolean"
          }
        }
      },
      "Popularity": {
        "type": "object",
        "properties": {
          "week": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PreferencesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Premiere": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "premiere"
        }
      },
      "PresentationItem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "subTitle": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "iframe": {
            "$ref": "#/components/schemas/Iframe"
          },
          "trailerAssetId": {
            "type": "string"
          },
          "backgroundColor": {
            "type": "string"
          }
        }
      },
      "PreviouslyShown": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "channel": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "previously-shown"
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string"
          },
          "businessUnit": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entitlementRequired": {
            "type": "boolean"
          },
          "anonymousAllowed": {
            "type": "boolean"
          },
          "hasAds": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "blocked": {
            "type": "boolean"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProgramListEntryResponse": {
        "type": "object",
        "properties": {
          "catchupBlocked": {
            "type": "boolean"
          },
          "publicStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "publicEndTime": {
            "type": "string",
            "format": "date-time"
          },
          "programId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          }
        }
      },
      "Programme": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Title"
            }
          },
          "subTitle": {
            "type": "array",
            "xml": {
              "name": "sub-title"
            },
            "items": {
              "$ref": "#/components/schemas/SubTitle"
            }
          },
          "desc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Desc"
            }
          },
          "credits": {
            "$ref": "#/components/schemas/Credits"
          },
          "date": {
            "type": "string"
          },
          "category": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "keyword": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Keyword"
            }
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "origLanguage": {
            "$ref": "#/components/schemas/OrigLanguage"
          },
          "length": {
            "$ref": "#/components/schemas/Length"
          },
          "icon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Icon"
            }
          },
          "url": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "country": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          },
          "episodeNum": {
            "type": "array",
            "xml": {
              "name": "episode-num"
            },
            "items": {
              "$ref": "#/components/schemas/EpisodeNum"
            }
          },
          "video": {
            "$ref": "#/components/schemas/Video"
          },
          "audio": {
            "$ref": "#/components/schemas/Audio"
          },
          "previouslyShown": {
            "$ref": "#/components/schemas/PreviouslyShown"
          },
          "premiere": {
            "$ref": "#/components/schemas/Premiere"
          },
          "lastChance": {
            "$ref": "#/components/schemas/LastChance"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtitles"
            }
          },
          "rating": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rating"
            }
          },
          "starRating": {
            "type": "array",
            "xml": {
              "name": "star-rating"
            },
            "items": {
              "$ref": "#/components/schemas/StarRating"
            }
          },
          "review": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          },
          "start": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "stop": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "actualStart": {
            "type": "string",
            "xml": {
              "name": "actual-start",
              "attribute": true
            }
          },
          "actualStop": {
            "type": "string",
            "xml": {
              "name": "actual-stop",
              "attribute": true
            }
          },
          "pdcStart": {
            "type": "string",
            "xml": {
              "name": "pdc-start",
              "attribute": true
            }
          },
          "vpsStart": {
            "type": "string",
            "xml": {
              "name": "vps-start",
              "attribute": true
            }
          },
          "showview": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "videoplus": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "channel": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "clumpidx": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "new": {
            "$ref": "#/components/schemas/New"
          }
        },
        "xml": {
          "name": "programme"
        }
      },
      "Publication": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "stop": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "actualStart": {
            "type": "string",
            "xml": {
              "name": "actual-start",
              "attribute": true
            }
          },
          "actualStop": {
            "type": "string",
            "xml": {
              "name": "actual-stop",
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "publication"
        }
      },
      "PublicationResponse": {
        "type": "object",
        "properties": {
          "toDate": {
            "type": "string",
            "format": "date-time"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "rights": {
            "$ref": "#/components/schemas/Rights"
          },
          "contractId": {
            "type": "string"
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "publicationId": {
            "type": "string"
          },
          "publicationDate": {
            "type": "string",
            "format": "date-time"
          },
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Rating": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "icon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Icon"
            }
          },
          "system": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "rating"
        }
      },
      "Result": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "source": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "reviewer": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "review"
        }
      },
      "Rights": {
        "type": "object",
        "properties": {
          "sessionShiftEnabled": {
            "type": "boolean"
          },
          "maxAds": {
            "type": "integer",
            "format": "int32"
          },
          "fourGBlocked": {
            "type": "boolean"
          },
          "ffEnabled": {
            "type": "boolean"
          },
          "minPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "maxResHeight": {
            "type": "integer",
            "format": "int32"
          },
          "maxPlayPosition": {
            "type": "integer",
            "format": "int32"
          },
          "maxResWidth": {
            "type": "integer",
            "format": "int32"
          },
          "playCount": {
            "type": "integer",
            "format": "int32"
          },
          "jailbrokenBlocked": {
            "type": "boolean"
          },
          "maxFileSize": {
            "type": "integer",
            "format": "int64"
          },
          "amcDebugLogEnabled": {
            "type": "boolean"
          },
          "locationEnabled": {
            "type": "boolean"
          },
          "minBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "downloadBlocked": {
            "type": "boolean"
          },
          "rwEnabled": {
            "type": "boolean"
          },
          "maxBitrate": {
            "type": "integer",
            "format": "int32"
          },
          "threeGBlocked": {
            "type": "boolean"
          },
          "airplayBlocked": {
            "type": "boolean"
          },
          "fwEnabled": {
            "type": "boolean"
          },
          "wifiBlocked": {
            "type": "boolean"
          },
          "maxDownloadCount": {
            "type": "integer",
            "format": "int32"
          },
          "analyticsEnabled": {
            "type": "boolean"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "streamingBlocked": {
            "type": "boolean"
          },
          "activation": {
            "type": "string",
            "format": "date-time"
          },
          "hdmiblocked": {
            "type": "boolean"
          }
        }
      },
      "SeasonResponse": {
        "type": "object",
        "properties": {
          "episodeCount": {
            "type": "integer",
            "format": "int32"
          },
          "studio": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "tvShowId": {
            "type": "string"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "localizedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "seasonId": {
            "type": "string"
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "season": {
            "type": "string"
          },
          "startYear": {
            "type": "integer",
            "format": "int32"
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "availableDate": {
            "type": "string",
            "format": "date-time"
          },
          "endYear": {
            "type": "integer",
            "format": "int32"
          },
          "episodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetResponse"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SimpleLocalizedResponse": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageResponse"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "Sprites": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "vtt": {
            "type": "string"
          },
          "offsetInMs": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StarRating": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "icon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Icon"
            }
          },
          "system": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "star-rating"
        }
      },
      "StreamInfo": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "end": {
            "type": "integer",
            "format": "int64"
          },
          "live": {
            "type": "boolean"
          },
          "event": {
            "type": "boolean"
          },
          "programId": {
            "type": "string"
          },
          "nextProgramId": {
            "type": "string"
          },
          "nextAssetId": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "startPadding": {
            "type": "integer",
            "format": "int32"
          },
          "endPadding": {
            "type": "integer",
            "format": "int32"
          },
          "persistent": {
            "type": "boolean"
          },
          "timeShift": {
            "type": "boolean"
          },
          "maxResolution": {
            "type": "string"
          },
          "ssai": {
            "type": "boolean"
          },
          "static": {
            "type": "boolean"
          }
        }
      },
      "string": {
        "type": "string",
        "description": "A string values"
      },
      "StripeCard": {
        "type": "object",
        "properties": {
          "brand": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "exp_month": {
            "type": "integer",
            "format": "int32"
          },
          "exp_year": {
            "type": "integer",
            "format": "int32"
          },
          "last4": {
            "type": "string"
          }
        }
      },
      "StripePaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "card": {
            "$ref": "#/components/schemas/StripeCard"
          }
        }
      },
      "StripeSetupIntentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        }
      },
      "Subtitle": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SubTitle": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "sub-title"
        }
      },
      "SubtitleResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        }
      },
      "Subtitles": {
        "type": "object",
        "properties": {
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "type": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "subtitles"
        }
      },
      "SubtitleTrackInfo": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "tagValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagValuesResponse"
            }
          },
          "type": {
            "type": "string"
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TagValuesResponse": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "string"
          }
        }
      },
      "TimeResponse": {
        "required": [
          "epochMillis",
          "iso8601"
        ],
        "type": "object",
        "properties": {
          "epochMillis": {
            "type": "integer",
            "description": "Time as Epoch milliseconds",
            "format": "int64"
          },
          "iso8601": {
            "type": "string",
            "description": "Time as UTC ISO 8601",
            "format": "date-time"
          }
        }
      },
      "Title": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "title"
        }
      },
      "Track": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bitrate": {
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "hlsName": {
            "type": "string"
          },
          "dashLang": {
            "type": "string"
          },
          "dashRole": {
            "type": "string"
          },
          "dashChannels": {
            "type": "string"
          }
        }
      },
      "TrackInfo": {
        "type": "object",
        "properties": {
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "targetBitrate": {
            "type": "string"
          }
        }
      },
      "TrackSizes": {
        "type": "object",
        "properties": {
          "subtitleTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubtitleTrackInfo"
            }
          },
          "videoTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoTrackInfo"
            }
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioTrackInfo"
            }
          }
        }
      },
      "Tv": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            }
          },
          "programme": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Programme"
            }
          },
          "publication": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Publication"
            }
          },
          "date": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "sourceInfoUrl": {
            "type": "string",
            "xml": {
              "name": "source-info-url",
              "attribute": true
            }
          },
          "sourceInfoName": {
            "type": "string",
            "xml": {
              "name": "source-info-name",
              "attribute": true
            }
          },
          "sourceDataUrl": {
            "type": "string",
            "xml": {
              "name": "source-data-url",
              "attribute": true
            }
          },
          "generatorInfoName": {
            "type": "string",
            "xml": {
              "name": "generator-info-name",
              "attribute": true
            }
          },
          "generatorInfoUrl": {
            "type": "string",
            "xml": {
              "name": "generator-info-url",
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "tv"
        }
      },
      "UpdatePaymentMethodRequest": {
        "type": "object",
        "properties": {
          "expiryMonth": {
            "type": "integer",
            "format": "int32"
          },
          "expiryYear": {
            "type": "integer",
            "format": "int32"
          },
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "UpdatePrederredPaymentMethodRequest": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string"
          }
        }
      },
      "UPHAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "audioTracks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "changed": {
            "type": "string",
            "format": "date-time"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "customData": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "defaultAudioTrack": {
            "type": "string"
          },
          "episode": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalReferenceResponse"
            }
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "spokenLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "releaseDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string",
            "enum": [
              "MOVIE",
              "TV_SHOW",
              "EPISODE",
              "CLIP",
              "TV_CHANNEL",
              "LIVE_EVENT",
              "AD",
              "COLLECTION",
              "PODCAST",
              "PODCAST_EPISODE",
              "EVENT",
              "OTHER"
            ]
          },
          "originalTitleLanguage": {
            "type": "string"
          },
          "parentalRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentalRatingResponse"
            }
          },
          "originalTitle": {
            "type": "string"
          },
          "materialType": {
            "type": "string",
            "enum": [
              "LOW_LATENCY_CHANNEL"
            ]
          },
          "productionCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "season": {
            "type": "string"
          },
          "productionYear": {
            "type": "integer",
            "format": "int32"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonResponse"
            }
          },
          "trackSizes": {
            "$ref": "#/components/schemas/TrackSizes"
          },
          "subtitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "live": {
            "type": "boolean"
          },
          "seasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeasonResponse"
            }
          },
          "geoCountries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "runtime": {
            "type": "integer",
            "format": "int32"
          },
          "popularityScores": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "localized": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedDataResponse"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponse"
            }
          },
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            }
          },
          "seasonId": {
            "type": "string"
          },
          "linkedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkedEntityResponse"
            }
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Marker"
            }
          },
          "publications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPublication"
            }
          },
          "tvShowId": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCollectionReference"
            }
          },
          "slugs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ValidateCredentialsRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The password to verify if it's the correct one."
          }
        }
      },
      "ValidateCredentialsResponse": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "If the password was valid or not."
          }
        }
      },
      "Video": {
        "type": "object",
        "properties": {
          "present": {
            "type": "string"
          },
          "colour": {
            "type": "string"
          },
          "aspect": {
            "type": "string"
          },
          "quality": {
            "type": "string"
          }
        },
        "xml": {
          "name": "video"
        }
      },
      "VideoTrack": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bitrate": {
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "width": {
            "type": "integer",
            "format": "int64"
          },
          "height": {
            "type": "integer",
            "format": "int64"
          },
          "hlsName": {
            "type": "string"
          },
          "dashLang": {
            "type": "string"
          },
          "dashRole": {
            "type": "string"
          },
          "dashChannels": {
            "type": "string"
          }
        }
      },
      "VideoTrackInfo": {
        "type": "object",
        "properties": {
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "targetBitrate": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WatchedTvShowResponse": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/UPHAsset"
          },
          "startedWatching": {
            "type": "boolean"
          },
          "lastViewedOffset": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-key": {
        "type": "http",
        "description": "Get a sessionToken with any of the [Authentication](#/Authentication) endpoints.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "account labels",
      "description": "Accounts may be labeled, which can be used by very specific applications."
    },
    {
      "name": "devices",
      "description": "Manage account's device logins."
    },
    {
      "name": "pin codes",
      "description": "Server side storage and validation of application defined pin codes. Enforcement logic is done client side."
    },
    {
      "name": "anonymous login",
      "description": "Create an anonymous session."
    },
    {
      "name": "activation code - device pairing",
      "description": "Code based authentication on big screen."
    },
    {
      "name": "authentication",
      "description": "Login and logout users."
    },
    {
      "name": "user",
      "description": "Signup and manage user."
    },
    {
      "name": "user profiles",
      "description": "Enables household members to have a personal experience."
    },
    {
      "name": "system",
      "description": "System configuration."
    },
    {
      "name": "documents",
      "description": "Get documents, e.g. privacy policy."
    },
    {
      "name": "time",
      "description": "System time."
    },
    {
      "name": "location",
      "description": "Get location based on IP-address."
    },
    {
      "name": "store",
      "description": "Manage purchases and payments."
    }
  ]
}